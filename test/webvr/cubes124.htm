<!DOCTYPE html>
<html lang="en">
<head>
<title>cubes124</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<style>body { color:#000;background-color:#aaa;margin:0px;overflow:hidden;font-family:Sans-serif; }</style>
<script src="/conet.js"></script>
<script src="/menu.js"></script>
<script src="/sound.js"></script>
<script src="/vecmath.js"></script>
<script src="/canvas/pd5.js"></script>
<script src="/three/threePd5.js"></script>
</head>
<body>
<script type="module">
import * as THREE from '/three/r124/build/three.module.js';
import { BoxLineGeometry } from '/three/r124/examples/jsm/geometries/BoxLineGeometry.js';
import { VRButton } from '/three/r124/examples/jsm/webxr/VRButton.js';
import { XRControllerModelFactory } from '/three/r124/examples/jsm/webxr/XRControllerModelFactory.js';
import { OrbitControls } from '/three/r124/examples/jsm/controls/OrbitControls.js';
(function() {
  //---
  const clock = new THREE.Clock();
  let container,camera,scene,raycaster,renderer,
      room,controller,ctrl1,gp0,gp1,controllerGrip,INTERSECTED,
      rotateObj,cubes=[],controls;
  const tempMatrix=new THREE.Matrix4(),vt=new THREE.Vector3();
  
  init();
  animate();
  
  function init() {
    
    container = document.createElement( 'div' );
    document.body.appendChild( container );
    
    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x505050 );
    
    camera=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,0.1,100);
    camera.position.set(0,1.6,3);
    scene.add(camera);
    //console.log(camera);
    
    room = new THREE.LineSegments(
      new BoxLineGeometry( 6, 6, 6, 10, 10, 10 ).translate( 0, 3, 0 ),
      new THREE.LineBasicMaterial( { color: 0x808080 } )
    );
    scene.add( room );
    
    scene.add(new THREE.AmbientLight(0xffffff,0.07));//new THREE.HemisphereLight(0x606060,0x404040));
    
    const light = new THREE.DirectionalLight(0xffffff);
    light.position.set(1,1,1).normalize();
    scene.add(light);
    
    const geometry = new THREE.BoxBufferGeometry( 0.15, 0.15, 0.15 );
    
    const o=new THREE.Mesh(geometry,new THREE.MeshLambertMaterial({color:0x999999}));
    o.scale.set(0.2,0.4,0.1);
    o.position.set(0.1,0,-0.5);
    camera.add(o);rotateObj=o;
    
    
    for ( let i = 0; i < 200; i ++ ) {
    
      const object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } ) );
    
      object.position.x = Math.random() * 4 - 2;
      object.position.y = Math.random() * 4;
      object.position.z = Math.random() * 4 - 2;
    
      object.rotation.x = Math.random() * 2 * Math.PI;
      object.rotation.y = Math.random() * 2 * Math.PI;
      object.rotation.z = Math.random() * 2 * Math.PI;
    
      object.scale.x = Math.random() + 0.5;
      object.scale.y = Math.random() + 0.5;
      object.scale.z = Math.random() + 0.5;
    
      object.userData.velocity = new THREE.Vector3();
      object.userData.velocity.x = Math.random() * 0.01 - 0.005;
      object.userData.velocity.y = Math.random() * 0.01 - 0.005;
      object.userData.velocity.z = Math.random() * 0.01 - 0.005;
    
      room.add(object);
      cubes.push(object);
    }
    
    raycaster = new THREE.Raycaster();
    
    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );
    renderer.outputEncoding = THREE.sRGBEncoding;
    renderer.xr.enabled = true;
    container.appendChild( renderer.domElement );
    
    controls=new OrbitControls(camera,renderer.domElement);
    //
    
    function onSelectStart() {
      
      this.userData.isSelecting = true;
      
    }
    
    function onSelectEnd() {
      
      					this.userData.isSelecting = false;
      
    }
    
    controller=renderer.xr.getController(0);
    controller.addEventListener('selectstart',onSelectStart);
    controller.addEventListener('selectend',onSelectEnd);
    controller.addEventListener('connected',function (e) {
      //---
      this.add(buildController(e.data));
      //console.log(e.data.gamepad);
      gp0=e.data.gamepad;
      //...
    }
    );
    controller.addEventListener('disconnected',function () {
      //---
      this.remove( this.children[0]);
      //...
    }
    );
    scene.add(controller);
    //onsole.log(controller);
    
    const controllerModelFactory = new XRControllerModelFactory();
    
    controllerGrip = renderer.xr.getControllerGrip( 0 );
    controllerGrip.add( controllerModelFactory.createControllerModel( controllerGrip ) );
    scene.add( controllerGrip );
    
    ctrl1=renderer.xr.getController(1);
    ctrl1.addEventListener('connected',function(e) {
      //---
      this.add(buildController(e.data));
      gp1=e.data.gamepad;
      //onsole.log('ctrl1 connected');
      //...
    }
    );
    scene.add(ctrl1);
    
    let cg1=renderer.xr.getControllerGrip(1);
    cg1.add(controllerModelFactory.createControllerModel(cg1));
    scene.add(cg1);
    
    
    window.addEventListener('resize',onWindowResize,false);
    //
    
    //document.body.appendChild(VRButton.createButton(renderer));
    
    window.THREE=THREE;
    threeEnv.base=room;//scene;
    threeEnv.scene=room;
    threeEnv.path='/shooter/';
    threeEnv.coBoSp=1;//computeBoundingSphere
    threeEnv.camera=camera;
    Conet.download({fn:'/shooter/objs/templar/o5.txt',f:function(v) {
      //---
      var o=Pd5.load(v);
      o.scale=1;
      Pd5.animStart(o,'stand2');
      threeAddObj(o,0,0,0,3);
      //...
    }
    });
    
    Menu.init([{s:'&#9776;',noTri:true,fs:1.4,pw:0.05,sub:[
      Menu.mFullscreen,
    {s:'VR',actionf:function() {
      //---
      function onSessionStarted(session) {
        //---
        renderer.xr.setSession( session );
        //...
      }
      
      const sessionInit = { optionalFeatures: [ 'local-floor', 'bounded-floor', 'hand-tracking' ] };
      navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );
      //...
    }
      }]}]
      ,{listen:1});
    
    //---
  }
  function buildController( data ) {
    
    let geometry, material;
    
    switch ( data.targetRayMode ) {
    
    case 'tracked-pointer':
    
    geometry = new THREE.BufferGeometry();
    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( [ 0, 0, 0, 0, 0, - 1 ], 3 ) );
    geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( [ 0.5, 0.5, 0.5, 0, 0, 0 ], 3 ) );
    
    material = new THREE.LineBasicMaterial( { vertexColors: true, blending: THREE.AdditiveBlending } );
    
    return new THREE.Line( geometry, material );
    
    case 'gaze':
    
    geometry = new THREE.RingBufferGeometry( 0.02, 0.04, 32 ).translate( 0, 0, - 1 );
    material = new THREE.MeshBasicMaterial( { opacity: 0.5, transparent: true } );
    return new THREE.Mesh( geometry, material );
    
    }
    
  }
  function onWindowResize() {
    //...
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( window.innerWidth, window.innerHeight );
    //---
  }
  function animate() {
    
    renderer.setAnimationLoop( render );
    
  }
  function render() {
    
    const delta=clock.getDelta()*60,dt=delta;
    
    if ( controller.userData.isSelecting === true ) {
    
      const cube=cubes[0];//room.children[0];
      cubes.splice(0,1);
      //room.remove(cube);
    
      let pc=controller.position,pr=room.position;
      cube.position.set(pc.x-pr.x,pc.y-pr.y,pc.z-pr.z);
      cube.userData.velocity.x = ( Math.random() - 0.5 ) * 0.02 * delta;
      cube.userData.velocity.y = ( Math.random() - 0.5 ) * 0.02 * delta;
      cube.userData.velocity.z = ( Math.random() * 0.01 - 0.05 ) * delta;
      cube.userData.velocity.applyQuaternion( controller.quaternion );
      //room.add(cube);
      cubes.push(cube);
    
    }
    
    if (gp0) {
      rotateObj.rotation.y+=gp0.axes[2]*dt*0.1;
      const d=gp0.axes[3];
      if (Math.abs(d)>0.1) {
        //const position = new THREE.Vector3();
        //const rotation = new THREE.Quaternion();
        //const scale = new THREE.Vector3();
        //camera.matrixWorld.decompose(position,rotation,scale);
        tempMatrix.identity().extractRotation(camera.matrixWorld);
        vt.set(0,0,-1);
        vt.applyMatrix4(tempMatrix);
        vt.multiplyScalar(d*dt*0.1);
        room.position.x+=vt.x;
        room.position.y+=vt.y;
        room.position.z+=vt.z;
      }
    }
    if (gp1) {
      //room.position.x-=gp1.axes[2]*dt*0.1;
      //room.position.y+=gp1.axes[3]*dt*0.1;
    }
    
    // find intersections
    
    tempMatrix.identity().extractRotation( controller.matrixWorld );
    
    raycaster.ray.origin.setFromMatrixPosition( controller.matrixWorld );
    raycaster.ray.direction.set( 0, 0, - 1 ).applyMatrix4( tempMatrix );
    
    const intersects = raycaster.intersectObjects( room.children );
    
    if ( intersects.length > 0 ) {
    
      if ( INTERSECTED != intersects[ 0 ].object ) {
    
        if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
    
        INTERSECTED = intersects[ 0 ].object;
        INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
        INTERSECTED.material.emissive.setHex( 0xff0000 );
    
      }
    
    } else {
    
      if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
    
      INTERSECTED = undefined;
    
    }
    
    // Keep cubes inside room
    
    for (let i=0;i<cubes.length;i++) {
    
      const cube=cubes[i];//room.children[i];
    
      cube.userData.velocity.multiplyScalar( 1 - ( 0.001 * delta ) );
    
      cube.position.add( cube.userData.velocity );
    
      if ( cube.position.x < - 3 || cube.position.x > 3 ) {
    
        cube.position.x = THREE.MathUtils.clamp( cube.position.x, - 3, 3 );
        cube.userData.velocity.x = - cube.userData.velocity.x;
    
      }
    
      if ( cube.position.y < 0 || cube.position.y > 6 ) {
    
        cube.position.y = THREE.MathUtils.clamp( cube.position.y, 0, 6 );
        cube.userData.velocity.y = - cube.userData.velocity.y;
    
      }
    
      if ( cube.position.z < - 3 || cube.position.z > 3 ) {
    
        cube.position.z = THREE.MathUtils.clamp( cube.position.z, - 3, 3 );
        cube.userData.velocity.z = - cube.userData.velocity.z;
    
      }
    
      cube.rotation.x += cube.userData.velocity.x * 2 * delta;
      cube.rotation.y += cube.userData.velocity.y * 2 * delta;
      cube.rotation.z += cube.userData.velocity.z * 2 * delta;
    }
    
    threeRender(dt*10);
    controls.update();
    
    renderer.render( scene, camera );
    //...
  }
  //...
}
)();

</script>
</body>
</html><script>
//fr o,21
//fr o,21,10
//fr o,21,10,69
//fr o,21,10,76
//fr o,21,10,78
//fr o,21,10,90
//fr o,21,10,110
//fr o,21,10,115
//fr o,21,10,115,1
//fr o,21,14
//fr p,18,61
