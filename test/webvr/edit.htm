<!DOCTYPE html>
<html lang="en">
<head>
<title>editXr</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<link rel="shortcut icon" sizes="192x192" href="/canvas/paint/catapulto.png">
<link rel="apple-touch-icon" href="/canvas/paint/catapulto.png">
<style>body { color:#000;background-color:#aaa;margin:0px;overflow:hidden;font-family:Sans-serif; }</style>
<script src="/conet.js"></script>
<script src="/menu.js"></script>
<script src="/vecmath.js"></script>
<script src="/canvas/pd5.js"></script>
<script src="/three/threePd5.js"></script>
<script src="/util/deep.js"></script>
</head>
<body>
<script type="importmap">
{
"imports": {
"three": "/three/r160/build/three.module.js",
"three/addons/": "/three/r160/examples/jsm/"
}
}
</script>
<script type="module">
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { XrUtil } from '/util/gfx/XrUtil.js';
(function() {
  //---
  let container,camera,scene,renderer,
      controls,ph,raycaster,sceneh={},
      xrUtil=XrUtil,lsKey='editXr_0',sels=[],
      grid={},gridw=0.01,cursor0,cursor1,
      points=[],faces=[],lines=[],
      nearestPoint,clock,scripts={},
      matPoint0,matPoint1,matPointSel,matMesh,
      pointPlane,mesh,line,gridh,dir,
      inpLightColor,inpLightIntensity,mFn,
      paint=false,paintmesh;
  
  function init() {
    //---
    container=document.createElement('div');
    document.body.appendChild(container);
    
    scene=new THREE.Scene();
    scene.background=new THREE.Color(0x333333);//0x222222
    
    camera=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,0.01,50);
    camera.position.set(0,1.6,2);
    scene.add(camera);
    
    controls=new OrbitControls(camera,container);
    controls.target.set(0,1.6,0);
    
    
    controls.update();
    
    if (0) {
    gridh=new THREE.GridHelper(4,4,0x555555,0x111111);
    scene.add(gridh);
    }
    
    /*
    scene.add(new THREE.HemisphereLight(0x888877,0x777788,1));
    const light=new THREE.DirectionalLight(0xffffff,3);
    light.position.set(0,6,0);
    scene.add(light);
    */
    
    {
    let c=scene,l=new THREE.AmbientLight(0x555555),f=0.6;c.add(l);//555555
    //l=new THREE.PointLight(0xffffff,1,0);l.position.set(-1*f,2*f,1*f);scene.add(l);
    if (0) {
    l=new THREE.PointLight(0xffffff,5,0);l.position.set(-0.5*f,3*f,1*f);
    l.castShadow=true;
    l.shadow.camera.near=0.1;
    l.shadow.camera.far=1000;
    l.shadow.mapSize.width=1024;//2048;
    l.shadow.mapSize.height=1024;
    c.add(l);
    }
    l=new THREE.PointLight(0xaaffff,0.9);l.position.set(1*f,-2*f,-1*f);c.add(l);
    }
    
    
    
    //
    
    renderer=new THREE.WebGLRenderer({antialias:true});
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize(window.innerWidth,window.innerHeight);
    renderer.shadowMap.enabled=true;
    renderer.shadowMap.type=THREE.BasicShadowMap;
    renderer.xr.enabled=true;
    //renderer.outputEncoding=THREE.LinearEncoding;
    //renderer.outputEncoding=THREE.sRGBEncoding;
    
    //renderer.outputColorSpace=THREE.LinearSRGBColorSpace;
    //THREE.NoColorSpace = ""
    //THREE.SRGBColorSpace = "srgb"
    //THREE.LinearSRGBColorSpace = "srgb-linear"
    
    
    container.appendChild(renderer.domElement);
    
    let mDir;
    
    function lsFnKey(fn) {
      //
      return lsKey+((fn.length>0)?'file'+fn:'');
      //...
    }
    function oninput(v) {
      //---
      console.log(v);
      //...
    }
    
    function dirFileLoad() {
      //---
      let i=this.i,fn=dir.a[i].fn,key=lsFnKey(fn);
      let ls=localStorage[key];
      load(ls);
      if (dir.i!==i) {
        dir.i=i;
        mFn.s=fn;
        localStorage[lsKey+'dir']=JSON.stringify(dir);
        mDirUpdate();
      }
      
      xrUtil.log('Loaded \''+fn+'\' '+ls.length+'b');
      xrUtil.uiMenuSet({menu:xrUtil.hud.menu0});
      //onsole.log(this);
      //...
    }
    function dirFileDel() {
      //---
      
      let i=this.i,fn=dir.a[i].fn,key=lsFnKey(fn);
      let ls=localStorage[key];
      if ((dir.i>=i)&&(i!=0)) dir.i--;
      dir.a.splice(i,1);
      localStorage[lsKey+'dir']=JSON.stringify(dir);
      mDirUpdate();
      localStorage[key]='';
      console.log('emptied localStorage length='+localStorage[key].length);
      
      xrUtil.log('Deleted \''+fn+'\' '+ls.length+'b');
      xrUtil.uiMenuSet({menu:xrUtil.hud.menu0});
      //...
    }
    
    function mDirUpdate() {
      //---
      mDir.sub.length=1;
      mDir.ms=(dir.i+1)+'. of '+dir.a.length;
      //for (let f of dir.a) mDir.sub.push({s:f.fn,dy:0.01,h:0.08});
      for (let i=0;i<dir.a.length;i++) {
        mDir.sub.push({s:dir.a[i].fn,x:0.05,dy:0.01,w:0.4,h:0.08,i:i,ondown:dirFileLoad});
        if (dir.a.length>1) mDir.sub.push({s:'del',dx:0.05,w:0.15,i:i,ondown:dirFileDel});
      }
      //...
    }
    
    xrUtil.init({scene:scene,renderer:renderer,camera:camera,room:scene,sculpt:1//,vrPos:vrPos
      });
    xrUtil.initHud();
    xrUtil.hud.buttons=[
    
    mFn={s:'filename',ms:'Current file',x:0.05,y:0.85,w:0.4,h:0.1,oninput:function(v) {
      //---
      //xrUtil.log(v);
      //...
    }
    },
    
    mDir={s:'\u25bc',ms:'Files',x:0.5,y:0.85,w:0.1,h:0.1,sub:[
      {s:'Files \u25b2',x:0.05,y:0.4,w:0.4,h:0.1}
      ,{s:'File0',dy:0.05}
    ]},
    
    {s:'Save',x:0.65,y:0.85,w:0.3,h:0.1,ondown:function() {
      //---
      let fn=mFn.s;
      if (dir.a[dir.i].fn!=fn) { //---update dir
        dir.i=undefined;
        for (let i=dir.a.length-1;i>=0;i--) {
          if (dir.a[i].fn==fn) {
            //  if files can be removed via remove button, better do here skip with msg:
            //  'file already exists, remove it first'
            xrUtil.log('File already exists, first delete it.');
            return;
            //dir.i=i;break;
          }
        }
        if (dir.i===undefined) {
          dir.a.push({fn:fn});
          dir.i=dir.a.length-1;
          mDirUpdate();
        }
        localStorage[lsKey+'dir']=JSON.stringify(dir);
      }
      
      let s=serialize();
      localStorage[lsFnKey(fn)]=s;
      xrUtil.log('Saved '+s.length+' bytes.');
      //...
    }
    },
    
    {s:'R',x:0.5,y:0.4,w:0.05,h:0.1,ondown:function() {
      //---
      xrUtil.rayAll=!xrUtil.rayAll;
      xrUtil.log('rayAll='+xrUtil.rayAll);
      //...
    }
    },
    
    
    {s:'Paint',x:0.6,y:0.4,w:0.15,h:0.1,ondown:function() {
      //---
      paint=!paint;
      this.s=paint?'NP':'Paint';
      controls.enabled=!paint;
      if (paint) scene.add(paintmesh); else scene.remove(paintmesh);
      //xrUtil.rayAll
      //...
    }
    },
    
    {s:'Grid',x:0.8,y:0.4,w:0.15,h:0.1,ondown:function() {
      //---
      gridh.visible=!gridh.visible;
      //...
    }
    },
    
    {s:'Point',x:0.05,y:0.4,w:0.25,h:0.1,ondown:function() {
      //---
      let x=0,y=0,z=0;
      if (sels.length>0) {
        for (let p of sels) { p=p.position;x+=p.x;y+=p.y;z+=p.z; }; 
        x/=sels.length;y/=sels.length;z/=sels.length;
      }
      let g=new THREE.BoxGeometry(0.01,0.01,0.01);
      let mesh=new THREE.Mesh(g,matPoint0);
      mesh.position.set(x,y,z);
      scene.add(mesh);points.push(mesh);mesh.userData.op={};
      xrUtil.log(points.length+'. point added.');
      //...
    }
     }
     
     ,{s:'\u25bc',x:0.35,y:0.4,w:0.1,h:0.1,sub:[
     
       {s:'Point \u25b2',x:0.05,y:0.4,w:0.4,h:0.1},
       
    {s:'Pd5',x:0.05,y:0.55,w:0.4,h:0.1,ondown:function() {
      //---
      if (sels.length!=1) { xrUtil.log('Select 1 point.');return; }
      let p=sels[0],op=p.userData.op;
      if (op.pd5) {
        delete(op.pd5);
        p.remove(p.children[0]);
        threeRemoveObj(p.userData.o5);
      } else {
        op.pd5={fn:'/shooter/objs/templar/o5.txt'};
        pointPd5(p);
      }
      //alert(23);
      //...
    }
       },
    {s:'Light',x:0.05,y:0.7,w:0.25,h:0.1,ondown:function() {
      //---
      if (sels.length!=1) { xrUtil.log('Select 1 point.');return; }
      let p=sels[0],op=p.userData.op;
      if (op.light) {
        delete(op.light);
        console.log(p.children[0]);
        p.remove(p.children[0]);
        xrUtil.log('Light removed.');
      } else {
        op.light={};
        pointLight(p);
        xrUtil.log('Light set.');
      }
      //...
    }
       },
    {s:'\u25bc',x:0.35,y:0.7,w:0.1,h:0.1,sub:[
      {s:'Light \u25b2',x:0.05,y:0.4,w:0.4,h:0.1},
    {s:'Color',dy:0.05,w:0.35,noinp:1},inpLightColor={s:'ffaabb',dx:0.05,oninput:function(v) {
      //---
      if (v.length!=6) return;
      if (sels.length!=1) { xrUtil.log('Select 1 point with light.');return; }
      let m=sels[0],l=m.userData.light;
      if (!l) { xrUtil.log('Selected point has no light.');return; }
      l.color.setStyle('#'+v);
      m.userData.op.light.color=v;
      //...
    }
      },
    {s:'Intensity',x:0.05,dy:0.05,noinp:1},inpLightIntensity={s:'2',dx:0.05,oninput:function(v) {
      //---
      if (v.length==0) return;
      if (sels.length!=1) { xrUtil.log('Select 1 point with light.');return; }
      let m=sels[0],l=m.userData.light;
      if (!l) { xrUtil.log('Selected point has no light.');return; }
      l.intensity=parseFloat(v);;
      m.userData.op.light.intensity=v;
      //...
    }
      }
    
    ]}
    ,{s:'Delete',x:0.05,dy:0.05,w:0.4,ondown:function() {
      //---
      for (let p of sels) {
        let i=points.indexOf(p);
        points.splice(i,1);
        scene.remove(p);
      }
      xrUtil.log(sels.length+' points deleted.');
      sels.length=0;
      //...
    }
    }
     ]}
     
    ,{s:'Face',x:0.05,y:0.55,w:0.4,h:0.1,ondown:function() {
      //---
      if (sels.length!=3) { xrUtil.log('Select 3 points.');return; }
      faces.push({v0:sels[0],v1:sels[1],v2:sels[2]});
      xrUtil.log(faces.length+'. face added.');
      updateMesh();
      //...
    }
    }
    ,{s:'Line',x:0.05,y:0.7,w:0.4,h:0.1,ondown:function() {
      //---
      if (sels.length!=2) { xrUtil.log('Select 2 points.');return; }
      let v0=sels[0],v1=sels[1],del=false;
      //for (let l of lines) {
      for (let i=lines.length-1;i>=0;i--) {
        let l=lines[i];
        if (((l.v0===v0)&&(l.v1===v1))||((l.v0===v1)&&(l.v1===v0))) {
          lines.splice(i,1);
          xrUtil.log('Line removed, now '+lines.length+'.');
          del=true;
          break;
        }
      }
      if (!del) {
        let len;
        lines.push({v0:v0,v1:v1,ol:{l:len=Conet.f4(v0.position.distanceTo(v1.position))}});
        xrUtil.log(lines.length+'. line added (len='+len+').');
      }
      updateMesh();
      //...
    }
    }
    ];
    
    //\u25b2 \u25bc
    
    const version='v.0.730 ';//FOLDORUPDATEVERSION
    xrUtil.log('Edit '+version);
    
    //
    
    matPoint0  =new THREE.MeshBasicMaterial({color:0x66aa66,transparent:true,opacity:0.7});
    matPoint1  =new THREE.MeshBasicMaterial({color:0xaaaa66,transparent:true,opacity:0.8});
    matPointSel=new THREE.MeshBasicMaterial({color:0xdddddd,transparent:true,opacity:0.9});
    matMesh    =new THREE.MeshPhongMaterial({flatShading:true,color:0xdddddd,transparent:true,opacity:0.9});
    let cmat   =new THREE.MeshPhongMaterial({flatShading:true,color:0xaaaaaa,transparent:true,opacity:0.7});
    
    function line() {
      //---
      let geometry = new THREE.BufferGeometry();
      geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( [ 0, 0, 0, 0, 0, - 1 ], 3 ) );
      geometry.setAttribute( 'color', new THREE.Float32BufferAttribute( [ 0.5, 0.5, 0.5, 0, 0, 0 ], 3 ) );
      
      let material = new THREE.LineBasicMaterial( { vertexColors: true, blending: THREE.AdditiveBlending } );
      
      return new THREE.Line( geometry, material );
      //...
    }
    
    
    {let mesh=new THREE.Mesh(new THREE.BoxGeometry(0.01,0.01,0.01),cmat);
    mesh.position.z=-0.05;
    xrUtil.ctrl0.add(cursor0=mesh);
    xrUtil.ctrl0.add(line());
    } //left
    
    {let mesh=new THREE.Mesh(new THREE.BoxGeometry(0.02,0.02,0.02),cmat);
    mesh.position.z=-0.05;
    xrUtil.ctrl1.add(cursor1=mesh);
    xrUtil.ctrl1.add(line());
    } //right
    
    {
    let mesh=new THREE.Mesh(new THREE.BoxGeometry(0.01,0.01,0.01),matPoint1);
    paintmesh=mesh;//scene.add(mesh);
    } 
    
    
    raycaster=new THREE.Raycaster();
    
    
    function rayCol(co,down) {
      //---
      if (!paint) return;
      paintmesh.position.copy(co.point);
      if (down) {
        let ud=co.object.userData;
        if (ud.scriptPaint) ud.scriptPaint(co);
      }
      //...
    }
    xrUtil.rayCol=rayCol;
    
    let pointDown=false;
    function point(x,y,mode,e) {
      //---
      let p2=new THREE.Vector2(2*x/window.innerWidth-1,-2*y/window.innerHeight+1);
      raycaster.setFromCamera(p2,camera);
      
      if ((mode==2)&&(sels.length>0)&&pointPlane.visible) {//---drag
        let a=raycaster.intersectObject(pointPlane);
        //console.log(a.length);
        if (a.length==1) {
          sels[sels.length-1].position.copy(a[0].point);
          updateMesh();
        }
        return;
      }
      
      let a=raycaster.intersectObjects(scene.children);
      
      //onsole.log('point a.len='+a.length);
      let np=undefined,hudo=undefined,paintco=undefined;
      for (let co of a) {
        let o=co.object;
        if ((o===gridh)||(o===line)||(o===paintmesh)) continue;
        if (o===xrUtil.hudMesh) {
          //onsole.log('hud');
          hudo=co;
          break;
        }
        //onsole.log(o+' '+points.indexOf(o));
        if (points.indexOf(o)!=-1) {
          np=o;//setNearestPoint(o);
          break;
        }
        if ((!paintco)&&o.userData.scriptPaint) paintco=co;
        //console.log(co.object);
      }
      
      controls.enabled=!hudo&&!paint;
      xrUtil.hudIntersects(hudo,mode==1);
      if (hudo) return;
      
      if (paint) {
        if (paintco) {
          rayCol(paintco,pointDown);
          //paintmesh.position.copy(paintco.point);
          //if (pointDown) {
          //  let ud=paintco.object.userData;
          //  if (ud.scriptPaint) ud.scriptPaint(paintco);
          //}
          //onsole.log(paintco);
        }
        return;
      }
      
      let pp=pointPlane;
      if (mode==1) {
        select(np);
        if (np) { //---show mouseplane
          let pp=pointPlane;
          if (!pp) {
            const m=new THREE.Mesh(
              new THREE.PlaneGeometry(0.75,0.75),
              new THREE.MeshBasicMaterial({color:new THREE.Color(100,100,100),opacity:0.05,
                transparent:true,depthTest:false,depthWrite:false
                //,side:THREE.DoubleSide
              }));
            scene.add(m);
            pp=pointPlane=m;
          } 
          pp.visible=true;
          pp.position.copy(np.position);
          //e.preventDefault();
          controls.enabled=false;
        }
      } else {
        if (pp&&pp.visible) pp.visible=false;
        setNearestPoint(np);
        controls.enabled=!paint;
      }
      //...
    }
    //
    window.addEventListener('resize',onWindowResize);
    const canv=renderer.domElement;
    
    canv.parentElement.addEventListener('pointermove',function(e) {
      //---
      //onsole.log('mousemove');
      point(e.clientX,e.clientY,2,e);
      //...
    }
    );
    
    canv.addEventListener('pointerdown',function(e) {
      //---
      //onsole.log('mousedown');
      pointDown=true;
      point(e.clientX,e.clientY,1,e);
      //...
    }
    );
    
    canv.parentElement.addEventListener('pointerup',function(e) {
      //---
      //onsole.log('mouseup');
      pointDown=false;
      point(e.clientX,e.clientY,0,e);
      //...
    }
    );
    
    
    //---menu
    
    xrUtil.menuXr.ms+=' '+version;
    Menu.init([{s:'&#9776;',noTri:true,fs:1.4,pw:0.05,sub:[
      Menu.mFullscreen
      ]} 
     ,xrUtil.menuXr  
     
     ,{s:'Json',ms:'import/export',doctrl:'Json data',mcfs:0.07,ta:true,jsonCheck:1,wrap:0,tacols:30,tarows:20
      ,setfunc:load,valuef:serialize}
      
      ]
      ,{listen:1});
    
    
    //pointMaterial=new THREE.MeshPhongMaterial({color:0x77dd77,flatShading:true,transparent:true,opacity:0.7});
    
    window.THREE=THREE;
    threeEnv.base=scene;
    threeEnv.scene=scene;
    threeEnv.path='/shooter/';
    threeEnv.coBoSp=1;//computeBoundingSphere
    threeEnv.camera=camera;
    
    
    ph=new THREE.Vector3();
    
    dir=localStorage[lsKey+'dir'];
    if (dir) dir=JSON.parse(dir); else dir={i:0,a:[{fn:''}]};
    //onsole.log(dir);
    let fn=dir.a[dir.i].fn;
    //onsole.log(fn);
    mFn.s=fn;//xrUtil.log(dir.a.length+' files, index='+dir.i+'.');
    mDirUpdate();
    let ls=localStorage[lsFnKey(fn)];
    if (ls) load(ls);
    else {
      let g=new THREE.BoxGeometry(0.01,0.01,0.01),
      mesh=new THREE.Mesh(g,matPoint0);
      mesh.position.set(0,1,0);
      scene.add(mesh);points.push(mesh);
    
      mesh=new THREE.Mesh(g,matPoint0);
      mesh.position.set(0.05,1.05,0.05);
      scene.add(mesh);points.push(mesh);
    
      mesh=new THREE.Mesh(g,matPoint0);
      mesh.position.set(0.1,1.05,0.05);
      scene.add(mesh);points.push(mesh);
    }
    
    clock=new THREE.Clock();
    
    
    if (0)
    Conet.download({fn:'/shooter/objs/templar/o5.txt',base:points[3],f:function(v) {
      //---
      var o=Pd5.load(v);
      o.scale=1;
      Pd5.animStart(o,'stand2');
      threeEnv.base=this.base;
      threeAddObj(o,0,0,0,0.5);
      o.calcVertNorms=1;
      //...
    }
    });
    
    
    
    //...
  }
  function onWindowResize() {
    //---
    camera.aspect=window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth,window.innerHeight);
    //...
  }
  function animate() {
    renderer.setAnimationLoop(render);
  }
  function updateMesh() {
    //---
    if (mesh) scene.remove(mesh);
    
    let ge=new THREE.BufferGeometry();
    let a=[];
    for (let p of points) {
      p=p.position;a.push(p.x,p.y,p.z);
    }
    //onsole.log(a);
    ge.setAttribute('position',new THREE.BufferAttribute(new Float32Array(a),3));
    
    a=[];
    for (let f of faces) {
      a.push(points.indexOf(f.v0),points.indexOf(f.v1),points.indexOf(f.v2));
    }
    //onsole.log(a);
    ge.setIndex(a);
    
    let m=new THREE.Mesh(ge,matMesh);
    scene.add(m);mesh=m;
    
    //---
    if (line) scene.remove(line);
    a=[];
    for (let l of lines) a.push(l.v0.position,l.v1.position);
    const geometry=new THREE.BufferGeometry().setFromPoints(a);
    const material=new THREE.LineBasicMaterial({color:0xdddddd});
    line=new THREE.LineSegments(geometry,material);
    scene.add(line);
    //...
  }
  function pointPd5(mesh) {
    //---
    let p=mesh.userData.op;
    if (p.pd5) 
    Conet.download({fn:p.pd5.fn,ps:p.pd5,base:mesh,f:function(v) {
      //---
      var o=Pd5.load(v);
      o.scale=1;
      Pd5.animStart(o,'stand2');
      threeEnv.base=this.base;
      threeAddObj(o,0,0,0,0.5);
      let ps=this.ps;
      if (ps.ay) o.ay=ps.ay;
      //o.calcVertNorms=1;
      mesh.userData.o5=o;
      //onsole.log(p);
      //...
    }
    });
    //console.log(p);
    //...
  }
  function pointLight(mesh) {
    //---
    let ps=mesh.userData.op.light;
    let l=new THREE.PointLight(ps.color?'#'+ps.color:0xffffff,ps.intensity?parseFloat(ps.intensity):1);//l.position.set(-0.5*f,3*f,1*f);
    l.castShadow=true;
    l.shadow.camera.near=0.01;
    l.shadow.camera.far=100;
    l.shadow.mapSize.width=1024;//2048;
    l.shadow.mapSize.height=1024;
    mesh.userData.light=l;
    mesh.add(l);
    //...
  }
  window.w3ditScriptInit=function(initf) {
    //---
    let script=document.currentScript;
    let a=Object.values(scripts);
    for (let sc of a) {
      if (sc.script===script) {
        //onsole.log('script found.');
        sc.initf=initf;
        scriptInit(sc);
        return;
      }
    }
    //onsole.log(fn);
    //onsole.error('Script not found.');
    //...
  }
  function scriptInit(sc) {
    //--- should be invoked everytime a point.script could have been changed
    for (let h of sc.waitingForInit) sc.initf(h);//{mesh:mesh,xrUtil:xrUtil});
    sc.waitingForInit.length=0;
    //...
  }
  function pointScript(mesh,p) {
    //---
    let fn=p.script;
    let scr=scripts[fn];
    if (!scr) {
      scr={waitingForInit:[]};
      scripts[fn]=scr;
      var script=document.createElement('script');
      scr.script=script;
    script.onerror=function() {
      //---
      xrUtil.log('Script error:');
      xrUtil.log(fn);
      //...
    }
    script.onload=function() {
      //---
      xrUtil.log('Script loaded:');
      xrUtil.log(fn);
      //...
    }
      script.src=fn;
      document.head.appendChild(script);
    } else xrUtil.log('Re-applying loaded scripts not yet implemented.');
    scr.waitingForInit.push({mesh:mesh,xrUtil:xrUtil,ps:p});
    //...
  }
  function load(v) {
    //---reset
    for (let p of points) scene.remove(p);
    points.length=0;
    faces.length=0;
    lines.length=0;
    
    //---load
    try {
    let h=JSON.parse(v);
    if (h.pt) controls.target.set(h.pt.x,h.pt.y,h.pt.z);
    if (h.pc) camera.position.set(h.pc.x,h.pc.y,h.pc.z);
    
    let g=new THREE.BoxGeometry(0.01,0.01,0.01);
    for (let p of h.points) {
      let mesh=new THREE.Mesh(g,matPoint0);
      mesh.position.set(p.x,p.y,p.z);
      scene.add(mesh);points.push(mesh);
      mesh.userData.op=p;
      pointPd5(mesh);
      if (p.light) pointLight(mesh);
      if (p.script) pointScript(mesh,p);
    
    /*  
      if (p.pd5) 
    Conet.download({fn:p.pd5.fn,ps:p.pd5,base:mesh,f:function(v) {
      //---
      var o=Pd5.load(v);
      o.scale=1;
      Pd5.animStart(o,'stand2');
      threeEnv.base=this.base;
      threeAddObj(o,0,0,0,0.5);
      let ps=this.ps;
      if (ps.ay) o.ay=ps.ay;
      o.calcVertNorms=1;
      //...
    }
    });
    */
    
    }
    
    if (h.faces) {
      for (let f of h.faces) {
        f.v0=points[f.v0];f.v1=points[f.v1];f.v2=points[f.v2];
        faces.push(f);
      }
    }
    
    if (h.lines) {
      for (let l of h.lines) {
        let v0=points[l.v0],v1=points[l.v1];
        lines.push({v0:v0,v1:v1,ol:l});
      }
    }
    
    updateMesh();
    
    sceneh=Conet.hcopy(h,undefined,undefined,{points:1,faces:1,lines:1});;
    controls.update();
    } catch (e) { console.error(e); }
    //onsole.log(v);
    //...
  }
  let wasSelecting=undefined;
  function render() {
    //---
    const dt=clock.getDelta()*1000;
    
    let i0=xrUtil.renderHud();
    
    if (xrUtil.isSession&&!i0) {
      let ctrl1=xrUtil.ctrl1;
    
      ph.setFromMatrixPosition(cursor1.matrixWorld);
    
      let np=undefined;
      if (ctrl1.userData.isSelecting&&wasSelecting) 
        np=wasSelecting;
      else {
        let nd=0.005;//Number.MAX_VALUE;
        for (let p of points) {
          let d=p.position.distanceToSquared(ph);
          if (d<nd) { nd=d;np=p; }
        }
        setNearestPoint(np);
        //if (np) { xrUtil.log('nd='+nd);console.log('nd='+nd); }
      }
    
      if (np&&ctrl1.userData.isSelecting) {
        if (wasSelecting!==np) {
          wasSelecting=np;
          select(np);
        }
        if (np.userData.selected) {
          np.position.copy(ph);
          updateMesh();
        }
      } else wasSelecting=undefined;
      
      if ((!np)&&ctrl1.userData.isSelecting) {
        if (sels.length>0) select(undefined);
      }
      
      let gp1=xrUtil.gp1,gp0=xrUtil.gp0,md=0.1;
      if (gp1&&gp0) {
        let dx=gp0.axes[2],dy=gp0.axes[3],dz=gp1.axes[3];
        dx=Math.max(0,Math.abs(dx)-md)/(1-md)*((dx<0)?-1:1);
        dy=Math.max(0,Math.abs(dy)-md)/(1-md)*((dy<0)?-1:1);
        dz=Math.max(0,Math.abs(dz)-md)/(1-md)*((dz<0)?-1:1);
        if ((dx!=0)||(dy!=0)||(dz!=0)) {
          //xrUtil.log(dx+' '+dy+' '+dz+' dt '+dt);
          let f=0.001*dt;
          dx*=f;dy*=f;dz*=f;
          if (isNaN(dx)||(Math.abs(dx)>0.1)) dx=0;
          if (isNaN(dy)||(Math.abs(dy)>0.1)) dy=0;
          if (isNaN(dz)||(Math.abs(dz)>0.1)) dz=0;
          for (let p of points) {
            p=p.position;
            p.x+=dx;
            p.y+=dy;
            p.z+=dz;
          }
          updateMesh();
        }
      }
    }
    
    //xrUtil.renderHud();
    
    if (pointPlane) pointPlane.quaternion.copy(camera.quaternion);
    
    //---lines
    if (lines.length>0) {
      for (let p of points) { p=p.userData;p.dx=0;p.dy=0;p.dz=0; }
      for (let line of lines) {
        if (line.ol.l===undefined) continue;
        let v0=line.v0,v1=line.v1,p0=v0.position,p1=v1.position;
        let dx=p1.x-p0.x,dy=p1.y-p0.y,dz=p1.z-p0.z,l=Math.max(0.000001,Math.sqrt(dx*dx+dy*dy+dz*dz));
        dx/=l;dy/=l;dz/=l;
        let dl=(line.ol.l-l)/4;
        v0=v0.userData;v1=v1.userData;
        v1.dx+=dx*dl;v1.dy+=dy*dl;v1.dz+=dz*dl;
        v0.dx-=dx*dl;v0.dy-=dy*dl;v0.dz-=dz*dl;
      }
      for (let p of points) {
        let u=p.userData;p=p.position;
        var d=u.dx*u.dx+u.dy*u.dy+u.dz*u.dz;
        var md=100;
        if (d>md) { 
          d=Math.sqrt(d);md=Math.sqrt(md);
          u.dx*=md/d;u.dy*=md/d;u.dz*=md/d;
        }
        p.x+=u.dx;
        p.y+=u.dy;
        p.z+=u.dz;
      }  
    }
    
    threeRender(dt);
    
    renderer.render(scene,camera);
    //...
  }
  function select(p) {
    //---
    let l=sels.length;
    
    if (p===undefined) {
      for (let p of sels) {
        p.userData.selected=0;
        p.material=matPoint0;
      }
      sels.length=0;
    } else {
      let i=sels.indexOf(p);
      if (i!=-1) {
        //sels.splice(i,1);
        //p.userData.selected=0;
        //p.material=matPoint0;
      } else {
        sels.push(p);
        p.material=matPointSel;
        p.userData.selected=1;
        let l=p.userData.light;
        if (l) {
          //onsole.log(l);
          inpLightColor.s=l.color.getHexString();
          inpLightIntensity.s=l.intensity+'';
        }
      }
    }
    
    if (l!=sels.length)
      xrUtil.log('Selected:'+sels.length);
    //...
  }
  function serialize() {
    //---
    
    if (!xrUtil.isSession) {
      let pt=controls.target,pc=camera.position;
      sceneh.pt={x:Conet.f4(pt.x),y:Conet.f4(pt.y),z:Conet.f4(pt.z)};
      sceneh.pc={x:Conet.f4(pc.x),y:Conet.f4(pc.y),z:Conet.f4(pc.z)};
    }
    
    let s='{\n';
    
    for (let k of Object.keys(sceneh)) {
      s+='"'+k+'":'+JSON.stringify(sceneh[k])+',\n';
    }
    
    s+='"points":[\n';
    let first=true;
    for (let p of points) {
      let op=p.userData.op||{};
      p=p.position;
      op.x=Conet.f4(p.x);
      op.y=Conet.f4(p.y);
      op.z=Conet.f4(p.z);
      s+=(first?' ':',')+JSON.stringify(op)+'\n';
      first=false;
    }
    s+='],\n';
    
    s+='"faces":[\n';
    first=true;
    for (let f of faces) {
      let v0=points.indexOf(f.v0),v1=points.indexOf(f.v1),v2=points.indexOf(f.v2);
      if ((v0==-1)||(v1==-1)||(v2==-1)) continue;
      s+=(first?' ':',')+JSON.stringify({v0:v0,v1:v1,v2:v2})+'\n';
      first=false;
    }
    s+='],\n';
    
    s+='"lines":[\n';
    first=true;
    for (let l of lines) {
      let v0=points.indexOf(l.v0),v1=points.indexOf(l.v1);
      if ((v0==-1)||(v1==-1)) continue;
      l=l.ol;l.v0=v0;l.v1=v1;
      s+=(first?' ':',')+JSON.stringify(l)+'\n';
      first=false;
    }
    s+=']\n';
    
    
    s+='}';
    return s;
    //...
  }
  function setNearestPoint(p) {
    //---
    let op=nearestPoint;
    if (p!==op) {
      if (op) op.material=(op.userData.selected?matPointSel:matPoint0);
      nearestPoint=p;  
      if (p) {
        p.material=matPoint1;
        //xrUtil.log('nearest point '+points.indexOf(p));
      }
    }
    //onsole.log('nearestPoint set '+nearestPoint);
    //...
  }
  
  init();
  animate();
  //...
}
)();
</script>
</body>
</html>
<script>
//fr o,29
//fr o,29,12
//fr o,29,12,91
//fr o,29,12,95
//fr o,29,12,98
//fr o,29,12,143
//fr o,29,12,167
//fr o,29,12,171
//fr o,29,15
//fr o,29,20,8
//fr o,29,20,9
//fr o,29,23
//fr p,24,134
