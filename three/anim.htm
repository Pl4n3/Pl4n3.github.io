<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style>
body { color:#000;background-color:#aaa;margin:0px;overflow:hidden;font-family:Sans-serif; }
</style>
<script src="https://threejs.org/build/three.min.js"></script>
<script src="https://threejs.org/examples/js/vr/WebVR.js"></script>
<script src="https://threejs.org/examples/js/libs/stats.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script src="/conet.js"></script>
<script src="/sound.js"></script>
<script src="../vecmath.js"></script>
<script src="../canvas/pd5.js"></script>
<script src="threePd5.js"></script>
</head><body>
<div id="container"></div>
<script>
function anim() {
  var scene,stats,views=[],oh={},ot=Date.now(),scra,scri=0,scrt=0,loopAfterLoaded,
      base,debug='',version='1.317 ',//FOLDORUPDATEVERSION
      m0=new THREE.MeshPhongMaterial( { color:0x666666,flatShading:true } ),
      m1=new THREE.MeshPhongMaterial({color:0x77dd77,flatShading:true,
      transparent:true,opacity:0.5}),keys=[],vrkeys=true,url,click=undefined,
      raycaster=new THREE.Raycaster(),anchors={},canch,aa={c0:new THREE.Vector3(),
      c1:new THREE.Vector3(),t0:new THREE.Vector3(),t1:new THREE.Vector3()},taa=0,
      tam=500,eclick,game={},PI=Math.PI,skipClick=false;
  function updateHud(view) {
    var hud=view.hud,c=hud.c,ct=c.getContext('2d'),w=c.width,h=c.height;
    ct.clearRect(0,0,w,h);
    ct.fillStyle='rgba(150,150,150,0.3)';ct.fillRect(0,0,w,h);
    ct.fillStyle='#000';ct.font='10px sans-serif';ct.textBaseline='top';
    if (view.hudRender) 
      view.hudRender(ct);
    else 
      ct.fillText('v.'+version+debug,2,2);
    hud.t.needsUpdate=true;
    //...
  }
  function addView(v) {
    if (0) if (v.vr) 
    WEBVR.checkAvailability().catch( function( message ) {
      document.body.appendChild( WEBVR.getMessageContainer( message ) );
    }
    );
    var camera,controls,renderer;
    renderer = new THREE.WebGLRenderer({antialias:true});
    renderer.setClearColor(v.bgcol||0x888888);
    renderer.shadowMap.enabled=true;
    renderer.shadowMap.type=THREE.BasicShadowMap;
    //				renderer.shadowMapEnabled=true;
    //				renderer.shadowMapType=THREE.PCFShadowMap;//PCFShadowMap;
    
    //renderer.setPixelRatio(window.devicePixelRatio);
    //renderer.setSize( window.innerWidth, window.innerHeight );
    
    
    var container = document.getElementById('container'),ms=[];
    var c=renderer.domElement,s=c.style;//s.textAlign='center';
    if (v.bw) {
      s.borderStyle='solid';s.borderWidth=v.bw;
    }
    container.appendChild(c);
    
    camera=new THREE.PerspectiveCamera(v.fov||60,window.innerWidth/window.innerHeight,0.1,100);//1,1000
    //camera.position.z=v.camz||500;
    //camera.position.x=v.camx||0;
    if (v.cam&&!v.vr) camera.position.copy(v.cam);
    //camera.position.set(v.camx||0,v.camy||0,v.camz||500);
    //camera.rotation.y=0.5;
    camera.rotation.order='YXZ';
    scene.add(camera);
    
    if (!v.vr) {
    controls=new THREE.OrbitControls(camera,renderer.domElement);
    controls.enableDamping=true;
    controls.dampingFactor=0.25;
    if (v.autoRotate) controls.autoRotate=true;
    controls.enableZoom=true;
    controls.enablePan=true;
    controls.maxDistance=600;
    controls.rotateSpeed=0.4;
    controls.enableKeys=false;
    controls.zoomSpeed=0.5;
    if (v.target) controls.target.copy(v.target);
    }
    //controls.rotateLeft(0.5);
    v.renderer=renderer;v.camera=camera;v.controls=controls;
    
    if (!v.bg) {
      var c=document.createElement('div'),s=c.style;
      s.backgroundColor='rgba(255,255,255,0.8)';s.zIndex=100;s.position='absolute';s.textAlign='center';s.padding='2px';
      c.innerHTML='Hello World.';s.fontFamily='Arial';s.borderStyle='solid';s.display='none';
      v.textc=c;
      container.appendChild(c);
    }
    
    if (v.vr) {
      renderer.vr.enabled=true;
      if (0)
    WEBVR.getVRDisplay( function ( display ) {
      renderer.vr.setDevice( display );
      document.body.appendChild(WEBVR.getButton(display,renderer.domElement));
    }
      );
    
      var c=document.createElement('canvas'),w=v.hudres||128,
          h=w;c.width=w;c.height=h;
      var t=new THREE.Texture(c);v.hud={c:c,t:t};
      
      //var ct=c.getContext('2d');ct.fillStyle='rgba(150,150,150,0.3)';ct.fillRect(0,0,w,h);
      //ct.fillStyle='#000';ct.font='10px sans-serif';ct.textBaseline='top';ct.fillText('v.'+version,2,2);
      //t.needsUpdate=true;
      updateHud(v);
    
      var ar=v.hudar||0.11,g=new THREE.PlaneGeometry(0.1,0.1*ar);
      g.faceVertexUvs=[[[{x:0,y:1},{x:0,y:1-ar},{x:1,y:1}],[{x:0,y:1-ar},{x:1,y:1-ar},{x:1,y:1}]]];
      var crosshair = new THREE.Mesh(g,
        new THREE.MeshBasicMaterial({color:0xffffff,
          map:t,
          opacity:1,transparent:true}));
      //crosshair.position.z=-0.3;
      crosshair.position.set(v.hudx||0.05,v.hudy||-0.05,-0.3);
      camera.add(crosshair);
    
    window.addEventListener('vrdisplaypointerrestricted',function() {
      var pointerLockElement=renderer.domElement;
      if (pointerLockElement&&typeof(pointerLockElement.requestPointerLock)==='function' ) {
        pointerLockElement.requestPointerLock();
      }
    }
    ,false);
    window.addEventListener('vrdisplaypointerunrestricted',function() {
      var currentPointerLockElement=document.pointerLockElement;
      var expectedPointerLockElement=renderer.domElement;
      if (currentPointerLockElement&&currentPointerLockElement===expectedPointerLockElement&&typeof(document.exitPointerLock)==='function' ) {
        document.exitPointerLock();
      }
    }
    ,false);
    
      
      document.body.appendChild( WEBVR.createButton( renderer ) );
    }
    
    
    views.push(v);
    
    if (v.bg) {
      threeEnv.camera=camera;
      renderer.animate(animate);
    }
  }
  function box(x,y,z,w,h,b,m) {
    mesh=new THREE.Mesh(new THREE.BoxBufferGeometry(w,h,b),m);
    mesh.position.set(x,y,z);
    mesh.updateMatrix();
    mesh.matrixAutoUpdate=false;
    mesh.castShadow=true;
    mesh.receiveShadow=true;
    base.add(mesh);
    return mesh;
  }
  function resize() {
    var gw=window.innerWidth,gh=window.innerHeight,gmin=Math.min(gw,gh),w,h,
        maxa=1.5,gmax=Math.max(gw,gh),ah=1.75//1.75
        ,f=Math.min(ah,gmax/gmin),minf=0.5;//0.5
    
    //f=(1-(ah-f));
    //gmin*=minf+f*(1-minf);
    if (views.length==0) return;
    
    if (views.length==3) {
      var v0=views[0],mih,mah;//ah=gw/gh;
      //viewText(2,
      if (gw>gh) { mih=1.5;mah=2; } else { mih=1.5,mah=1.8; }
      var f0=Math.max(mih,Math.min(mah,gmax/gmin));f0=(f0-mih)/(mah-mih);
      //viewText(2,''+f0);
      var z=0.80*(1-f0)-0.30;//((ah>2)||(ah<0.5))?-20:50;
      v0.controls.target.z=z;//50*(1-f);
      v0.camera.position.z=z;//50*(1-f);
    }
    
    f=(1-(ah-f));
    gmin*=minf+f*(1-minf);
    
    
    for (var i=views.length-1;i>=0;i--) {
      var v=views[i],camera=v.camera,renderer=v.renderer,
          s=renderer.domElement.style;
      if (v.bg) {
        w=gw*v.w,h=gh*v.h;
        if (views.length==3) {
          if (w/h<1) {
            s.top=(h-w)*1+'px';//0.8
            h=w;
          } else s.top='0px';
          if (w/h>maxa) {
            s.left=(w-maxa*h)+'px';
            w=maxa*h;
          } else s.left='0px';
        }
      } else {
        w=gmin*v.w,h=gmin*v.h
      }
      camera.aspect=w/h;//window.innerWidth/window.innerHeight;
      if (v.fovportrait) {
        var f=h/w;
        camera.fov=(v.fov||60)+(f>1?
          //(f-1)*30
          (1-1/f)*75
          :0);
      }
      camera.updateProjectionMatrix();
      renderer.setSize(w,h);//window.innerWidth,window.innerHeight);
      v.wh=w;v.hh=h;
      //var s=renderer.domElement.style;
      s.position='absolute';
      if (!v.bg) {
        var x0=gmin*v.x,y0=gmin*v.y;v.xh=x0;v.yh=y0;
        s.left=x0+'px';s.top=y0+'px';
        s=v.textc.style;
        s.fontSize=(gmin*0.06)+'px';;
        var r=v.textc.getBoundingClientRect();
        //onsole.log(r);
        s.left=(x0+(w-r.width)/2)+'px';
        s.top=(y0+h-r.height)+'px';
      }
    }
  }
  function setTargetCampos(tx,ty,tz,cx,cy,cz) {
    var v=views[0];
    aa.c0.copy(v.camera.position);
    aa.t0.copy(v.controls.target);
    aa.c1.x=cx;aa.c1.y=cy;aa.c1.z=cz;
    aa.t1.x=tx;aa.t1.y=ty;aa.t1.z=tz;
    
    //aa.c1.x=a.cx;aa.c1.y=a.cy;aa.c1.z=a.cz;
    //aa.t1.x=a.tx;aa.t1.y=a.ty;aa.t1.z=a.tz;
    taa=tam;
    //v.camera.position.set(a.cx,a.cy,a.cz);
    //v.controls.target.set(a.tx,a.ty,a.tz);
    
    //...
  }
  function viewAnchor(a) {
    //
    var v=views[0];
    if (canch) {
      if (canch.next) {
        for (var i=0;i<canch.next.length;i++) {
          base.remove(anchors[canch.next[i]].mesh);
        }
      }
    }
    if (a.campos!==undefined) {
      var ca=a.campos,ta=a.target;
      setTargetCampos(ta[0],ta[1],ta[2],ca[0],ca[1],ca[2]);
      /*
      aa.c0.copy(v.camera.position);
      aa.t0.copy(v.controls.target);
      var ah=a.campos;
      aa.c1.x=ah[0];aa.c1.y=ah[1];aa.c1.z=ah[2];
      ah=a.target;
      aa.t1.x=ah[0];aa.t1.y=ah[1];aa.t1.z=ah[2];
      
      //aa.c1.x=a.cx;aa.c1.y=a.cy;aa.c1.z=a.cz;
      //aa.t1.x=a.tx;aa.t1.y=a.ty;aa.t1.z=a.tz;
      taa=tam;
      //v.camera.position.set(a.cx,a.cy,a.cz);
      //v.controls.target.set(a.tx,a.ty,a.tz);
      */
    }
    if (a.next) {
      for (var i=0;i<a.next.length;i++) {
        base.add(anchors[a.next[i]].mesh);
      }
    }
    canch=a;
    //console.log(a);
    //base.remove(a.mesh);
    //...
  }
  function animate() {
    //requestAnimationFrame(animate);
    //controls.update(); // required if controls.enableDamping = true, or if controls.autoRotate = true
    stats.update();
    //if (threeEnv.os.length>0) threeEnv.os[0].meshes[0].tmesh.rotation.y+=0.01;
    var dt=threeRender();
    
    if (taa>0) {
      taa=Math.max(0,taa-dt);
      var f0=taa/tam,f1=1-f0,v=views[0];
      v.camera.position.set(aa.c0.x*f0+aa.c1.x*f1,aa.c0.y*f0+aa.c1.y*f1,aa.c0.z*f0+aa.c1.z*f1);
      v.controls.target.set(aa.t0.x*f0+aa.t1.x*f1,aa.t0.y*f0+aa.t1.y*f1,aa.t0.z*f0+aa.t1.z*f1); 
    }
    
    if (click) {
      raycaster.setFromCamera(click,views[0].camera);
      var intersects=raycaster.intersectObjects(base.children);
      //onsole.log('animate intersects.len='+intersects.length);
      click=undefined;
      if (intersects.length>0) {
        ////onet.log('render intersects='+intersects.length);
        //var os=[];
        //for (var j=0;j<intersects.length;j++) {
        //  var o=intersects[j].object;//,found=false;
        //  //for (var i=os.length-1;i>=0;i--) if (os[i]=
        //  if (os.indexOf(o)) os.push(o);
        //}
        ////onet.log('os.len='+os.length);
        for (var j=0;j<(
         ////mmultisel.checked?
         intersects.length//:
         //1
         );j++) {
         var o=intersects[j].object;
        //for (var j=0;j<os.length;j++) {
         //var o=os[j]; 
         var marko=o.userData.marko;
         //console.log(o.userData.o);
         if (marko) {
           //var v=views[0];
           //v.camera.position.set(-0.1542,-1.5406,0.8371);
           //v.controls.target.set(-0.1654,-1.5466,0.6055);
           //v.camera.position.set(0.2670,-0.4389,1.8301);
           //v.controls.target.set(0,-1.2,0);
           //console.log(v.controls);
           viewAnchor(marko);
           break;
         }
         if (o.userData.onclick) { o.userData.onclick(eclick);break; }//,o);
         o=o.userData.o;
         //onsole.log(o);
         if (!o) continue;
         if (o.ps.onclick) { o.ps.onclick(eclick);break; }
    //     for (var i=bricks.length-1;i>=0;i--) {
    //      var b=bricks[i];
    //      if (b.mesh!=o) continue;
    //      select(b,mmultisel.checked);
    //      //brickPos(sel,0);
    //      //sel=b;Menu.ms(mtype,sel.t);
    //      break;
    //     }
        }
      }
    }
    
    if (game.calc) game.calc(dt);
    
    for (var i=views.length-1;i>=0;i--) {
      var view=views[i];
      if (view.controls) view.controls.update();
      view.renderer.render(scene,view.camera);
    }
  }
  function oonload(v) {
    var ps=this;//console.log(this);
    var o=Pd5.load(v);
    //console.log(o);//Object.assign({},o));
    Pd5.animStart(o,o.animh[ps.animIdle||ps.anim]);
    //o.scale*=0.7;//o.x=-0.1;o.y=-0.7;o.z=-0.5;
    //o.scale*=1;o.x=-0.1;o.y=-0.5;o.z=-0.3;
    Pd5.calc(o,0,0.0,0,1,{x:0,y:0,z:0},0,0,true);
    
    ps.o=o;
    o.ps=ps;//o.o={pos:ps.pos,roty:ps.roty||0};
    
    threeAddObj(o,0,0,0,ps.scale);
    var m=o.meshes[0].tmesh;
    m.userData.o=o;
    //o.o={pos:ps.pos,roty:ps.roty||0};
    //var m=o.meshes[0].tmesh;
    //m.position.copy(ps.pos);//set(-30,-140,-80);
    if (ps.ohkey) oh[ps.ohkey]=o;
    //if (ps.roty!==undefined) m.rotation.y=ps.roty;
    
    if (ps.bb) {
      var oyw=1;
      o.bb=threeBillboardAdd({x:0,y:0,z:0,ar:0.1/oyw,s:0.01*(1+(oyw-1)*2),transparent:false});//,cw:o.bbcw});
      o.bb.o=o.ps;
      
      //console.log(o);
      //o.ps.health=3;o.ps.mhealth=5;
      //o.bb.update=1;
    }
    
    
    
    //console.log(o);
    var ac=0,startAnchor=undefined;
    for (var i=0;i<o.verts.length;i++) {
      var v=o.verts[i],w=0.15;
      if (!v.marko) continue;
      if (v.marko.t!='anchor') continue;
      
      var mesh=new THREE.Mesh(new THREE.BoxGeometry(w,w,w),m1);var b=mesh;
      mesh.position.set(v.p0.x*ps.scale+ps.pos.x,v.p0.y*ps.scale+ps.pos.y,v.p0.z*ps.scale+ps.pos.z);
      mesh.updateMatrix();
      mesh.matrixAutoUpdate=false;
      
      //var b=box(v.p0.x*ps.scale+ps.pos.x,v.p0.y*ps.scale+ps.pos.y,v.p0.z*ps.scale+ps.pos.z,w,w,w,m1);
      //b.castShadow=false;
      v.marko.mesh=b;
      b.userData.marko=v.marko;
      anchors[v.marko.k]=v.marko;
      if (v.marko.start) startAnchor=v.marko;
      ac++;
      //console.log(v);
    }
    
    if (startAnchor) viewAnchor(startAnchor);
    //v.camera.position.set(0.2670,-0.4389,1.8301);
    //v.controls.target.set(0,-1.2,0);
    //threeRender();
    //...
    loopAfterLoaded--;
    if (loopAfterLoaded==0) if (scra) calcScra();
  }
  function calcScra() {
    var t=Date.now(),dt=t-ot;ot=t;
    //onsole.log(dt);
    scrt=Math.min(2500,scrt+dt);
    while (true) {
      var scr=scra[scri];
      if (scrt<scr.t) break;
      scr.f();
      scrt-=scr.t;
      scri=(scri+1)%scra.length;
    }
    
    //console.log('anim.calc '+(oh.templar?'1':'0'));
    //var ot=oh.templar,ob=oh.bot;
    //if (ot&&ob) {
    //  var a0=ot.animh.disagree;
    //  if (ot.anim===a0) {
    //    Pd5.animStart(ot,ot.animh.speak);
    //    Pd5.animStart(ob,ob.animh.disagree);
    //  } else {
    //    Pd5.animStart(ot,a0);
    //    Pd5.animStart(ob,ob.animh.speak);
    //  }
    //  //Pd5.animStart(o,o.anim===a0?o.animh.speak:a0);
    //}
    setTimeout(calcScra,20);
  }
  function viewText(i,sh) {
    var v=views[i],c=v.textc,s=c.style;
    if (sh.length==0) { s.display='none';return; }
    c.innerHTML=sh;s.display='';
    var r=c.getBoundingClientRect();//,s=v.textc.style;
    s.left=(v.xh+(v.wh-r.width)/2)+'px';
    s.top=(v.yh+v.hh-r.height)+'px';
    //...
  }
  function anim(os,as) {
    var o=oh[os];Pd5.animStart(o,o.animh[as]);
    //...
  }
  function loadObjsThenLoop(a) {
    loopAfterLoaded=a.length;
    for (var i=0;i<a.length;i++) {
      var o=a[i];o.f=oonload;
      Conet.download(o);
    }
    //...
  }
  function keyDown(e) {
    var kc=e.keyCode;
    keys[kc]=true;
    console.log(kc);
    if (views[0].vr) {
      debug=' kc='+kc;updateHud(views[0]);
    }
    
    if ((kc>=48)&&(kc<=57)) {
    var c=kc-48;
    var vh;
    switch (c) {
    case 0:vh=0;break;
    case 1:vh=0.01;break;
    case 2:vh=0.1;break;
    case 3:vh=0.2;break;
    case 4:vh=0.5;break;
    case 5:vh=1;break;
    case 6:vh=2;break;
    case 7:vh=5;break;
    case 8:vh=10;break;
    case 9:vh=20;break;
    }
    threeEnv.dtscale=vh;//gamespeed=vh;
    }
    
    if (kc==32) {
      var v=views[0];
      console.log('keyDown campos,conroltarget');
      console.log(v.camera.position);
      console.log(v.controls.target);
    }
    
    
    //console.log('kc='+kc);//...
    if (vrkeys) {
    var camera=views[0].camera;
    if (kc==38) camera.rotation.x+=0.1;
    if (kc==40) camera.rotation.x-=0.1;
    if (kc==37) camera.rotation.y+=0.1;
    if (kc==39) camera.rotation.y-=0.1;
    //console.log(camera.quaternion);
    var v=new THREE.Vector3();
    if ((kc==65)) v.x+=0.1;
    else if ((kc==68)) v.x-=0.1;
    else if ((kc==87)) v.z+=0.1;
    else if ((kc==83)) v.z-=0.1;
    v.applyQuaternion(camera.quaternion);
    base.position.add(v);
    //onsole.log(base.position);
    base.updateMatrix();
    }
    //...
  }
  function keyUp(e) {
    var kc=e.keyCode;
    keys[kc]=false;
  }
  function rani(n) {
    return Math.floor(Math.random()*n);
  }
  function onClick(e) {
    if (skipClick) {
      skipClick=false;
      return;
    }
    //onsole.log('anim.onClick');
    eclick=e;
    //onsole.log(e);
    //if (e.detail<2) return;
    click=new THREE.Vector2(2*e.clientX/window.innerWidth-1,-2*e.clientY/window.innerHeight+1);
    //onsole.log(click);
  }
  function dAng(a0,a1) {
    var da=a0-a1;
    while (da>PI) da-=PI*2;
    while (da<-PI) da+=PI*2;
    return da;
  }
  function pointLight(ps) {
    //--
    var dist=ps.dist,l=new THREE.PointLight(ps.col,ps.int,dist);l.position.set(ps.x,ps.y,ps.z);
    l.castShadow=true;
    l.shadow.camera.near=0.1;//100;
    l.shadow.camera.far=dist;//1000;
    l.shadow.mapSize.width=1024;//2048;
    l.shadow.mapSize.height=1024;
    base.add(l);
    //...
  }
  function init() {
    
    scene = new THREE.Scene();
    
    base=new THREE.Group();scene.add(base);
    
    //box(40,-80,0,-50,-100,-50,m1);
    //box(40+60,-80,30,-50,-50,-50,m1);
    //box(40,-80,60,-50,-100,-50,m1);
    //box(0,-150,0,600,20,600,m0).castShadow=false;
    
    //var l=new THREE.AmbientLight(0x999999),f=0.03;base.add(l);//0x555555
    //l=new THREE.PointLight(0xffffaa,1,0);l.position.set(-100*f,200*f,100*f);base.add(l);
    ////pointLight({x:3,y:3,z:3,col:0xffffff,dist:10,int:2});
    //var l=new THREE.PointLight(0xffffff,1,0);l.position.set(100*f,100*f,100*f);
    //l.castShadow=true;
    //l.shadow.camera.near=0.1;//100;
    //l.shadow.camera.far=10;//1000;
    //l.shadow.mapSize.width=1024;//2048;
    //l.shadow.mapSize.height=1024;
    //base.add(l);
    //l=new THREE.PointLight(0xaaffff,1,0);l.position.set(3,-6,-3);base.add(l);
    
    stats=new Stats();var c=stats.domElement,s=c.style;
    s.position='absolute';s.top='0px';s.zIndex=100;s.opacity=0.3;
    container.appendChild(c);
    
    window.addEventListener('resize',resize,false);
    window.addEventListener('keydown',keyDown);
    window.addEventListener('keyup',keyUp);
    window.addEventListener('click',onClick,false);
    
    //| following to avoid click event after viewchange (long mousdown/touch)
    var tapstart=0;
    window.addEventListener('mousedown',function(e) {
      //onsole.log('anim.mousedown');
      tapstart=Date.now();
    }
    ,false);
    window.addEventListener('mouseup',function(e) {
      //onsole.log('anim.mouseup '+(Date.now()-tapstart));
      if (Date.now()-tapstart>300) skipClick=true;
    }
    ,false);
    //| ---
    
    
    // animate();
    
    //threeEnv.renderer=renderer;
    if (0)
    Pd5.animText=function(o,s) {
      //...
    }
    threeEnv.base=base;//scene;
    threeEnv.scene=scene;
    //threeEnv.camera=views[0].camera;
    threeEnv.path='../shooter/';
    threeEnv.aipos=1;
    //threeEnv.dtscale=0.5;
    
    //var sc=document.createElement('script');
    //sc.src='anim/dialogJavaJavascript.js';
    //document.body.appendChild(sc);
    url=Conet.parseUrl();
    var fn=url.fn
      //||'anim/dialogJavaJavascript.js';
      //||'anim/base.js';
      //||'anim/tiles.js';
      ||'anim/static.js';
    //var fn='anim/base.js';
    
    Conet.download({fn:fn,f:function(v) {
      eval(v);//...
      //(new Function(v))();
    }
    });
    //calc();
    
    var sh='Anim '+version;
    console.log(sh);
    //onet.log(sh);
    
    //...
  }
  init();
}
anim();
</script></body>
</html><script>
//fr o,18
//fr o,18,9,82,2
//fr o,18,14
//fr o,18,25
//fr o,18,26
//fr o,18,26,33
//fr o,18,26,35
//fr o,18,26,44
//fr p,2,140
