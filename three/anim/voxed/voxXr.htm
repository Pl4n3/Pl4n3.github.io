<!DOCTYPE html>
<html lang="en">
<head>
<title>voxXr</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<style>body { color:#000;background-color:#aaa;margin:0px;overflow:hidden;font-family:Sans-serif; }</style>
<script src="/conet.js"></script>
<script src="/menu.js"></script>
<script src="/sound.js"></script>
<script src="/vecmath.js"></script>
<script src="/canvas/pd5.js"></script>
<script src="/three/threePd5.js"></script>
<script src="/three/anim/voxed.js"></script>
</head>
<body>
<script type="module">
import * as THREE from '/three/r124/build/three.module.js';
import { BoxLineGeometry } from '/three/r124/examples/jsm/geometries/BoxLineGeometry.js';
import { OrbitControls } from '/three/r124/examples/jsm/controls/OrbitControls.js';
import { XrUtil } from '/util/gfx/XrUtil.js';
(function() {
  //---
  const clock = new THREE.Clock();
  let container,camera,scene,raycaster,renderer,
      room,INTERSECTED,cursor,voxScale=1,tVoxAdd=0,
      cubes=[],controls,voxMesh,voxMeshAdd,voxVa,voxVh,
      mGreen,mRed,roomMatrix,drawColor=0,hudCount=0,
      fn='/three/anim/voxed/3x3.json',hudMesh;
      //fn='/three/anim/voxed/xr0.json';
  const tempMatrix=new THREE.Matrix4(),vt=new THREE.Vector3(),
      voxMeshPos=new THREE.Vector3(),huds=[],hud={lines:[
      'VoxXr 0.85 '//FOLDORUPDATEVERSION
      ],cursor:{x:0.5,y:0.5,vis:false},buttons:[]},
      lsKey='voxXr0';
  
  init();
  animate();
  
  function log(s) {
    //---
    hud.lines.push(s);
    while (hud.lines.length>4) hud.lines.splice(0,1);
    drawHud();
    //...
  }
  function f4(v) {
    return Math.floor(0.5+v*10000)/10000;//...
  }
  function load(v) {
    //---
    var h=JSON.parse(v);
    delete(h.vw);
    var r=Voxed.load(h);
    drawColor=0;
    //var blocks=r.blocks;//Voxed.toBlocks();
    //Voxed.etV(0,45.66,0,{c:0});
    if (voxMesh) room.remove(voxMesh);
    var m=Voxed.generateMesh();
    var sc=voxScale;
    m.scale.set(sc,sc,sc);
    voxMeshPos.set(0,2,-2);
    m.position.copy(voxMeshPos);//set(0,2,-2);
    room.add(m);voxMesh=m;
    //...
  }
  function loadFn(fn) {
    //---
    if (this&&this.fn) fn=this.fn;
    Conet.download({fn:fn,f:function(v) {
      //---
      load(v);
      log('Loaded '+fn+'.');
      //...
    }
    });
    //...
  }
  function save() {
    //---
    drawMerge();
    const data=Voxed.serialize();
    //Conet.upload({fn:fn,data:data});//,log:Conet.log,logChunk:1});
    localStorage[lsKey]=data;
    
    log('Saved to localStorage '+data.length+' bytes.');
    //...
  }
  function drawHud() {
    //---
    const ct=hud.ct,c=hud.c,w=c.width,h=c.height;
    ct.clearRect(0,0,w,h);
    ct.fillStyle='rgba(0,0,0,0.3)';ct.fillRect(0,0,w,h);
    ct.font='20px sans-serif';//ct.textBaseline='top';
    //ct.fillText('c='+hudCount,2,2);
    const cur=hud.cursor,curx=cur.x*w,cury=cur.y*h;
    ct.textAlign='center';
    ct.textBaseline='middle';
    for (let b of hud.buttons) {
      const bx=b.x*w,by=b.y*h,bw=b.w*w,bh=b.h*h;
      if (b.pressed&&(!cur.down||!cur.vis)) b.pressed=false;
      if (cur.vis&&hudMesh.visible) {
        if ((curx>=bx)&&(cury>=by)&&(curx<=bx+bw)&&(cury<=by+bh)) {
          if (cur.down&&!b.pressed) {
            b.pressed=true;
            b.ondown();
          }
          ct.fillStyle=b.pressed?'rgba(150,150,50,0.5)':'rgba(100,100,100,0.5)';
          ct.fillRect(bx,by,bw,bh);
        }
      } 
      ct.strokeStyle='#aaa';
      ct.strokeRect(bx,by,bw,bh);
      ct.fillStyle='#ddd';
      ct.fillText(b.s,bx+bw/2,by+bh/2);
    }
    ct.textAlign='start';
    ct.textBaseline='top';
    ct.fillStyle='#ddd';
    for (let i=0;i<hud.lines.length;i++) {
      ct.fillText(hud.lines[i],3,3+i*18);
    }
    if (cur.vis) {
      ct.strokeStyle='#fff';
      ct.strokeRect(curx-5,cury-5,10,10);
    }
    hud.t.needsUpdate=true;
    //...
  }
  
  function init() {
    
    //script src="/util/bricks.js">/script>
    
    
    container = document.createElement( 'div' );
    document.body.appendChild( container );
    
    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x505050 );
    
    camera=new THREE.PerspectiveCamera(50,window.innerWidth/window.innerHeight,0.1,100);
    camera.position.set(0,1.6,3);
    scene.add(camera);
    //console.log(camera);
    
    room=new THREE.LineSegments(
      new BoxLineGeometry(6,6,6,10,10,10).translate(0,3,0),
      new THREE.LineBasicMaterial( { color: 0x808080 } )
    );
    room.matrixAutoUpdate=false;
    scene.add(room);
    
    {
    let c=room,l=new THREE.AmbientLight(0x555555),f=3;c.add(l);
    //l=new THREE.PointLight(0xffffff,1,0);l.position.set(-1*f,2*f,1*f);scene.add(l);
    l=new THREE.PointLight(0xffffff,1,0);l.position.set(-0.5*f,3*f,1*f);
    l.castShadow=true;
    l.shadow.camera.near=0.1;
    l.shadow.camera.far=100;
    l.shadow.mapSize.width=1024;//2048;
    l.shadow.mapSize.height=1024;
    c.add(l);
    l=new THREE.PointLight(0xaaffff,0.3);l.position.set(1*f,-2*f,-1*f);c.add(l);
    }
    
    {
    const g=new THREE.PlaneGeometry(0.15,0.15);
    const c=document.createElement('canvas');c.width=256;c.height=256;
    const ct=c.getContext('2d');hud.c=c;hud.ct=ct;
    //ct.fillStyle='rgba(0,0,0,0.3)';ct.fillRect(0,0,c.width,c.height);
    //ct.font='20px sans-serif';ct.textBaseline='top';ct.fillStyle='#ff0';ct.fillText('n/i',2,2);
    const t1=new THREE.Texture(c);hud.t=t1;
    //t1.needsUpdate=true;
    drawHud();
    const planeMaterial=new THREE.MeshBasicMaterial({map:t1,opacity:1,transparent:true});
    const o=new THREE.Mesh(g,planeMaterial);
    o.position.set(-0.2,0,-0.5);
    o.rotation.y=0.3;hudMesh=o;
    camera.add(o);huds.push(o);
    }
    
    //m1=new THREE.MeshPhongMaterial({color:0x77dd77,flatShading:true,
    //  transparent:true,opacity:0.7});
    {
    const geometry=new THREE.BoxBufferGeometry(voxScale/30,voxScale/30,voxScale/30);
    const o=new THREE.Mesh(geometry,mGreen=new THREE.MeshPhongMaterial({color:0x77dd77,flatShading:true,
      transparent:true,opacity:0.7}));
    o.position.set(0,3,0);
    room.add(o);cursor=o;
    mRed=new THREE.MeshPhongMaterial({color:0xdd7777,flatShading:true,transparent:true,opacity:0.7});
    }
    
    
    if (0) /* cubes */ {
      for ( let i = 0; i < 200; i ++ ) {
      
        const object = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: Math.random() * 0xffffff } ) );
      
        object.position.x = Math.random() * 4 - 2;
        object.position.y = Math.random() * 4;
        object.position.z = Math.random() * 4 - 2;
      
        object.rotation.x = Math.random() * 2 * Math.PI;
        object.rotation.y = Math.random() * 2 * Math.PI;
        object.rotation.z = Math.random() * 2 * Math.PI;
      
        object.scale.x = Math.random() + 0.5;
        object.scale.y = Math.random() + 0.5;
        object.scale.z = Math.random() + 0.5;
      
        object.userData.velocity = new THREE.Vector3();
        object.userData.velocity.x = Math.random() * 0.01 - 0.005;
        object.userData.velocity.y = Math.random() * 0.01 - 0.005;
        object.userData.velocity.z = Math.random() * 0.01 - 0.005;
      
        room.add(object);
        cubes.push(object);
      }
    }
    
    raycaster = new THREE.Raycaster();
    
    renderer = new THREE.WebGLRenderer( { antialias: true } );
    renderer.setPixelRatio( window.devicePixelRatio );
    renderer.setSize( window.innerWidth, window.innerHeight );
    //renderer.outputEncoding=THREE.sRGBEncoding;
    renderer.shadowMap.enabled=true;
    renderer.shadowMap.type=THREE.BasicShadowMap;
    renderer.xr.enabled = true;
    container.appendChild( renderer.domElement );
    
    controls=new OrbitControls(camera,renderer.domElement);
    //
    
    XrUtil.init({scene:scene,renderer:renderer
      //,XRControllerModelFactory:XRControllerModelFactory
      });  
    
    
    window.addEventListener('resize',onWindowResize,false);
    //
    
    //document.body.appendChild(VRButton.createButton(renderer));
    
    window.THREE=THREE;
    threeEnv.base=room;//scene;
    threeEnv.scene=room;
    threeEnv.path='/shooter/';
    threeEnv.coBoSp=1;//computeBoundingSphere
    threeEnv.camera=camera;
    if (1)
    Conet.download({fn:'/shooter/objs/templar/o5.txt',f:function(v) {
      //---
      var o=Pd5.load(v);
      o.scale=1;
      Pd5.animStart(o,'stand2');
      threeAddObj(o,0,0,0,0.15);
      o.meshes[0].tmesh.position.set(-0.3,1.1,-1.8);
      //...
    }
    });
    
    Menu.init([{s:'&#9776;',noTri:true,fs:1.4,pw:0.05,sub:[
      Menu.mFullscreen,
        
      
    {s:'Json',ms:'import/export',doctrl:'Json data',mcfs:0.07,ta:true,jsonCheck:1,wrap:0,tacols:30,tarows:20,setfunc:function(v,initLoad) {
      //---
      load(v);
      log('Imported '+v.length+' b.');
      //...
    }
    ,valuef:function() {
      return Voxed.serialize();
    }
    }
      
      
      
      /*
    {s:'TestButton'
    ,actionf:function() {
      //---
      //console.log(Voxed.serialize());
      const p=cursor.position;
      p.y=3;
      drawVoxel({});
      //drawMerge();
      //console.log(Voxed.serialize());
      save();
      //...
    }
    }
    */
      ]} 
     ,XrUtil.menuXr  
      ]
      ,{listen:1});
    
    //Bricks.initLoader({scene:room,scale:0.01,pos:{x:5,y:2,z:0}});
    //Conet.download({fn:'/three/lego/moreColors.txt',f:Bricks.parseLoad});
    
    //let fn='/three/anim/voxed/nienhagen1monster.json';
    //let fn='/three/anim/voxed/3x3.json';
    //let fn='/three/anim/voxed/treeBroad0.json';
    const data=localStorage[lsKey];
    if (data) {
      load(data); 
      log('Loaded ls '+data.length+' b.');
    } else loadFn(fn);
    
    hud.buttons=[
    {s:'Save',x:0.5,y:0.7,w:0.45,h:0.25,ondown:save},
    {s:'Load 3x3',x:0.05,y:0.55,w:0.4,h:0.1,ondown:loadFn,fn:'/three/anim/voxed/3x3.json'},
    {s:'Load tree',x:0.05,y:0.7,w:0.4,h:0.1,ondown:loadFn,fn:'/three/anim/voxed/treeBroad0.json'},
    {s:'Load coast',x:0.05,y:0.85,w:0.4,h:0.1,ondown:loadFn,fn:'/three/anim/voxed/nienhagen1monster.json'}
    ];
    //---
  }
  function onWindowResize() {
    //...
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize( window.innerWidth, window.innerHeight );
    //---
  }
  function cursorPos() {
    //---
    const p=cursor.position,f=11.11*3/voxScale;//15.22;
    const x=Math.floor(p.x*f-voxMeshPos.x*f+0.5);
    const y=Math.floor(p.y*f-voxMeshPos.y*f+0.5+12);
    const z=Math.floor(p.z*f-voxMeshPos.z*f+0.5),ud=cursor.userData;
    ud.vx=x;ud.vy=y;ud.vz=z;
    //...
  }
  function drawVoxel(ps) {
    //---
    //const p=cursor.position,f=11.11*3/voxScale;//15.22;
    //const x=Math.floor(p.x*f-voxMeshPos.x*f+0.5);
    //const y=Math.floor(p.y*f-voxMeshPos.y*f+0.5+12);
    //const z=Math.floor(p.z*f-voxMeshPos.z*f+0.5);
    cursorPos();
    const ud=cursor.userData,x=ud.vx+(ps.x||0),y=ud.vy+(ps.y||0),z=ud.vz+(ps.z||0);
    
    if (ps.del) {
      let v=Voxed.etV(x,y,z);
      if (!v) return;
      room.remove(voxMesh);
      Voxed.etV(x,y,z,null);
      var m=Voxed.generateMesh();
      var sc=voxScale;
      m.scale.set(sc,sc,sc);
      m.position.copy(voxMeshPos);
      room.add(m);voxMesh=m;
      return;
    }
    
    //onsole.log(p.y+' '+y);
    if (!voxMeshAdd) {
      voxVa=Voxed.etVa();
      voxVh=Voxed.etVh();
      Voxed.etVa([]);
      Voxed.etVh({});
    }
    
    let v=Voxed.etV(x,y,z);
    let col=(ps.c===undefined)?drawColor:ps.c;
    if (v&&(v.c==col)) return;
    if (voxMeshAdd) room.remove(voxMeshAdd);//room.remove(voxMesh);
    Voxed.etV(x,y,z,{c:col});
    var m=Voxed.generateMesh();
    var sc=voxScale;
    m.scale.set(sc,sc,sc);
    m.position.copy(voxMeshPos);
    room.add(m);voxMeshAdd=m;
    tVoxAdd=1000;
    //...
  }
  function drawMerge() {
    //---
    if (!voxMeshAdd) return;
    console.log('merge vox meshes nao');
    tVoxAdd=0;
    const va=Voxed.etVa();
    Voxed.etVa(voxVa);
    Voxed.etVh(voxVh);
    for (let v of va) Voxed.etV(v.x,v.y,v.z,v);
    let m=Voxed.generateMesh();
    m.scale.set(voxScale,voxScale,voxScale);
    m.position.copy(voxMeshPos);
    room.remove(voxMeshAdd);
    room.remove(voxMesh);
    room.add(m);voxMesh=m;voxMeshAdd=undefined;
    //...
  }
  function animate() {
    
    renderer.setAnimationLoop( render );
    
  }
  function render() {
    
    const delta=clock.getDelta()*60,dt=delta*10;
    
    const ctrl0=XrUtil.ctrl0;
    const ctrl1=XrUtil.ctrl1;
    const gp0=XrUtil.gp0;
    const gp1=XrUtil.gp1;
    
    if (tVoxAdd>0) {
      tVoxAdd-=dt;
      //onsole.log(tVoxAdd);
      if (tVoxAdd<=0) drawMerge();
    }
    
    if (0) if ( ctrl0.userData.isSelecting === true ) {
    
      const cube=cubes[0];//room.children[0];
      cubes.splice(0,1);
      //room.remove(cube);
    
      let pc=ctrl0.position,pr=room.position;
      cube.position.set(pc.x-pr.x,pc.y-pr.y,pc.z-pr.z);
      cube.userData.velocity.x = ( Math.random() - 0.5 ) * 0.02 * delta;
      cube.userData.velocity.y = ( Math.random() - 0.5 ) * 0.02 * delta;
      cube.userData.velocity.z = ( Math.random() * 0.01 - 0.05 ) * delta;
      cube.userData.velocity.applyQuaternion( ctrl0.quaternion );
      //room.add(cube);
      cubes.push(cube);
    
    }
    
    if (gp0) {
      //otateObj.rotation.y+=gp0.axes[2]*dt*0.1;
      const dx=gp0.axes[2],dz=gp0.axes[3];
      if ((Math.abs(dz)>0.1)||(Math.abs(dx)>0.1)) {
        //const position = new THREE.Vector3();
        //const rotation = new THREE.Quaternion();
        //const scale = new THREE.Vector3();
        //camera.matrixWorld.decompose(position,rotation,scale);
        tempMatrix.identity().extractRotation(camera.matrixWorld);
        vt.set(-dx,0,-dz);
        vt.applyMatrix4(tempMatrix);
        vt.multiplyScalar(dt*0.01);
        room.position.x+=vt.x;
        room.position.y+=vt.y;
        room.position.z+=vt.z;
        room.updateMatrix();
      }
      if (gp0.buttons[0].pressed) {
        if (!roomMatrix) { roomMatrix=new THREE.Matrix4();roomMatrix.copy(room.matrix); }
        room.matrix.multiplyMatrices(ctrl0.matrix,roomMatrix);
      } else {
        if (roomMatrix) { room.matrix.copy(roomMatrix);roomMatrix=undefined; }
      }
    }
    
    if (hudMesh.visible) /* intersect */ {
      // find intersections
      tempMatrix.identity().extractRotation(ctrl1.matrixWorld);
      raycaster.ray.origin.setFromMatrixPosition(ctrl1.matrixWorld);
      raycaster.ray.direction.set(0,0,-1).applyMatrix4(tempMatrix);
      
      const intersects=raycaster.intersectObjects(huds);//room.children);
      if (intersects.length>0) {
        const i0=intersects[0];
        //console.log(i0);
        if (INTERSECTED!=i0.object) {
          //if (INTERSECTED) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
          INTERSECTED=i0.object;
          //INTERSECTED.currentHex = INTERSECTED.material.emissive.getHex();
          //INTERSECTED.material.emissive.setHex( 0xff0000 );
          //onsole.log('intersected');
          hudCount++;    
        }
        //hud.lines[0]='c '+hudCount;
        //hud.lines[1]=i0.uv.x;
        //hud.lines[2]=i0.uv.y;
        hud.cursor.x=i0.uv.x;
        hud.cursor.y=1-i0.uv.y;
        hud.cursor.vis=true;
        hud.cursor.down=gp1&&gp1.buttons[0].pressed;
        drawHud();
        cursor.visible=false;
      } else {
        //if ( INTERSECTED ) INTERSECTED.material.emissive.setHex( INTERSECTED.currentHex );
        INTERSECTED=undefined;
        cursor.visible=true;
        if (hud.cursor.vis) {
          hud.cursor.vis=false;
          drawHud();
        }
      }
    }
    
    if (ctrl1&&XrUtil.isSession&&cursor.visible) {
      let pc=ctrl1.position,pr=room.position;
      vt.set(0,0,-0.4);
      vt.applyQuaternion(ctrl1.quaternion);
      //console.log(pc);
      //cursor.position.set(pc.x-pr.x+vt.x,pc.y-pr.y+vt.y,pc.z-pr.z+vt.z);
      vt.x+=pc.x;vt.y+=pc.y;vt.z+=pc.z;
      //vt.set(pc.x,pc.y,pc.z);
      tempMatrix.copy(room.matrix);
      tempMatrix.invert();
      vt.applyMatrix4(tempMatrix);
      cursor.position.set(vt.x,vt.y,vt.z);//pc.x-pr.x,pc.y-pr.y,pc.z-pr.z);
      if (gp1) {
        if (gp1.buttons[0].pressed) {
          drawVoxel({});
          hudMesh.visible=false;
        } else if (gp1.buttons[1].pressed) {
          drawMerge();
          //onsole.log('gp11');
          cursor.material=mRed;
          drawVoxel({del:1});
          hudMesh.visible=false;
        } else if (gp1.buttons[4].pressed) {
          //if (cursor.material===mGreen) {
          //  const ca=Voxed.getColors();  
          //  //onsole.log(ca);
          //  drawColor=(drawColor+1)%ca.length;
          //  const ch=ca[drawColor];
          //  cursor.material=new THREE.MeshPhongMaterial({color:new THREE.Color(ch.r,ch.g,ch.b),flatShading:true});
          //  console.log(drawColor);
          //}
          const ca=Voxed.getColors(),cal=ca.length,sq=Math.floor(Math.sqrt(cal)+0.5);
          for (let i=0;i<cal;i++) drawVoxel({c:i,x:i%sq,y:Math.floor(i/sq)});
          hudMesh.visible=false;
        } else if (gp1.buttons[5].pressed) {
          //---
          drawMerge();
          cursorPos();
          const ud=cursor.userData,x=ud.vx,y=ud.vy,z=ud.vz;
          const v=Voxed.etV(x,y,z);
          let c=drawColor;
          if (v) c=v.c;
          if ((drawColor!=c)||(cursor.material===mGreen)) {
            drawColor=c;
            const ca=Voxed.getColors(),ch=ca[drawColor];
            cursor.material=new THREE.MeshPhongMaterial({color:new THREE.Color(ch.r,ch.g,ch.b),flatShading:true});
          }
          hudMesh.visible=false;
        } else {
          if (cursor.material!==mGreen) cursor.material=mGreen;
          if (!hudMesh.visible) hudMesh.visible=true;
        }
      }
    }
    
    
    threeRender(dt);
    if (controls) controls.update();
    
    renderer.render( scene, camera );
    //...
  }
  //...
}
)();

</script>
</body>
</html><script>
//fr o,21
//fr o,21,17
//fr o,21,19
//fr o,21,20
//fr o,21,21
//fr o,21,22
//fr o,21,24
//fr o,21,24,96
//fr o,21,24,103
//fr o,21,24,104
//fr o,21,27
//fr o,21,30
//fr o,21,30,56
//fr p,35,226
