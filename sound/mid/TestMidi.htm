<!doctype html><html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width, user-scalable=yes, minimum-scale=1.0, maximum-scale=10.0">

<script src="/conet.js"></script>
<script src="/sound.js"></script>
<script src="/anim/arrows/canvApps/audio.js"></script>
<style>
button { font-size:20px;margin-right:4px;margin-bottom:4px; }
</style>
</head>
<body style="font-family:Sans-serif;" bgcolor="#aaaaaa">

<script type="text/javascript">
(function() {
  //---
  
  function serialize(d) {
    //
    d.count=d.notes.length;
    let a=Object.keys(d).sort();
    let s='{';
    for (let i=0;i<a.length;i++) {
      let k=a[i];
      s+='"'+k+'":'+JSON.stringify(d[k])+((i==a.length-1)?'}':',')+'\n';
    }
    
    return s;//JSON.stringify(d,Object.keys(d).sort());
    //...
  }
  
  let data={},b=document.createElement('button'),ta=document.createElement('textarea');
  b.innerHTML='Record Midi';
  b.onclick=function() {
    //---
    
    let midi = null; // global MIDIAccess object
    
    function onMIDISuccess(midiAccess) {
      //---
      console.log('MIDI ready!');
      midi = midiAccess; // store in the global (in real usage, would probably keep in an object instance)
      let t0=0;
      
      function onMIDIMessage(event) {
        
        //onsole.log('midi '+event.data.length);
        logTick();
        if (event.data.length==1) return;
        
        let t=Math.floor(event.timeStamp+0.5);
        let str = `MIDI message received at timestamp ${event.timeStamp}[${event.data.length} bytes]: `,
            a=[t-t0];
        t0=t;
        for (const character of event.data) {
          str += `0x${character.toString(16)} `;
          a.push(character);
        }
        console.log(str);
        
        //ta.value+=(ta.value.length>0?',':'')+JSON.stringify(a)+'\n';
        data.notes.push(a);
        data.datemod=new Date().toISOString();
        ta.value=serialize(data);
        canvas.render();//ta.on input();
      }
      
      
      midiAccess.inputs.forEach((entry) => {
        entry.onmidimessage = onMIDIMessage;
      });
      
      
      //---> possible output
      //MIDI ready!
      //TestMidi.htm:31 MIDI message received at timestamp 6884.800000190735[3 bytes]: 0x90 0x3c 0x2c 
      //TestMidi.htm:31 MIDI message received at timestamp 7093.800000190735[3 bytes]: 0x90 0x3c 0x0 
      //TestMidi.htm:31 MIDI message received at timestamp 8141.900000095367[3 bytes]: 0x90 0x3c 0x2d 
      //TestMidi.htm:31 MIDI message received at timestamp 8416.800000190735[3 bytes]: 0x90 0x3c 0x0 
      //TestMidi.htm:31 MIDI message received at timestamp 9064.900000095367[3 bytes]: 0x90 0x3c 0x2c 
      //TestMidi.htm:31 MIDI message received at timestamp 9984.800000190735[3 bytes]: 0x90 0x3c 0x0 
      
      
      //---
    }
    
    function onMIDIFailure(msg) {
      console.error(`Failed to get MIDI access - ${msg}`);
    }
    
    navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);
    this.disabled=true;
    //...
  }
  ta.style.width='400px';ta.style.height='200px';
  data=JSON.parse('{'
  +'"notes":[[0,144,60,51]\n'
  +',[234,144,60,0]\n'
  +',[105,144,62,52]\n'
  
  +',[179,144,62,0]\n'
  +',[137,144,64,46]\n'
  +',[278,144,64,0]\n'
  +',[35,144,65,51]\n'
  +',[237,144,65,0]\n'
  +',[121,144,67,58]\n'
  +',[245,144,67,0]\n'
  +',[295,144,67,53]\n'
  +',[183,144,67,0]\n'
  
  +']}\n');
  data.descr='Song of ice and fire';
  data.datenew=new Date().toISOString();
  data.datemod=new Date().toISOString();
  ta.value=serialize(data);
  console.log(data);
  document.body.appendChild(b);
  
  canvAppsAudio.loadWebaudiofont();
  b=document.createElement('button');
  b.innerHTML='Play';
  b.onclick=function() {
    //---
    
    if (0) {
    canvAppsAudio.queueNode({
      //sa:['{\"pitch\":[0,5],\"preset\":\"gp\"}']
      children:[
        {sah:{pitch:[0,5],preset:'gp',when:0,duration:0.5}}
        //{sah:{pitch:[0,5],preset:'gp',when:0.5,duration:2}}
      ]
    });
    return; 
    }
    
    
    
    let d=JSON.parse(ta.value),a=d.notes,t=-a[0][0];
    //console.log(a);
    let openNotes={};
    let queue=[];
    
    for (let b of a) {
      t+=b[0];
      if ((b[3]==0)||(b[1]==128)) {
        let h=openNotes[b[2]];
        if (!h) continue;
        openNotes[b[2]]=undefined;
        let dt=t-h.t;  
        if (queue) {
          queue.push({sah:{pitch:b[2],preset:'gp',when:h.t/1000,duration:dt/1000}});
        } else {
    let f=440*Math.pow(2,(b[2]-49-24)/12),dt=t-h.t,v=h.v/100;
    setTimeout(function() {
      Sound.osc({a:[
        {f:f,v:v},
        //{t:10,v:1},
        {t:dt,v:v},
        {t:10,v:0}]
      });
      console.log(dt);
    }
    ,h.t);
    } 
        
        continue;//note off
      }
      openNotes[b[2]]={t:t,v:b[3]};  
    }
    
    if (queue) canvAppsAudio.queueNode({children:queue});
    //Sound.osc({a:[{"fr":[50,500],"v":0,"n":1},{"t":10,"v":1},{"t":200,"v":1},{"t":140,"v":0,"fr":[200,400]}]});
    //Sound.osc({a:[{f:400,v:1}]});
    
    //...
  }
  document.body.appendChild(b);
  
  b=document.createElement('button');
  b.onclick=function() {
    //---
    //if (confirm('Really clear?')) 
    
    //ta.value='';
    data.notes.length=0;
    data.datemod=new Date().toISOString();
    ta.value=serialize(data);
    
    canvas.render();//ta.on input();
    //...
  }
  b.innerHTML='Clear';
  document.body.appendChild(b);
  
  
  b=document.createElement('button');
  b.onclick=async function() {
    //---
    try {
      await navigator.share({text:ta.value});
    } catch (err) {
      console.log(`Error: ${err}`);
    }
    //...
  }
  b.innerHTML='Share';
  document.body.appendChild(b);
  
  let logTick=(
  function() {
    //---
    let c=document.createElement('span');c.style.fontSize='12px';
    let version='v.0.135 ';//FOLDORUPDATEVERSION
    c.innerHTML=version;
    document.body.appendChild(c);
    let count=0;
    let a=[
    //'|||||',';||||',';;|||',';;;||',';;;;|'
    //,';;;;;',';;;;:',';;;::',';;:::',';::::'
    '::::::::::','.:::::::::','..::::::::','...:::::::','....::::::'
    ,'.....:::::','......::::','.......:::','........::','.........:'
    ,'..........','.........','........','.......','......','.....'
    ,'....','...','..','.',''
    ];
    
    
    return function() {
      //---
      count++;
      c.innerHTML=version+a[//a.length-1-
        count//Math.floor(count/2)
        %a.length];
      //...
    }
    //...
  }
  )();
  
  //setInterval(logTick,50);
  
  document.body.appendChild(document.createElement('br'));
  document.body.appendChild(ta);
  ta.oninput=function() {
    //---
    try {
    
    data=JSON.parse(ta.value);
    data.datemod=new Date().toISOString();
    canvas.render();
    
    } catch (e) {}
    //...
  }
  ta.onblur=function() {
    //---
    ta.value=serialize(data);//to display changed datemod
    //...
  }
  
  let canvas=new function() {
    //---
    let c=document.createElement('canvas'),sw=400,sh=200,dpr=window.devicePixelRatio;
    c.width=sw*dpr;c.height=sh*dpr;
    c.style.width=sw+'px';
    c.style.height=sh+'px';
    c.style.backgroundColor='#ccc';
    document.body.appendChild(document.createElement('br'));
    document.body.appendChild(c);
    
    
    this.render=function() {
      //---
      
      let ct=c.getContext('2d'),w=c.width,h=c.height;
      ct.strokeStyle='#000';
      ct.clearRect(0,0,w,h);
      ct.strokeRect(0,0,w,h);
      ct.fillStyle='#0c0';
      
      //try {
      //let a=JSON.parse('['+ta.value+']')
      let d=data,//JSON.parse(ta.value),
          a=d.notes;
      if (a.length==0) return;
      let t=-a[0][0];
      //data=d;
      let openNotes={},na=[],n0=1000,n1=-1000,t1=0;
      for (let b of a) {
        t+=b[0];
        let n=b[2];
        if ((b[3]==0)||(b[1]==128)) {
          let h=openNotes[n];
          if (!h) continue;
          delete(openNotes[b[2]]);//=undefined;
          let dt=t-h.t;  
          na.push({n:n,t:h.t,dt:dt});    
          n0=Math.min(n,n0);
          n1=Math.max(n,n1);
          t1=t;
          continue;//note off
        }
        openNotes[n]={t:t,v:b[3]};  
      }
      
      for (let n of Object.keys(openNotes)) {
        //console.log('still open:'+n);
        let h=openNotes[n];
        let dt=t-h.t+10;//t-h.t;  
        //if (dt<10) dt=10;
        na.push({n:n,t:h.t,dt:dt});    
        n0=Math.min(n,n0);
        n1=Math.max(n,n1);
        t1=t+10;
      }
      
      //onsole.log(w+' '+h);
      
      for (let o of na) {
        let x=0.5+w*o.t/t1,y=0.5+h*(o.n-n0)/(n1-n0+1),wh=w*o.dt/t1-1,hh=h/(n1-n0+1)-1;
        ct.fillRect(x,y,wh,hh);
        ct.strokeRect(x,y,wh,hh);
      }
      
      //ct.strokeRect(0,0,w,h);
      //onsole.log('canvas render');
      //} catch (e) {}
      //...
    }
    
    //ta.oni nput=this.render;
    this.render();
    //...
  }
  
  //canvas.render();
  
  //...
}
)();
</script>

</body>
</html><script>
//fr o,14
//fr o,14,6
//fr o,14,6,4
//fr o,14,6,4,5
//fr o,14,49,16
//fr o,14,59
//fr o,14,59,10
//fr p,32,97
