<!DOCTYPE html>
<html lang="en">
<head>
<title>editXr</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<style>body { color:#000;background-color:#aaa;margin:0px;overflow:hidden;font-family:Sans-serif; }</style>
<script src="/conet.js"></script>
<script src="/menu.js"></script>
</head>
<body>
<script type="importmap">
{
"imports": {
"three": "/three/r160/build/three.module.js",
"three/addons/": "/three/r160/examples/jsm/"
}
}
</script>
<script type="module">
import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { XrUtil } from '/util/gfx/XrUtil.js';
(function() {
  //---
  let container,camera,scene,renderer,
      controls,
      xrUtil=XrUtil,lsKey='editXr_0',
      colorBlack=new THREE.Color(0,0,0),
      grid={},gridw=0.01;
  
  //const str = "foo".repeat(1000);
  //const compressedBytes = await Conet.compress(str);
  //console.log(compressedBytes);
      
  init();
  animate();
  
  function init() {
    //---
    container = document.createElement( 'div' );
    document.body.appendChild( container );
    
    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x222222 );
    
    camera=new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.01, 50 );
    camera.position.set( 0, 1.6, 3 );
    scene.add(camera);
    
    controls = new OrbitControls( camera, container );
    controls.target.set( 0, 1.6, 0 );
    controls.update();
    
    const grid=new THREE.GridHelper(4,1,0x111111,0x111111);
    scene.add(grid);
    
    scene.add(new THREE.HemisphereLight(0x888877,0x777788,3));
    
    const light=new THREE.DirectionalLight(0xffffff,3);
    light.position.set(0,6,0);
    scene.add( light );
    
    //
    
    renderer = new THREE.WebGLRenderer( { antialias:true } );
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize( window.innerWidth,window.innerHeight );
    renderer.xr.enabled=true;
    container.appendChild(renderer.domElement);
    
    //document.body.appendChild( XRButton.createButton( renderer ) );
    
    xrUtil.init({scene:scene,renderer:renderer,camera:camera,room:scene,sculpt:1//,vrPos:vrPos
      });
    xrUtil.initHud();
    
    const version='v.0.21 ';//FOLDORUPDATEVERSION
    xrUtil.log('Edit '+version);
    
    
    //
    
    let material=new THREE.MeshPhongMaterial({flatShading:true,color:0x66aa66,transparent:true,opacity:0.7});
    let cmat=new THREE.MeshPhongMaterial({flatShading:true,color:0xaaaaaa});
    
    
    const pivot = new THREE.Mesh( new THREE.IcosahedronGeometry( 0.01, 3 ) );
    pivot.name = 'pivot';
    pivot.position.z = - 0.05;
    
    const group = new THREE.Group();
    group.add( pivot );
    xrUtil.ctrl0.add( group.clone() );
    
    let mesh=new THREE.Mesh(new THREE.BoxGeometry(0.01,0.01,0.01),cmat);
    mesh.position.z=-0.05;
    xrUtil.ctrl1.add(mesh);
    //xrUtil.ctrl1.add( group.clone() );
    
    //
    window.addEventListener( 'resize', onWindowResize );
    
    //--- initBlob
    
    /*
    const path = 'textures/cube/SwedishRoyalCastle/';
    const format = '.jpg';
    const urls = [
    path + 'px' + format, path + 'nx' + format,
    path + 'py' + format, path + 'ny' + format,
    path + 'pz' + format, path + 'nz' + format
    ];
    
    const reflectionCube = new THREE.CubeTextureLoader().load( urls );
    */
    
    //---menu
    
    xrUtil.menuXr.ms+=' '+version;
    Menu.init([{s:'&#9776;',noTri:true,fs:1.4,pw:0.05,sub:[
      Menu.mFullscreen
      ]} 
     ,xrUtil.menuXr  
      ]
      ,{listen:1});
    
    
    //pointMaterial=new THREE.MeshPhongMaterial({color:0x77dd77,flatShading:true,transparent:true,opacity:0.7});
    
    {
      let g=new THREE.BoxGeometry(0.2,0.2,0.2),
          mesh=new THREE.Mesh(g,material);
      mesh.position.set(0,1,0);
      scene.add(mesh);
      mesh=new THREE.Mesh(g,material);
      mesh.position.set(0.1,1.1,0.1);
      scene.add(mesh);
    }
    
    //...
  }
  function onWindowResize() {
    //---
    camera.aspect=window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth,window.innerHeight);
    //...
  }
  //
  function animate() {
    renderer.setAnimationLoop(render);
  }
  
  function render() {
    //---
    xrUtil.renderHud();
    renderer.render(scene,camera);
    //...
  }
  //...
}
)();
</script>
</body>
</html>
<script>
//fr o,23
//fr o,23,14
//fr o,23,19
//fr p,66,95
