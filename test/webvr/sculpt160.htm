<!DOCTYPE html>
<html lang="en">
<head>
<title>sculpt160</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
<style>body { color:#000;background-color:#aaa;margin:0px;overflow:hidden;font-family:Sans-serif; }</style>
<script src="/conet.js"></script>
<script src="/menu.js"></script>
</head>
<body>
<script type="module">
import * as THREE from '/three/r160/build/three.module.js';
import { OrbitControls } from '/three/r160/examples/jsm/controls/OrbitControls.js';
import { MarchingCubes } from '/three/r160/examples/jsm/objects/MarchingCubes.js';
import { XRButton } from '/three/r160/examples/jsm/webxr/XRButton.js';
import { XrUtil } from '/util/gfx/XrUtil.js';
(function() {
  //---
  let container,camera,scene,renderer,
      controller1,controller2,
      controls,blob,points=[],
      xrUtil=XrUtil;
      
  init();
  animate();
  
  function init() {
    //---
    container = document.createElement( 'div' );
    document.body.appendChild( container );
    
    scene = new THREE.Scene();
    scene.background = new THREE.Color( 0x222222 );
    
    camera = new THREE.PerspectiveCamera( 50, window.innerWidth / window.innerHeight, 0.01, 50 );
    camera.position.set( 0, 1.6, 3 );
    
    controls = new OrbitControls( camera, container );
    controls.target.set( 0, 1.6, 0 );
    controls.update();
    
    const grid=new THREE.GridHelper(4,1,0x111111,0x111111);
    scene.add(grid);
    
    scene.add( new THREE.HemisphereLight( 0x888877, 0x777788, 3 ) );
    
    const light = new THREE.DirectionalLight( 0xffffff, 3 );
    light.position.set( 0, 6, 0 );
    scene.add( light );
    
    //
    
    renderer = new THREE.WebGLRenderer( { antialias:true } );
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.setSize( window.innerWidth,window.innerHeight );
    renderer.xr.enabled=true;
    container.appendChild(renderer.domElement);
    
    //document.body.appendChild( XRButton.createButton( renderer ) );
    
    // controllers
    if (0) {
    
    function onSelectStart() {
      
      this.userData.isSelecting = true;
      
    }
    
    function onSelectEnd() {
      
      this.userData.isSelecting = false;
      
    }
    
    controller1 = renderer.xr.getController( 0 );
    controller1.addEventListener( 'selectstart', onSelectStart );
    controller1.addEventListener( 'selectend', onSelectEnd );
    controller1.userData.id = 0;
    scene.add( controller1 );
    
    controller2 = renderer.xr.getController( 1 );
    controller2.addEventListener( 'selectstart', onSelectStart );
    controller2.addEventListener( 'selectend', onSelectEnd );
    controller2.userData.id = 1;
    scene.add( controller2 );
    
    } else {
    
    xrUtil.init({scene:scene,renderer:renderer,camera:camera,room:scene,sculpt:1//,vrPos:vrPos
      });
    controller1=xrUtil.ctrl0;
    controller2=xrUtil.ctrl1;
    controller1.userData.id=0;
    controller2.userData.id=1;
    
    }
    
    //
    
    const pivot = new THREE.Mesh( new THREE.IcosahedronGeometry( 0.01, 3 ) );
    pivot.name = 'pivot';
    pivot.position.z = - 0.05;
    
    const group = new THREE.Group();
    group.add( pivot );
    
    controller1.add( group.clone() );
    controller2.add( group.clone() );
    //
    window.addEventListener( 'resize', onWindowResize );
    
    //--- initBlob
    
    /*
    const path = 'textures/cube/SwedishRoyalCastle/';
    const format = '.jpg';
    const urls = [
    path + 'px' + format, path + 'nx' + format,
    path + 'py' + format, path + 'ny' + format,
    path + 'pz' + format, path + 'nz' + format
    ];
    
    const reflectionCube = new THREE.CubeTextureLoader().load( urls );
    */
    
    const material = new THREE.MeshStandardMaterial( {
      color: 0xffffff,
      // envMap: reflectionCube,
      roughness: 0.9,
      metalness: 0.0,
      transparent: true,
      vertexColors: true
    });
    
    
    blob=new MarchingCubes(64,material,false,true,500000);
    blob.position.y = 1;
    scene.add( blob );
    
    points=[
      {position:new THREE.Vector3(),strength:0.04,subtract:10},
      {position:new THREE.Vector3(),strength:-0.08,subtract:10}
    ];
    
    for (let i=0;i<10;i++) {
      points.push({position:new THREE.Vector3(0.5+i*0.03,0.5,0.5),strength:0.04,subtract:10,color:new THREE.Color(0.1,0.9,0.1)});
    }
    
    //---menu
    
    Menu.init([{s:'&#9776;',noTri:true,fs:1.4,pw:0.05,sub:[
      Menu.mFullscreen,  
    {s:'Json',ms:'import/export',doctrl:'Json data',mcfs:0.07,ta:true,jsonCheck:1,wrap:0,tacols:30,tarows:20,setfunc:function(v,initLoad) {
      //---
      var d=JSON.parse(v);
      points.length=2;
      points=points.concat(d.points);
      //load(v);
      //log('Imported '+v.length+' b.');
      //...
    }
    ,valuef:function() {
      return serialize();
    }
    }
    
    ,{s:'Clear blobs',actionf:function() {
      //---
      //alert(23);
      points.length=2;
      //...
    }
    }
    
      ]} 
     ,xrUtil.menuXr  
      ]
      ,{listen:1});
    
    
    //...
  }
  function onWindowResize() {
    //---
    camera.aspect=window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth,window.innerHeight);
    //...
  }
  //
  function animate() {
    renderer.setAnimationLoop(render);
  }
  function transformPoint( vector ) {
    //---
    vector.x=(vector.x+1.0)/2.0;
    vector.y=(vector.y/2.0);
    vector.z=(vector.z+1.0)/2.0;
    //...
  }
  function handleController(controller) {
    //---
    const pivot=controller.getObjectByName('pivot');
    if (pivot) {
      const id=controller.userData.id;
      const matrix=pivot.matrixWorld;
      points[id].position.setFromMatrixPosition(matrix);
      transformPoint(points[id].position);
    
      if (controller.userData.isSelecting ) {
        const strength=points[id].strength/2;
        const vector=new THREE.Vector3().setFromMatrixPosition(matrix);
        transformPoint(vector);
        points.push({position:vector,strength:strength,subtract:10});
      }
    }
    //...
  }
  function updateBlob() {
    //---
    blob.reset();
    for ( let i = 0; i < points.length; i ++ ) {
      const point=points[i];
      const position=point.position;
      blob.addBall(position.x,position.y,position.z,point.strength,point.subtract,point.color);
    }
    blob.update();
    //...
  }
  function render() {
    //---
    handleController(controller1);
    handleController(controller2);
    updateBlob();
    renderer.render(scene,camera);
    //...
  }
  function serialize() {
    //---
    let s='{"points":[\n';
    for (let i=2;i<points.length;i++)
      s+=JSON.stringify(points[i])+((i<points.length-1)?',':'')+'\n';
    s+=']}\n';
    return s;
    //...
  }
  //...
}
)();
</script>
</body>
</html>
<script>
//fr o,17
//fr o,17,9
//fr o,17,9,36
//fr o,17,9,38
//fr o,17,9,118
//fr o,17,9,119
//fr o,17,9,122
//fr o,17,14
//fr o,17,17
//fr p,2,59
