{"os":[{"x":"0px","y":"0px","s":"<script>\nwindow.generateKeys=function () {\n  //console.log(document.getElementById('selmod').value);\n  //console.log(document.getElementById('selhash').value);\n\nfunction bufferEncode(value) {\n  // ArrayBuffer to Base64 (not URLBase64)\n  return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))\n    //.replace(/\\+/g, \"-\")\n    //.replace(/\\//g, \"_\")\n    //.replace(/=/g, \"\")\n    ;\n}\n\n\nwindow.crypto.subtle.generateKey(\n    {\n        name: \"RSA-OAEP\",\n        modulusLength: document.getElementById('selmod').value, //can be 1024, 2048, or 4096\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        hash: {name: document.getElementById('selhash').value}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    true, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\", \"decrypt\"] //must be [\"encrypt\", \"decrypt\"] or [\"wrapKey\", \"unwrapKey\"]\n)\n.then(function(key){\n    //returns a keypair object\n    //console.log(key);\n    //console.log(key.publicKey);\n    //console.log(key.privateKey);\n\nwindow.crypto.subtle.exportKey(\n    \"spki\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    key.publicKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    document.getElementById('taPubKey').value=bufferEncode(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n\nwindow.crypto.subtle.exportKey(\n    \"pkcs8\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    key.privateKey //can be a publicKey or privateKey, as long as extractable was true\n)\n.then(function(keydata){\n    //returns the exported key data\n    document.getElementById('taPrivKey').value=bufferEncode(keydata);\n})\n.catch(function(err){\n    console.error(err);\n});\n\n})\n.catch(function(err){\n    console.error(err);\n});\n\n}\n</script>\n<table>\n<tr><td colspan=2 style=\"font-size:2em;\">RSA-OAEP</td></tr>\n<tr><td>ModulusLength</td><td>\n\n<select id=\"selmod\"><option>1024</option><option selected>2048</option><option>4096</option></select>\n\n</td></tr>\n<tr><td>Hash</td><td>\n\n<select id=\"selhash\"><option>SHA-1</option><option selected>SHA-256</option>\n<option>SHA-384</option><option>SHA-512</option></select>\n\n</td></tr>\n<tr><td colspan=2><button id=\"butgen\" onclick=\"generateKeys();\">Generate Keys</button><span id=\"genEdgestart\">Â </span></td></tr>\n<tr><td colspan=2>Crypto code by <a href=https://github.com/diafygi/webcrypto-examples>github.com/diafygi</a>.</td></tr>\n</table>\n\n","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"226px","y":"206px","s":"<span id=\"privlabel\">Private Key</span><span id=\"privlabel0\" style=\"margin-left:350px;\">&nbsp;</span><br>\n<textarea style=\"font-size:10px;\" id=\"taPrivKey\" cols=80 rows=25>","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"334px","y":"5px","s":"<span id=\"publabel\">Public Key</span><span id=\"publabel0\" style=\"margin-left:250px;\">&nbsp;</span><br>\n<textarea style=\"font-size:10px;\" id=\"taPubKey\" cols=60 rows=10>","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"109.922px","y":"87px","s":"","c":"","img":1,"edge":[0,2],"edgeId0":"genEdgestart","edgeId1":"publabel","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(-0.340109rad) scale(1, 1)","w":"218.815px"}
,{"x":"109.922px","y":"87px","s":"","c":"","img":1,"edge":[0,1],"edgeId0":"genEdgestart","edgeId1":"privlabel","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(0.797619rad) scale(1, 1)","w":"148.066px"}
,{"x":"886px","y":"0px","s":"<span id=\"labelOrdata\">Original Data</span><br>\n<textarea style=\"font-size:13px;\" id=\"taOrdata\" cols=20 rows=3>Hello world !!1","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"796px","y":"128px","s":"<span id=\"labelEncdata\">Encrypted Data</span><br>\n<textarea style=\"font-size:13px;\" id=\"taEncdata\" cols=40 rows=10>","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"890px","y":"364px","s":"<span id=\"labelDecdata\">Decrypted Data</span><br>\n<textarea style=\"font-size:13px;\" id=\"taDecdata\" cols=20 rows=3>","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"757px","y":"42px","s":"<button id=\"butencrypt\" onclick=\"doEncrypt();\">Encrypt</button>\n<script>\nwindow.doEncrypt=function() {\n\nfunction bufferDecode(value) {\n  // Base64 to ArrayBuffer\n  return Uint8Array.from(atob(value), c => c.charCodeAt(0));\n}\n\nfunction ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i=0, strLen=str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\nwindow.crypto.subtle.importKey(\n    \"spki\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    bufferDecode(document.getElementById('taPubKey').value),\n    {   //these are the algorithm options\n        name: \"RSA-OAEP\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"encrypt\"] //\"encrypt\" or \"wrapKey\" for public key import or\n                //\"decrypt\" or \"unwrapKey\" for private key imports\n)\n.then(function(publicKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    //console.log(publicKey);\n\nwindow.crypto.subtle.encrypt(\n    {\n        name: \"RSA-OAEP\",\n        //label: Uint8Array([...]) //optional\n    },\n    publicKey, //from generateKey or importKey above\n    str2ab(document.getElementById('taOrdata').value) //ArrayBuffer of data you want to encrypt\n)\n.then(function(encrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    //window.plEncrypted=new Uint8Array(encrypted);\n    document.getElementById('taEncdata').value=ab2str(new Uint16Array(encrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n\n\n\n})\n.catch(function(err){\n    console.error(err);\n});\n}\n</script>","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"642.703px","y":"7px","s":"","c":"","img":1,"edge":[2,8],"edgeId0":"publabel0","edgeId1":"butencrypt","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(0.308025rad) scale(1, 1)","w":"95.7908px"}
,{"x":"888px","y":"2px","s":"","c":"","img":1,"edge":[5,8],"edgeId0":"labelOrdata","edgeId1":"butencrypt","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(2.82683rad) scale(1, 1)","w":"109.415px"}
,{"x":"759px","y":"44px","s":"","c":"","img":1,"edge":[8,6],"edgeId0":"butencrypt","edgeId1":"labelEncdata","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(1.14505rad) scale(1, 1)","w":"68.1799px"}
,{"x":"730px","y":"327px","s":"<button id=\"butdecrypt\" onclick=\"doDecrypt();\">Decrypt</button>\n<script>\nwindow.doDecrypt=function() {\n\nfunction bufferDecode(value) {\n  // Base64 to ArrayBuffer\n  return Uint8Array.from(atob(value), c => c.charCodeAt(0));\n}\n\nfunction ab2str(buf) {\n  return String.fromCharCode.apply(null, new Uint16Array(buf));\n}\nfunction str2ab(str) {\n  var buf = new ArrayBuffer(str.length*2); // 2 bytes for each char\n  var bufView = new Uint16Array(buf);\n  for (var i=0, strLen=str.length; i < strLen; i++) {\n    bufView[i] = str.charCodeAt(i);\n  }\n  return buf;\n}\n\ndocument.getElementById('taDecdata').value='';\n\nwindow.crypto.subtle.importKey(\n    \"pkcs8\", //can be \"jwk\" (public or private), \"spki\" (public only), or \"pkcs8\" (private only)\n    bufferDecode(document.getElementById('taPrivKey').value),\n    {   //these are the algorithm options\n        name: \"RSA-OAEP\",\n        hash: {name: \"SHA-256\"}, //can be \"SHA-1\", \"SHA-256\", \"SHA-384\", or \"SHA-512\"\n    },\n    false, //whether the key is extractable (i.e. can be used in exportKey)\n    [\"decrypt\"] //\"encrypt\" or \"wrapKey\" for public key import or\n                //\"decrypt\" or \"unwrapKey\" for private key imports\n)\n.then(function(privKey){\n    //returns a publicKey (or privateKey if you are importing a private key)\n    //console.log(privKey);\n\n//console.log(str2ab(document.getElementById('taEncdata').value));\n//document.getElementById('taDecdata').value=ab2str(str2ab(document.getElementById('taEncdata').value));\n//console.log(plEncrypted);\n\nif (1)\nwindow.crypto.subtle.decrypt(\n    {\n        name: \"RSA-OAEP\",\n        //label: Uint8Array([...]) //optional\n    },\n    privKey, //from generateKey or importKey above\n    //plEncrypted  \n    str2ab(document.getElementById('taEncdata').value) \n)\n.then(function(decrypted){\n    //returns an ArrayBuffer containing the encrypted data\n    document.getElementById('taDecdata').value=ab2str(new Uint16Array(decrypted));\n})\n.catch(function(err){\n    console.error(err);\n});\n\n\n\n})\n.catch(function(err){\n    console.error(err);\n});\n}\n</script>","c":"rgba(230, 230, 230, 0.7)"}
,{"x":"639.359px","y":"208px","s":"","c":"","img":1,"edge":[1,12],"edgeId0":"privlabel0","edgeId1":"butdecrypt","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(0.91737rad) scale(1, 1)","w":"126.142px"}
,{"x":"798px","y":"130px","s":"","c":"","img":1,"edge":[6,12],"edgeId0":"labelEncdata","edgeId1":"butdecrypt","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(1.89104rad) scale(1, 1)","w":"183.409px"}
,{"x":"732px","y":"329px","s":"","c":"","img":1,"edge":[12,7],"edgeId0":"butdecrypt","edgeId1":"labelDecdata","src":"/canvas/history/arrow.json.txt","transformOrigin":"center left","t":"rotate(0.227255rad) scale(1, 1)","w":"137.972px"}],
"views":[
]}