<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style> body { color: #000;background-color: #fff;margin: 0px;overflow: hidden; } </style>
<script src="https://threejs.org/build/three.min.js"></script>
<script src="https://threejs.org/examples/js/libs/stats.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script src="../conet.js"></script>
<script src="../menu.js"></script>
<script src="../vecmath.js"></script>
<script src="../canvas/pd5.js"></script>
<script src="threePd5.js"></script>
<script src="../util/deep.js"></script>
</head><body><div id="container"></div><script>
//---not extension of three/deep6 but of three/dungeons, spiritual
//---successor of canvas/deep3 (area of view, visited areas are grey map)
function deep7() {
  var camera,controls,scene,renderer,stats,mcam,ot=Date.now(),th=0,o5s=[],PI=Math.PI,
      du,version='0.608 ',blockw=10,os=[],deep,//FOLDORUPDATEVERSION
      vh0=new THREE.Vector3(),vh1=new THREE.Vector3(),mh0=new THREE.Matrix4(),
      mh1=new THREE.Matrix4(),dum0,dum1,cami=0,toggleCrouch=false,
      mleft,mright,mfore,light;
  //---
  function addMesh(x,y,z,g,m,ncs) {
    var mesh=new THREE.Mesh(g,m);
    mesh.position.set(x,y,z);
    //mesh.updateMatrix();
    //mesh.matrixAutoUpdate=false;
    if (!ncs) mesh.castShadow=true;
    mesh.receiveShadow=true;
    scene.add(mesh);
    return mesh;
    //...
  }
  function animate() {
    
    requestAnimationFrame( animate );
    
    var t=Date.now(),dt=t-ot;th+=dt;ot=t;//if (th>1500) { th=0;camSwitch(); }
    //if (Math.floor(t/20000)%2==0)
    //for (var i=o5s.length-1;i>=0;i--) {
    //  var o=o5s[i];
    //  if (!o) continue;
    //  var m=o.meshes[0].tmesh;
    //  m.rotation.set(0,o.ay+Math.sin(t/100)*0.3,0); 
    //}
    
    var cp=camera.position,ct=controls.target;
    
    var viewChanged=false;
    if (toggleCrouch) {
      toggleCrouch=false;
      if (cami!=-1) {
      var o=os[cami];
      deep.toggleCrouch(o);
      var o5=o.o5;
      viewChanged=true;
     //Pd5.animStart(o5,o5.animh[o.crouch?'idlec':'idle']);
      //setView(o);
      //camSet(o,1);
      //onsole.log(o);
      }
    }
    
    var o=cami==-1?undefined:os[cami],viewall=false;
    if (o) {
      o.d=mfore.on?o.v:0;
      o.da=0;
      if (mleft.on) o.da-=1;
      if (mright.on) o.da+=1;
    }
    
    //var viewChanged=false;
    if (deep.calc(os,o,false,dt,viewall)) {
      dum0.geometry=new DungeonGeometry(du);
      dum1.geometry=new DungeonGeometry(du,true);
      viewChanged=true;
    }
    
    if (o) if (o.moving||viewChanged) {//viewChanged||(o.d!=0)) {
      gv(o.x,o.y+o.eyeh+0.5,o.z);
      cp.x=cp.x-ct.x+vh0.x;
      cp.y=cp.y-ct.y+vh0.y;
      cp.z=cp.z-ct.z+vh0.z;
      ct.copy(vh0);
      calca(5,5,-o.a);
      light.position.set(vh0.x+vh1.x,vh0.y+vh1.y,vh0.z+vh1.z);
    }
    
    
    for (var i=os.length-1;i>=0;i--) {
      var o=os[i],o5=o.o5;
      var m=o5.meshes[0].tmesh;
      
      //onsole.log(o.alpha);
      if ((o.alpha>0)&&(!o5.shown)) {
        //onsole.log('showing o '+threeEnv.os.length);
        threeEnv.os.push(o5);
        scene.add(m);
        o5.shown=true;
      } else if ((o.alpha==0)&&o5.shown) {
        //onsole.log('hiding o '+threeEnv.os.length);
        var j=threeEnv.os.indexOf(o5);
        threeEnv.os.splice(j,1);
        scene.remove(m);
        o5.shown=false;
      }
      
      if (!o5.shown) continue;
      
      m.position.copy(gv(o.x,o.y,o.z));//set((o.x+du.dx+0.5)*blockw,(o.y+du.dy+0.5)*blockw-139,(o.z+du.dz+0.5)*blockw);
      m.rotation.set(0,-o.a
        //+Math.sin(t/500)*0.3
        ,0);
      
      var an=o.crouch?(o.d!=0?'crun':(o.da!=0?'cturn':'cidle')):(o.d!=0?'run':(o.da!=0?'turn':'idle'));
      Pd5.animStart(o5,o5.animh[an]);
    }
    
    controls.update(); // required if controls.enableDamping = true, or if controls.autoRotate = true
    stats.update();
    
    var p=camera.position,t=controls.target;
    Menu.ms(mcam,f0(p.x)+','+f0(p.y)+','+f0(p.z)+' \u2B9A '+f0(t.x)+','+f0(t.y)+','+f0(t.z));
    
    //renderer.render(scene,camera);
    threeRender();
  }
  function box(x,y,z,w,h,b,m) {
    //mesh=new THREE.Mesh(new THREE.BoxGeometry(w,h,b),m);
    //mesh.position.set(x,y,z);
    //mesh.updateMatrix();
    //mesh.matrixAutoUpdate = false;
    //mesh.castShadow=true;
    //mesh.receiveShadow=true;
    //scene.add(mesh);
    //return mesh;
    return addMesh(x,y,z,new THREE.BoxGeometry(w,h,b),m);
  }
  function dkey(x,y,z) {
    return z+' '+y+' '+x;
  }
  function dungeonGenerate() {
    //----copied from w3dit.generateDungeon
    var xmin=0,ymin=0,zmin=0,xmax=50,ymax=50,zmax=50,
        rH={},//xmax:xmax,ymax:ymax,zmax:zmax,xw:3,yw:2,zw:2};
        xmi=1000,ymi=1000,zmi=1000,xma=-1000,yma=-1000,zma=-1000,
        gs=[
          {xp:25,yp:25,zp:25,xw:2,yw:3,zw:2,dir:1}
          //{xp:15,yp:25,zp:25,xw:2,yw:3,zw:2,dir:1}
          ////,{xp:15,yp:30,zp:25,xw:1,yw:1,zw:1,dir:1}
        ];
    //for (var c=0;c<500;c++) {
    var newg=0,nxw,nyw,nzw;
    
    while (gs.length>0) {
      for (var gi=gs.length-1;gi>=0;gi--) {
        var g=gs[gi];
        var stop=false;
        for (var z=g.zp;z<g.zp+g.zw;z++) for (var y=g.yp;y<g.yp+g.yw;y++) for (var x=g.xp;x<g.xp+g.xw;x++) {
          var k=z+' '+y+' '+x;
          if (rH[k]) stop=true;
          rH[k]=[x,y,z];
          xmi=Math.min(xmi,x);ymi=Math.min(ymi,y);zmi=Math.min(zmi,z);
          xma=Math.max(xma,x);yma=Math.max(yma,y);zma=Math.max(zma,z);
        }
        if (!stop) {
        if (Math.random()<0.2) g.dir=rand(6);//Math.floor(Math.random()*6);
        if (Math.random()<0.15) {
          var newdir=rand(6);//Math.floor(Math.random()*2);
          nxw=1+rand(3);nyw=1+rand(3);nzw=1+rand(3);
          var ng={xp:g.xp,yp:g.yp,zp:g.zp,xw:nxw,yw:nyw,zw:nzw,dir:newdir};
    switch (newdir) {
      case 0:ng.xp-=ng.xw;break;
      case 1:ng.xp+=g.xw;break;
      case 2:ng.yp-=ng.yw;break;
      case 3:ng.yp+=g.yw;break;
      case 4:ng.zp-=ng.zw;break;
      case 5:ng.zp+=g.zw;break;
    }
          gs.push(ng);
        } //else newg=0;
    switch (g.dir) {
      case 0:if (g.xp-g.xw<=0) stop=true; else g.xp-=g.xw;break;
      case 1:
        if (g.xp+g.xw>=xmax) { stop=true;break; }
        g.xp+=g.xw;
        break;
      case 2:if (g.yp-g.yw<=0) stop=true; else g.yp-=g.yw;break;
      case 3:if (g.yp+g.yw>=ymax) stop=true; else g.yp+=g.yw;break;
      case 4:if (g.zp-g.zw<=0) stop=true; else g.zp-=g.zw;break;
      case 5:if (g.zp+g.zw>=zmax) stop=true; else g.zp+=g.zw;break;
    }
        }
        if (stop) gs.splice(gi,1);
      }
    }
    //dungeonH=rH;
    
    //onsole.log('generateDungeon '+xmi+'-'+xma+', '+ymi+'-'+yma+', '+zmi+'-'+zma);
    //console.log(rH);
    
    return {rH:rH,xmin:xmi,xmax:xma,ymin:ymi,ymax:yma,zmin:zmi,zmax:zma,
            dx:-(xma-xmi)/2,dy:-ymi,dz:-(zma-zmi)/2};
    //...
  }
  function DungeonGeometry(ps,view) {
    
    //console.log('DungeonGeometry d=');
    //console.log(p);
    THREE.BufferGeometry.call( this );
    var width=50,height=50,depth=50,t='roofCant0';
    this.type='DungeonGeometry';
    this.parameters = {
      width: width,
      height: height,
      depth: depth,
    };
    
    var scope = this;
    
    // buffers
    
    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = [];
    
    // helper variables
    
    var numberOfVertices = 0;
    var groupStart = 0;
    
    // build each side of the box geometry
    var w=width,h=height,d=depth,a,mx,mz,xz,
    
      a=[[[-100,100,100,0.27,0.4381],[-100,-100,100,0.27,0.4688],[100,-100,100,0.4688,0.4108],[100,100,100,0.4688,0.3801]
         ,[-100,-100,-100,0.1563,0.3676],[-100,100,-100,0.1563,0.2142],[100,-100,-100,0.355,0.3096],[100,100,-100,0.355,0.1563]
         ,[100,100,-100,0.355,0.1563],[-100,100,-100,0.1563,0.2142],[-100,100,100,0.27,0.4381],[100,100,100,0.4688,0.3801],[-100,-100,100,0.27,0.4688],[100,-100,100,0.4688,0.4108],[-100,-100,-100,0.1563,0.3676],[100,-100,-100,0.355,0.3096],[100,100,-100,0.355,0.1563],[100,100,100,0.4688,0.3801],[100,-100,100,0.4688,0.4108],[100,-100,-100,0.355,0.3096],[-100,100,-100,0.1563,0.2142],[-100,100,100,0.27,0.4381],[-100,-100,100,0.27,0.4688],[-100,-100,-100,0.1563,0.3676]],
         [
         [2,0,1],[0,2,3]
         ,[4,7,6],[7,4,5]
         ,[2,1,4],[4,6,2]
         //,[15,12,14],[12,15,13]
         //,[17,19,18],[23,21,22],[10,16,11],[16,10,20],[17,8,19],[9,21,23]
         ]];
    
    if (0) {
    var pa=a[0],fa=a[1];
    for (var i=0;i<pa.length;i++) { var p=pa[i];
      var x=(mx?-1:1)*(xz?p[2]:p[0]),
          y=p[1],
          z=(mz?-1:1)*(xz?p[0]:p[2]);
      vertices.push(x*w/200,y*h/200,z*d/200);normals.push(0,0,1);uvs.push(p[3],p[4]); }
    for (var i=0;i<fa.length;i++) { var f=fa[i];
      if ((mz&&!xz)||(xz&&!mx&&!mz)||(mx&&!xz)) indices.push(f[0],f[1],f[2]); else indices.push(f[0],f[2],f[1]); 
    }
    } 
    function key(x,y,z) {
      return z+' '+y+' '+x;
    }
    function vert(x,y,z,u,v) {
      x+=b*ps.dx;//-=b*(ps.xmax+ps.xmin)/2;
      z+=b*ps.dz;//-=b*(ps.zmax+ps.zmin)/2;
      y+=b*ps.dy;//-=b*ps.ymin;
      vertices.push(x,y,z);normals.push(u,v,0);uvs.push(u||0,v||0);
      return vertices.length/3-1;
    }
    var rH=ps.rH,b=blockw;  
    for (var k in rH) if (rH.hasOwnProperty(k)) {
      var a=rH[k],x=a[0],y=a[1],z=a[2];
      //if (a.view^view) continue;
      if (view&&!a.view) continue;
      if (!view&&(a.view//||!a.wview
        )) continue;
      if (!rH[key(x,y-1,z)]) {
        var i0=vert(x*b,y*b,z*b,0,0),i1=vert((x+1)*b,y*b,z*b,1,0),i2=vert(x*b,y*b,(z+1)*b,0,1),i3=vert((x+1)*b,y*b,(z+1)*b,1,1);
        indices.push(i0,i3,i1);indices.push(i0,i2,i3);
      }
      if (!rH[key(x,y+1,z)]) {
        var i0=vert(x*b,(y+1)*b,z*b,0,0),i1=vert((x+1)*b,(y+1)*b,z*b,1,0),i2=vert(x*b,(y+1)*b,(z+1)*b,0,1),i3=vert((x+1)*b,(y+1)*b,(z+1)*b,1,1);
        indices.push(i0,i1,i3);indices.push(i0,i3,i2);
      }
      if (!rH[key(x-1,y,z)]) {
        var i0=vert(x*b,y*b,z*b,0,0),i1=vert(x*b,(y+1)*b,z*b,1,0),i2=vert(x*b,(y+1)*b,(z+1)*b,1,1),i3=vert(x*b,y*b,(z+1)*b,0,1);
        indices.push(i0,i1,i2);indices.push(i0,i2,i3);
      }
      if (!rH[key(x+1,y,z)]) {
        var i0=vert((x+1)*b,y*b,z*b,0,0),i1=vert((x+1)*b,(y+1)*b,z*b,1,0),i2=vert((x+1)*b,(y+1)*b,(z+1)*b,1,1),i3=vert((x+1)*b,y*b,(z+1)*b,0,1);
        indices.push(i0,i2,i1);indices.push(i0,i3,i2);
      }
      if (!rH[key(x,y,z-1)]) {
        var i0=vert(x*b,y*b,z*b,0,0),i1=vert((x+1)*b,y*b,z*b,1,0),i2=vert((x+1)*b,(y+1)*b,z*b,1,1),i3=vert(x*b,(y+1)*b,z*b,0,1);
        indices.push(i0,i1,i2);indices.push(i0,i2,i3);
      }
      if (!rH[key(x,y,z+1)]) {
        var i0=vert(x*b,y*b,(z+1)*b,0,0),i1=vert((x+1)*b,y*b,(z+1)*b,1,0),i2=vert((x+1)*b,(y+1)*b,(z+1)*b,1,1),i3=vert(x*b,(y+1)*b,(z+1)*b,0,1);
        indices.push(i0,i2,i1);indices.push(i0,i3,i2);
      }
    }
    groupCount=indices.length;
    scope.addGroup( groupStart, groupCount, 0 );
    groupStart += groupCount;
    
    
    this.setIndex( indices );
    this.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
    this.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );
    this.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );
    
    if (view) {//view) {
      this.computeFaceNormals();
      this.computeVertexNormals();
    }
  }
  function dungeonLoad(a) {
    var rH={},
        xmi=1000,ymi=1000,zmi=1000,xma=-1000,yma=-1000,zma=-1000;
    for (var i=0;i<a.length;i++) {
      var ah=a[i];
      for (var j=0;j<(ah[3]||1);j++) {
        var x=ah[0]+j,y=ah[1],z=ah[2];
        rH[dkey(x,y,z)]=[x,y,z];
        xmi=Math.min(xmi,x);ymi=Math.min(ymi,y);zmi=Math.min(zmi,z);
        xma=Math.max(xma,x);yma=Math.max(yma,y);zma=Math.max(zma,z);
      }
    }
    
    //var dx=Math.floor((xmax-xmin)/2),dy=
    
    return {rH:rH,xmin:xmi,xmax:xma,ymin:ymi,ymax:yma,zmin:zmi,zmax:zma,
            dx:-(xma-xmi)/2,dy:-ymi,dz:-(zma-zmi)/2};
    //...
  }
  function initMap(v) {
    //...
    //var map={os:[],types:{}};
    
    var map={gridw:20,os:[
        {typ:'templar',x:-8,y:23,z:26-2.5,rot:-PI*0.75},
        {typ:'bane',x:-9,y:23,z:26-2.5,rot:-PI*0.5},
        {typ:'bane',x:-9,y:23,z:27-2.5,rot:-PI*0.5},
      ],types:{
      templar:{c:0,s:40,y:-0.25,ay:PI/2,yw:2,animr:
        [['idle','stand2'],['cidle','cstand'],['turn','runRot'],['cturn','crun']]//'cstand'//'stand2'
        ,party:0},
      bane:{ay:PI,c:37,s:6,party:1,yw:1,tick:deep.tickBane,animr:[['idle','stand'],['turn','run']]}
    }};
    
    if (v.startsWith('{')) {
      var rH={},
          xmi=1000,ymi=1000,zmi=1000,xma=-1000,yma=-1000,zma=-1000;
      //var grid=JSON.parse(v).grid;//
      map=JSON.parse(v);var grid=map.grid;
      for (var k in grid) if (grid.hasOwnProperty(k)) {
        var a=k.split('_'),z=-parseInt(a[0]),y=parseInt(a[1]),x=parseInt(a[2]);
        rH[z+' '+y+' '+x]=[x,y,z];
        xmi=Math.min(xmi,x);ymi=Math.min(ymi,y);zmi=Math.min(zmi,z);
        xma=Math.max(xma,x);yma=Math.max(yma,y);zma=Math.max(zma,z);
      }
      du={rH:rH,xmin:xmi,xmax:xma,ymin:ymi,ymax:yma,zmin:zmi,zmax:zma,
          dx:-(xma-xmi)/2,dy:-ymi,dz:-(zma-zmi)/2};
    } else
      du=dungeonLoad(JSON.parse('['+v+']'));
    
    //onsole.log('deep7.initMap du.dx='+du.dx+' du.dz='+du.dz);
    var rH=du.rH,as=[];
    //deep=new Deep({});//{rH:rH});
    deep.setRH(rH);
    for (var k in rH) if (rH.hasOwnProperty(k)) {
      var a=rH[k],x=a[0],y=a[1],z=a[2];
      if (rH[dkey(x,y-1,z)]) continue;
      as.push(a);
    }
    
    var mos=map.os,types=map.types;
    //console.log(map.os);
    //if (0)
    for (var i=0;i<mos.length;i++) {
      var o=mos[i],typ=types[o.typ];
      if (!typ) { typ=o;types[o.typ]=typ; }
      if (typ.c===undefined) typ.c=0;
      typ.c++;
    }
    if (map.gridos) for (var i=0;i<map.gridos.length;i++) 
      { var go=map.gridos[i];types[go.typ].c=go.count; }
    
    var pc=0,o5i=0,gridw20=(map.gridw==20);
    
    //for (var i=0;i<ua.length;i++) {
    for (var k in types) if (types.hasOwnProperty(k)) {
      var typ=types[k],fn=typ.fn;
      if (!fn) fn='objs/'+k+'/o5.txt';
      typ.party=(k=='templar')?0:1;
      if (typ.ay===undefined) typ.ay=(typ.rotofs||0)+PI/2;
      //onsole.log(k+' '+fn+' '+typ.c);
    Conet.download({k:k,o5i:o5i,fn:threeEnv.path+fn,f:function(v) {
      var k=this.k,u=types[k],oi=-1;//ua[this.i];
      for (var h=0;h<u.c;h++) {
        var lo=Pd5.load(v);
        //onsole.log(lo);
        if (u.animr) for (var i=0;i<u.animr.length;i++) {
          var ar=u.animr[i];lo.animh[ar[0]]=lo.animh[ar[1]];
        }
        //if (u.anim) 
        lo.anim=lo.animh.idle;//[u.anim];
        lo.scale=(u.s?u.s:8)*(gridw20?1:0.5);lo.ay=u.ay;//||u.rotofs||0;
        //Pd5.calc(lo,0,0.0,u.ay||0//u.ay===undefined?PI:0
        //  ,lo.scale,{x:0,y:u.y===undefined?-1:u.y,z:0},0,0,true);
        //Pd5.calcNormals(lo,true);
        ////lo.phong=true;
        lo.noSceneAdd=true;
        lo.noOsAdd=true;
        //lo.animStep=true;
        
        if (k=='bane') {//this.i==1) {
          var j=h%2;
          lo.meshes[0].diff='objs/bane/'+(j==0?'s':(j==1?'d':'n'))+'.jpg';
        }
        
        threeAddObj(lo,0,0,0,0.5);
        //if (this.i==1) bane=lo;
        o5s[this.o5i+h]=lo;
        pc++;
        //console.log(lo);
        
        var m=lo.meshes[0].tmesh;
        m.castShadow=true;
        m.receiveShadow=true;
        var a=as[rand(as.length)];
        var o={x:a[0],y:a[1],z:a[2],eyeh:(gridw20?1:0),viewlen:10,a:PI/4*rand(8)
         ,viewa:2,o5:lo,party:u.party||0//((k=='templar')?0:1)
         ,xw:1,yw:u.yw||(gridw20?2:1),zw:1,v:0.003,da:0,d:0,tick:u.tick,alpha:0};os.push(o);
        
        console.log(k+' '+o.party);
        if (k=='templar') {//this.i==0) {
          o.alpha=1;
          threeEnv.os.push(lo);
          scene.add(m);
          lo.shown=true;
        }
        
        while (oi<mos.length-1) {
          oi++;
          var mo=mos[oi];
          if (mo.typ!=k) continue;
          //console.log('setting o position '+k);
          //o.x=1-mo.x/2;o.y=mo.y/2;o.z=0.5+mo.z/2;
          //if (k!='templar') 
          if (gridw20) 
          {o.x=2.5+mo.z;o.y=mo.y;o.z=0-mo.x; } else
          {o.x=1+mo.z/2;   o.y=mo.y;o.z=0.5-mo.x/2; }
          //o.x=-1.5+mo.z/2;o.y=mo.y;o.z=1.5-mo.x/2; 
          o.a=-mo.rot;//+PI;
          if (mo.s) lo.scale=mo.s*(gridw20?1:0.5);
          break;
        }
        //if (this.i==0) { 
          //console.log(a);
          //o.x=43;o.y=3;o.z=34;o.a=-PI/4; 
          //o.x=26;o.y=23;o.z=8;o.a=PI*0.75;//-PI/4; 
        //}
        //if (this.i==1) { o.x=44;o.y=3;o.z=34;o.a=-PI; }
      }
      if (k=='templar') //this.i==0) 
        mcam.actionf();//camSwitch();
      //checkDoneLoad();
    }
      });
      o5i+=types[k].c;//ua[i].c;
    }
    
    
    animate();
    //---
  }
  function f0(f) {
    return Math.floor(f+0.5);
  }
  function gv(x,y,z) {
    vh0.set((x+du.dx+0.5)*blockw,(y+du.dy+0)*blockw-139,(z+du.dz+0.5)*blockw);
    return vh0;
  }
  function calca(x,y,a) {
    //...
    mh0.makeTranslation(x,y,0);
    mh1.makeRotationY(a);
    //console.log('1 mh0=');
    //onsole.log(mh0);
    mh0.premultiply(mh1);
    //onsole.log('2 mh0=');
    //onsole.log(mh0);
    vh1.setFromMatrixPosition(mh0);
    //---
  }
  function basea(a) {
    while (a>=PI) a-=2*PI;
    while (a<-PI) a+=2*PI;
    return a;
  }
  function init() {
    
    scene = new THREE.Scene();
    renderer = new THREE.WebGLRenderer({antialias:true});
    renderer.setClearColor( 0x888888 );
    renderer.shadowMap.enabled=true;
    renderer.shadowMap.type=THREE.BasicShadowMap;
    //renderer.shadowMap.cullFrontFaces=true;
    //renderer.shadowMap.renderReverseSided=false;
    //renderer.shadowMap.renderSingleSided=false;
    console.log(renderer.shadowMap);
    //				renderer.shadowMapEnabled=true;
    //				renderer.shadowMapType=THREE.PCFShadowMap;//PCFShadowMap;
    
    //renderer.setPixelRatio(0.25);//window.devicePixelRatio);
    renderer.setSize(window.innerWidth,window.innerHeight);
    
    var container=document.getElementById('container'),ms=[];
    container.appendChild(renderer.domElement);
    
    camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,1,2000);
    camera.position.z=500;
    
    var c=controls=new THREE.OrbitControls(camera,renderer.domElement);
    c.enableDamping=true;
    c.dampingFactor=0.25;
    c.enableZoom=true;//c.zoomSpeed=0.3;
    c.enablePan=true;//false;
    c.maxDistance=1000;
    c.rotateSpeed=0.4;
    c.enableKeys=false;
    //c.autoRotate=true;c.autoRotateSpeed=0.1;
    
    
    
    var material=new THREE.MeshPhongMaterial( { 
    color:0x666666, 
    //color: 0x156289,
    //					emissive: 0x072534,
    
    shading: THREE.FlatShading } );
    
    var m0=material;
    var m2=new THREE.MeshPhongMaterial({color:0x777777,shading:THREE.FlatShading });
    var m1=new THREE.MeshPhongMaterial({color:0x77dd77,shading:THREE.FlatShading//77dd77
      ,transparent:true,opacity:0.5,depthWrite:false
      //,depthTest:false//
      //,side:THREE.DoubleSide
      });
    //var m2=new THREE.MeshPhongMaterial({color:0x00dd00,shading:THREE.FlatShading});
    //ms.push(m1);ms.push(m2);ms.push(m0);
    
    threeEnv.path='../shooter/';
    
    var mesh;
    threeSetMeshMaterial(mesh={diff:'objs/mapGen/d10.jpg',spec:'objs/mapGen/s1.jpg',norm:'objs/mapGen/n1.jpg'},{});m2=mesh.material;//m0=
    
    
    //var bw=20;//,sw=15,sw2=(sw-1)/2,bh=bw/2;//20,15
    
    DungeonGeometry.prototype=Object.create( THREE.BufferGeometry.prototype );
    DungeonGeometry.prototype.constructor=DungeonGeometry;
    
    
    //if (1) { box0(-1,0,-1,1,1,1,m1);box0(15,0,-1,1,1,1,m1);
    //         box0(-1,0,15,1,1,1,m1);box0(15,0,15,1,1,1,m1); }
    
    //box(0,-80,0,-50,-100,-50,m1);
    //box(60,-80,0,-50,-100,-50,m1);
    //box(0,-80,60,-50,-100,-50,m1);
    //box(0,-150,0,600,bw,600,m0).castShadow=false;
    
    //addMesh(0,-139,0,new DungeonGeometry(du=generateDungeon()),m1);
    //du=dungeonGenerate();
    //du=dungeonLoad();
    //dum0=addMesh(0,-139,0,new DungeonGeometry(du),m1,0);
    //dum1=addMesh(0,-139,0,new DungeonGeometry(du,true),m2,0);
    dum0=addMesh(0,-139,0,new THREE.BoxBufferGeometry(10,10,10),m1,0);dum0.receiveShadow=false;
    dum1=addMesh(0,-139,0,new THREE.BoxBufferGeometry(10,10,10),m2,0);
    
    var m=box(0,-150,0,600,20,600,m0);m.castShadow=false;//20<->bw
    //m.receiveShadow=false;
    
    var l=new THREE.AmbientLight(0x555555,0.5),f=3;scene.add(l);
    l=new THREE.PointLight(0xffffaa,0.5,0);l.position.set(-100*f,200*f,100*f);scene.add(l);
    l=new THREE.PointLight(0xffffff,1,0);l.position.set(100*f,100*f,100*f);light=l;
    l.castShadow=true;
    l.shadow.camera.near=1;//100
    l.shadow.camera.far=1000;//1000
    l.shadow.mapSize.width=1024;//2048;
    l.shadow.mapSize.height=1024;
    l.shadow.bias=0.01;
    scene.add(l);
    l=new THREE.PointLight(0xaaffff,1,0);l.position.set(100*f,-200*f,-100*f);scene.add(l);
    
    
    stats = new Stats();
    stats.domElement.style.position = 'absolute';
    stats.domElement.style.top = '0px';
    stats.domElement.style.zIndex = 100;
    container.appendChild( stats.domElement );
    
    function camSet(o,onlyTarget) {
      if (!onlyTarget) {
      //mh0.makeTranslation(-5,5,0);
      //mh1.makeRotationY(-o.a);
      ////console.log('1 mh0=');
      ////onsole.log(mh0);
      //mh0.premultiply(mh1);
      ////onsole.log('2 mh0=');
      ////onsole.log(mh0);
      //vh1.setFromMatrixPosition(mh0);
      ////console.log(vh1);
        calca(-5,5,-o.a);
        camera.position.copy(gv(o.x+vh1.x,o.y+vh1.y+o.eyeh+0.5,o.z+vh1.z));//(co.x+du.dx+0.5)*blockw,(co.y+du.dy+0.5)*blockw-139+50,(co.z+du.dz+0.5)*blockw+50);
      }
      controls.target.copy(gv(o.x,o.y+o.eyeh+0.5,o.z));//set((co.x+du.dx+0.5)*blockw,(co.y+du.dy+0.5)*blockw-139,(co.z+du.dz+0.5)*blockw);
      
      //...
    }
    function camSwitch() {
      var p=camera.position,t=controls.target,found=false;
      
      for (var i=0;i<os.length;i++) {
        var o=os[i];
        if (o.party!=0) continue;
        if (cami<i) {
          cami=i;found=true;break;
        }
      }
      
      if (found) {
        camSet(o);
      } else {
        cami=-1;
        p.set(0,360,930);
        t.set(0,0,0);//,'XYZ');
      }
    }
    camSwitch();
    
    Menu.pw=0.15;
    Menu.colBg='rgba(150,150,150,0.7)';
    Menu.init([mcam={s:'Cam',ms:'',msid:'mcam',fs:1.5,actionf:camSwitch}
    
    /*
    ,{s:'Stop',fs:1.5,actionf:function() {
      if (cami==-1) return;
      var o=os[cami];
      o.d=0;//o.da==1?0:1;
      //o.a+=PI/4; 
      //while (o.a>=PI) o.a-=2*PI;
      //while (o.a<-PI) o.a+=2*PI;
      //setView(o);
      ////camSet(o);
      ////onsole.log(o);
    }
    }
    */
    
    ,{s:'Crouch',fs:1.5,actionf:function() {
      
      //du=dungeonGenerate();
      //deep.setRH(du.rH);
      
      toggleCrouch=true;
      //if (cami==-1) return;
      //var o=os[cami];
      //deep.toggleCrouch(o);
      //var o5=o.o5;
      ////Pd5.animStart(o5,o5.animh[o.crouch?'idlec':'idle']);
      ////setView(o);
      //camSet(o,1);
      ////onsole.log(o);
    }
    }
    
    
    
    ,{s:'Version '+version,fs:1.7,ph:0.02,noinp:1},
    
    mleft={s:'\u2190',px:0.02,py:0.02,pw:0.116,ph:0.116,ydown:true,fs:1.4,keys:[65,37]},
    mright={s:'\u2192',px:0.13,py:0.02,pw:0.116,ph:0.116,ydown:true,fs:1.4,keys:[68,39]},
    mfore={s:'\u2191',px:0.075,py:0.13,pw:0.116,ph:0.116,ydown:true,fs:1.4,keys:[87,38]}
    //{s:'\u2193',px:0.02,py:0.13,pw:0.116,ph:0.116,ydown:true,fs:1.4}
    //{s:'\u21d1',px:0.13,py:0.24,pw:0.116,ph:0.116,ydown:true,fs:1.4,actionf:menuArrow},
    //{s:'\u21d3',px:0.02,py:0.24,pw:0.116,ph:0.116,ydown:true,fs:1.4,actionf:menuArrow}
    
    
    ]
    ,{listen:1,diw:850});
    
    var c=window;//renderer.domElement;
    c.addEventListener('resize',function(e) {
      //---
      camera.aspect=window.innerWidth/window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth,window.innerHeight);
      //...
    }
    );//,false);
    c.addEventListener('click',function(e) {
      if (e.detail!=2) return;
      if (cami==-1) return;
      var o=os[cami];
      //---
      var dx=e.pageX-window.innerWidth/2,dy=e.pageY-window.innerHeight/2;
      if ((dx==0)&&(dy==0)) return;
      var l=2*Math.sqrt(dx*dx+dy*dy)/Math.min(window.innerWidth,window.innerHeight);
      var a=Math.atan2(dy,dx);
      var cp=camera.position,ct=controls.target;
      dx=cp.x-ct.x;dy=cp.z-ct.z;
      if ((dx==0)&&(dy==0)) return;
      a+=Math.atan2(dy,dx)-PI/2;
      
      
      //o.a=a;
      
      //while (a>=PI) a-=2*PI;
      //while (a<-PI) a+=2*PI;
      a=basea(a);
      o.adest=a;
      o.d=l>0.6?o.v:0;
      //onsole.log('deep7.click o.d='+o.d);
      //setView(o);
      
      
      //console.log(e);
      //console.log(window.innerWidth+' '+window.innerHeight);
      //Conet.log('click');
    }
    );
    
    //threeEnv.os=os;
    threeEnv.renderer=renderer;
    threeEnv.scene=scene;
    threeEnv.camera=camera;
    
    //animate();
    
    deep=new Deep({});//{rH:rH});
    //----------------------------------------------------
    var fn=
    '../canvas/deep/deep7.txt';
    //'../shooter/maps/gridDeep2.map0.txt';
    //'../shooter/maps/gridDeep1.map0.txt';
    //'../shooter/maps/gridDeep0.map0.txt';
    
    Conet.download({fn:fn,f:initMap});
    //...
  }
  function rand(i) {
    return Math.floor(Math.random()*i);
  }
  //---
  init();
  //---
}
deep7();
</script></body>
</html><script>
//fr o,16
//fr o,16,6
//fr o,16,13
//fr o,16,13,61
//fr o,16,18,101
//fr o,16,18,124
//fr p,18,52
