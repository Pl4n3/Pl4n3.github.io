<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style>
body { color:#000;background-color:#fff;margin:0px;overflow:hidden;font-family:Arial; }
</style>
<script src="/three/r124/build/three.min.js"></script>
<script src="/three/r143/examples/js/libs/stats.min.js"></script>
<script src="/three/r143/examples/js/controls/OrbitControls.js"></script>
<script src="/conet.js"></script>
<script src="/util/deep.js"></script>
<script src="/menu.js"></script>
<script src="/sound.js"></script>

<script src="/vecmath.js"></script>
<script src="/canvas/pd5.js"></script>
<script src="/three/threePd5.js"></script>
</head><body>
<div id="container"></div>
<script>
(function() {
  //---
  // using OrbitControls r143, because r124 doesnt give touch clicks
  // using r124 three.js because o5 still uses geometry
  //---
  let gw=30,bw=28,//---grid width, box width
      camera,controls,scene,renderer,stats,deep,
      m0=new THREE.MeshPhongMaterial({color:0x666666,flatShading:true}),
      matMove=material({color:0x77dd77,opacity:0.7}),
      matAttk=material({color:0xee4444,opacity:0.4}),
      matSel=material({color:0xdddd77,opacity:0.7}),
      unit,marks=[],mmove,munit,raycaster,tweens=[],path,pathi,//meshSel
      maxlen=1,units=[],cursor,ot=Date.now(),firstClick=true,
      turnCount=0,gridSel,tai=600,PI=Math.PI,tweent=300;
  //---
  function ai() {
    //---
    let u=unit;
    
    if (!u.aiMode) {
     
      //--- check for direct attack
      let attack=false;
      for (let u0 of units) {
        if (!canAttack(u,u0)) continue;
        let d=deep.dista(u,u0);
        if (d==1) { attack=true;break; }
        //onsole.log('direct attack d='+d);
      }
      if (attack) {
        u.attack=1;
        u.aiMode='attack';
      } else {
        maxlen=u.maxlen;
        u.aiMode='approach';
      }
      
      showMarks();
      setTimeout(ai,tai);
      return; 
    }
    
    
    
    if (u.aiMode=='approach') {
      let c=0,mindist=Number.MAX_VALUE,gs=[];
      for (let g of Object.values(deep.rH)) {
        if (g.len) {
          c++;
          for (let u0 of units) {
            if (!canAttack(u,u0)) continue;
            let d=deep.dista(g,u0);
            if (d<mindist) {
              mindist=d;
              gs.length=0;
            }
            if (d==mindist) {
              let skip=false;
              if (gs.length>0) {
                let g0=gs[0];
                if (g0.len>g.len) { gs.length=0; }
                else if (g0.len<g.len) skip=true;
              } 
              if (!skip) gs.push(g);
            }
          }
          //console.log(v);
          //marks.push(m=box(v.x*30,v.y*30,v.z*30,28,28,28,matMove));
          //m.userData.g=v;
          //m.castShadow=false;m.receiveShadow=false;
        }
      }
      if (gs.length==0) { 
        //console.error('approach gs.len=0');
        delete(u.aiMode);u.maxlen=1;checkNextUnit();return; }
      let g=gs[Conet.rani(gs.length)];
      u.aiMode='approachDone';
      clickGrid(g);
      //tweenClick(g);
      //console.log(gs);
      //console.log('c='+c);
    
    
      //delete(u.aiMode);
      //u.maxlen=1;
      //checkNextUnit();
      return;
    }
    
    if (u.aiMode=='approachDone') {
      if (u.maxlen>=3) {
        u.attack=1;
        u.aiMode='attack';
        showMarks();
        setTimeout(ai,tai);
        return;
      }
    
      //--nao if maxlen>=3 attack
      delete(u.aiMode);
      u.maxlen=1;
      checkNextUnit();
      return;
    }
    
    
    if (u.aiMode=='attack') {
      let gs=[];
      for (let m of marks) {
        let g=m.userData.g;
        if (g.os&&g.os.length>0) {
          let u1=g.os[0];
          if (canAttack(u,u1)) {
            gs.push(g);
          }
        }
      }
      //console.log(
      if (gs.length==0) { 
        //---wenn nahest moegliche position am gegner
        //---diesen nicht erreicht aber auch nicht 
        //---maxlen ausgenutzt wird (locales minimum)
        //console.error('attack gs.len=0');
        delete(u.aiMode);u.maxlen=1;checkNextUnit();return; 
        //u.aiMode='attackDone';ai();return;
      }
    
      let g=gs[Conet.rani(gs.length)];
      u.aiMode='attackDone';
      clickGrid(g);
      
      //delete(u.aiMode);
      //u.maxlen=1;
      //checkNextUnit();
      return;
    }
    
    if (u.aiMode=='attackDone') {
      if (u.maxlen==1) { delete(u.aiMode);checkNextUnit();return; }
      u.attack=false;
      maxlen=u.maxlen;
      showMarks();
      u.aiMode='evade';
      setTimeout(ai,tai);
      return;
    }
    
    if (u.aiMode=='evade') {
    
      let c=0,maxdist=0,gs=[];
      for (let g of Object.values(deep.rH)) {
        if (!g.len) continue;
        c++;
        let nearest=Number.MAX_VALUE;
        for (let u0 of units) {
          if (!canAttack(u,u0)) continue;
          let d=deep.dista(g,u0);
          if (d<nearest) nearest=d;
        }
        if (nearest>maxdist) {
          maxdist=nearest;
          gs.length=0;
        }
        if (nearest==maxdist) gs.push(g);        
      }
      let g=gs[Conet.rani(gs.length)];
      u.aiMode='evadeDone';
      clickGrid(g);
      return;
    }
    
    if (u.aiMode=='evadeDone') {
      delete(u.aiMode);
      u.maxlen=1;
      checkNextUnit();
      return;
    }
    
    //onsole.log('unknown aiMode: '+u.aiMode;);
    
    //...
  }
  function animate() {
    requestAnimationFrame( animate );
    if (controls) controls.update(); // required if controls.enableDamping = true, or if controls.autoRotate = true
    stats.update();
    
    //--
    let t=Date.now(),dt=Math.min(100,(t-ot));ot=t;
    Conet.calcTweens(tweens,dt);
    
    threeRender(dt);
    
    renderer.render(scene,camera);
  }
  function bbdraw(bb) {
    //--- -
    //onsole.log('boxScales.bbdraw');
    //var ct=bb.ct;
    //console.log(bb);
    
    var c=bb.c,w=c.width,h=c.height*bb.ar,ct=bb.ct,//c.getContext('2d');
        bo=bb.o;//undefined;
    
    ct.clearRect(0,0,w,h);
    //ct.fillStyle=(bo?.hitt===undefined)?'rgba(0,0,0,0.5)':'#f00';
    ct.fillStyle='rgba(0,0,0,0.5)';
    ct.fillRect(0,0,w,h);//p.c=c;p.ct=ct;
    
    
    var h2=h,b=w/40;
    var f=bo.hp/bo.ohp;
    ct.fillStyle='#0f0';
    ct.fillRect(b,b+h-h2,(w-2*b)*f,h2-2*b);
    ct.fillStyle='#f00';
    ct.fillRect(b+(w-2*b)*f,b+h-h2,(w-2*b)*(1-f),h2-2*b);
    
    bb.threeTex.needsUpdate=true;
    //...
  }
  function box(x,y,z,w,h,b,m) {
    mesh=new THREE.Mesh(new THREE.BoxGeometry(w,h,b),m);
    mesh.position.set(x,y,z);
    mesh.updateMatrix();
    //mesh.matrixAutoUpdate=false;
    mesh.castShadow=true;
    mesh.receiveShadow=true;
    scene.add(mesh);
    return mesh;
  }
  function canAttack(u0,u1) {
    //---
    if ((u0===u1)||(u1.hp==0)||(u0.name==u1.name)) return false;
    return true;
    //...
  }
  function checkNextUnit() {
    //---
    let i=units.indexOf(unit);
    //onsole.log('checkNextUnit i0='+i);
    
    
    if (unit.maxlen<=1) {
      for (let u of units) if ((u.maxlen>1)&&(u.hp>0)) {
        unit=u;placeCursor();
        break;
      }
    }
    
    //onsole.log('checkNextUnit i1='+units.indexOf(unit));
    
    if (unit.maxlen<=1) turn(); else {
      maxlen=unit.maxlen;
      showMarks();
    }
    
    //onsole.log('checkNextUnit i2='+units.indexOf(unit));
    
    
    if (unit.ai) ai();
    //...
  }
  function click(e) {
    //onsole.log('click');
    
    //---
    if (firstClick) {
      Sound.preload('/sound/plastic.wav');
      firstClick=false;
    }
    
    if (path) { 
      //onsole.log('No clicks during path animation allowed.');
      return; }
    if (unit.ai) { 
      //onsole.log('No clicks during ai allowed.');
      return; }
    
    let click=new THREE.Vector2(2*e.clientX/window.innerWidth-1,-2*e.clientY/window.innerHeight+1);
    raycaster.setFromCamera(click,camera);
    let a=raycaster.intersectObjects(scene.children);
    loop1: for (let v of a) {
      let m=v.object;
      //for (let u of units) if (m===u.meshes[0]) {
        //unit=u;maxlen=unit.maxlen;
        ////u.hp--;bbdraw(u.bb);
        //placeCursor();
        //console.log('unit clicked');
        //
        ////maxlen++;if (maxlen==7) maxlen=2;
        //showMarks();
        //break loop1;
      //}
      let i=marks.indexOf(m);
      if (i!=-1) {
        let g=m.userData.g;
        clickGrid(g);
        break;
      }
    }
    //onet.log('click count:'+a.length+(a.length>0?' index0:'+scene.children.indexOf(a[0].object):''));
    
    //...
  }
  function clickGrid(g) {
    //---
    tweenClick(g);
    if (unit.attack) {
      //onsole.log(g);
      let u1=(g.os&&(g.os.length>0))?g.os[0]:undefined;
      //onsole.log(u1);
      if (u1&&(u1!==unit)) {
        //onsole.log(u1);
        let nhp=Math.max(0,u1.hp-unit.ap);
        Conet.log(unit.name+' attacks '+u1.name+' ('+u1.hp+' -> '+nhp+' hp)');
        u1.hp=nhp;bbdraw(u1.bb);
        unit.maxlen-=2;
        if (unit.o5) {
          tweenDirection(unit,u1);
          Pd5.animStart(unit.o5,unit.t.attack);
          Pd5.animStart(u1.o5,u1.t.hit);
    setTimeout(function() {
      Pd5.animStart(unit.o5,unit.t.idle);
      Pd5.animStart(u1.o5,u1.hp>0?u1.t.idle:u1.t.lost);
    }
    ,500);
        }
        //if (u1.o5) Pd5.animStart(unit.o5,unit.t.attack);
        if (unit.ai) setTimeout(ai,tai); else {
          if (unit.maxlen<3) unit.attack=false;
          showMarks();
          checkNextUnit();
        }
      }
      return;
    }
    ////onsole.log('marks i='+i);
    //---if (meshSel) meshSel.material=matMove;
    //---m.material=matSel;meshSel=m;//console.log(m);
    gridSel=g;
    if (1) //---quickwalk
      pathStart(); 
    else {
    //let t=300;
    //tweens.push({t:t,value0:0,value:1,o:m.scale,key:'x'});
    //tweens.push({t:t,value0:0,value:1,o:m.scale,key:'y'});
    //tweens.push({t:t,value0:0,value:1,o:m.scale,key:'z'});
    mmove.noinp=undefined;
    Menu.remove();
    Menu.draw();
    }
    //...
  }
  function init() {
    
    //all r143
    //script src="https://threejs.org/build/three.min.js">/script>  //r124
    //script src="https://threejs.org/examples/js/libs/stats.min.js">/script> //r109
    //script src="https://threejs.org/examples/js/controls/OrbitControls.js">/script>  //v81
    
    function resize() {
      camera.aspect=window.innerWidth/window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth,window.innerHeight);
    }
    
    //Sound.preload('/sound/plastic.wav');
    
    /* scene */ {
      
      scene = new THREE.Scene();
      renderer = new THREE.WebGLRenderer({antialias:true});
      renderer.setClearColor( 0x888888 );
      renderer.shadowMap.enabled=true;
      renderer.shadowMap.type=THREE.BasicShadowMap;
      //renderer.outputEncoding=THREE.sRGBEncoding;
      //				renderer.shadowMapEnabled=true;
      //				renderer.shadowMapType=THREE.PCFShadowMap;//PCFShadowMap;
      
      renderer.setPixelRatio( window.devicePixelRatio );
      renderer.setSize( window.innerWidth, window.innerHeight );
      
      var container=document.body//document.getElementById('container')
        ,ms=[];
      container.appendChild( renderer.domElement );
      
      camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,1,1000);
      camera.position.z=500;
      
      
      
      if (1) {
      controls=new THREE.OrbitControls(camera,renderer.domElement);
      //controls.enableDamping=true;
      //controls.dampingFactor=0.25;
      controls.enableZoom=true;
      controls.enablePan=true;
      controls.maxDistance=600;
      //controls.rotateSpeed=0.4;
      }
      
      
      //var bw=20;//,sw=15,sw2=(sw-1)/2,bh=bw/2;//20,15
      
      
      //if (1) { box0(-1,0,-1,1,1,1,m1);box0(15,0,-1,1,1,1,m1);
      //         box0(-1,0,15,1,1,1,m1);box0(15,0,15,1,1,1,m1); }
      
      //box(0-200,-80,0,50,100,50,m1);
      //box(60-200,-80,0,50,100,50,m1);
      //box(0-200,-80,60,50,100,50,m1);
      
      box(0,-150,0,600,20,600,m0).castShadow=false;
      
      //unit={name:'Ungo',fly:1,xw:1,yw:1,zw:1,x:-2,y:2,z:1};let u=unit;
      //let unitBox=box(u.x*30,u.y*30,u.z*30,28,28,28,material({color:0x7777dd}));
      
      let o=new THREE.Group();cursor=o;
      o.position.set(0,4*30,0);
      let osc=scene;scene=o;
      box(0,-14.5,0,28,4,28,material({color:0xffff00}));
      //box(0,14.5,0,28,4,28,material({color:0xffff00}));
      scene=osc;
      scene.add(o);
      
      
      var l=new THREE.AmbientLight(0x555555),f=3;scene.add(l);
      l=new THREE.PointLight(0xffffff,1,0);l.position.set(-100*f,200*f,100*f);scene.add(l);
      l=new THREE.PointLight(0xffffaa,1,0);l.position.set(100*f,100*f,100*f);
      l.castShadow=true;
      l.shadow.camera.near=100;
      l.shadow.camera.far=1000;
      l.shadow.mapSize.width=1024;//2048;
      l.shadow.mapSize.height=1024;
      scene.add(l);
      l=new THREE.PointLight(0xaaffff,1,0);l.position.set(100*f,-200*f,-100*f);scene.add(l);
      
      
      stats = new Stats();
      stats.domElement.style.position = 'absolute';
      stats.domElement.style.top = '0px';
      stats.domElement.style.zIndex = 100;
      container.appendChild(stats.domElement);
      
      window.addEventListener('resize',resize,false);
      
      raycaster=new THREE.Raycaster();
      window.addEventListener('click',click,false);
      
      threeEnv.base=scene;//scene;
      threeEnv.scene=scene;
      threeEnv.path='/shooter/';
      threeEnv.coBoSp=1;//computeBoundingSphere
      threeEnv.camera=camera;
      //threeEnv.bbquat=controls.quat;
      
      
      //var psbb=ps.bb,oyw=1,psh={},pos=boxMesh.position;
      //var bb=threeBillboardAdd({
      //  x:pos.x+(psbb.x||0),y:pos.y+(psbb.y||0),z:pos.z+(psbb.z||0),
      //  ar:psbb.ar||0.2,s:0.1*(1+(oyw-1)*2),transparent:psh.bbtransp,gw:psbb.gw||30,cw:128});
      //bb.o={bbdraw:bbdraw,ps:psbb,mesh:boxMesh};
      //boxMesh.userData.bb=bb;
      
      //let bb=threeBillboardAdd({x:0,y:150,z:0,ar:0.2,s:10,transparent:1,gw:30,cw:128,_o:{}});
      
      
    }
    
    /* deep */ {
      //---
      
      deep=new Deep({rH:{}});
      //deep.moveUpdown=false;
      let d=4;
      for (let x=-d;x<=d;x++) for (let y=-d;y<d;y++)for (let z=-d;z<=d;z++)
        deep.getR(z,y,x,1);
      
      
      units.push(
      {name:'Bee',fly:1,xw:1,yw:1,zw:1,x:-3,y:2,z:1,maxlen:6,hp:2 ,ap:1,ai:1},//x:-3
      {name:'Bee',fly:1,xw:1,yw:1,zw:1,x:-2,y:2,z:1,maxlen:6,hp:2 ,ap:1,ai:1},
      {name:'Dude',     xw:1,yw:2,zw:1,x:4,y:1,z:1 ,maxlen:4,hp:10,ap:1}
      );
      unit=units[0];
      //unit.attack=1;
      
      //let unitBox=box(u.x*30,u.y*30,u.z*30,28,28,28,material({color:0x7777dd}));
      
      
      //let u=unit;
      //deep.getR(u.z,u.y,u.x).os=[unit];
      //deep.placeGrid(u,1);
      //for (let y=-d;y<=d;y++) for (let z=-d;z<=d;z++) deep.getR(z,y,2).block=1;
      //deep.getR(0,1,2).block=undefined;
      for (let u of units) { u.omaxlen=u.maxlen;u.ohp=u.hp;placeUnit(u); }
      
      //showMarks();
      
      Conet.download({fn:'/three/anim/voxed/flightRooms.json',f:function(v) {
        //---
        let d=JSON.parse(v);
        //onsole.log(d);
        for (let v of d.voxels) {
          deep.getR(v.z,v.y,v.x).block=1;
          
          let m=box(v.x*30,v.y*30,v.z*30,28,28,28,material({
            transparent:false,
            color:0x777777}));
          m.matrixAutoUpdate=false;
          
        }
        //maxlen=unit.maxlen;
        //showMarks();
        checkNextUnit();
        
        //let bb=threeBillboardAdd({x:0,y:150,z:0,ar:0.2,s:3,transparent:1,gw:30,cw:128,_o:{}});
        
        //for (let u of units) {
        //  u.bbdraw=bbdraw;
        //  u.bb=threeBillboardAdd({x:u.x*gw,y:(u.y+u.yw)*gw,z:u.z*gw,ar:0.2,s:1,transparent:1,gw:20,cw:128,o:u});
        //}
        
        let a=[
        {name:'Dude',fn:'/shooter/objs/templar/o5.txt',idle:'stand2',move:'run',attack:'attack2',hit:'hit',lost:'lost',sc:70,da:PI/2},
        {name:'Bee' ,fn:'/shooter/objs/bane/o5.txt'   ,idle:'stand' ,move:'run',attack:'attack' ,hit:'hit',lost:'lost',sc:8,da:PI}
        ];
        let ts={};
        for (let t of a) ts[t.name]=t;
        
        Conet.load({a:a,onAll:function() {
          //---
          //onsole.log('all loaded');
          
          for (let u of units) {
            let t=ts[u.name];u.t=t;
            var o=Pd5.load(t.v);
            //onsole.log(o);
            o.scale=1;
            Pd5.animStart(o,t.idle);
            //Pd5.calc(o,0,0.0,0,1,{x:0,y:0,z:0},0,0,true);
            threeAddObj(o,u.x*gw,(u.y-0.5)*gw,u.z*gw,t.sc);
            u.o5=o;
          
            if (!u.meshes) {
            let m=o.meshes[0].tmesh;
            threeEnv.base=m;
            u.bbdraw=bbdraw;
            u.bb=threeBillboardAdd({x:0,y:(0.0+u.yw)*gw/t.sc,z:0,ar:0.2,s:1/t.sc,transparent:1,gw:20,cw:128,o:u});
            threeEnv.base=scene;
            }
          
          }
          
          //...
        }
        });
        
        
        
        
        
        //...
      }
      });
      
      //onsole.log(deep.rH);
      //...
    }
    
    /* menu */ {
      
      
      let mplus={s:'move+',actionf:function() {
        //---
        if (unit.ai||path) return;
        if (maxlen<unit.maxlen) maxlen++;
        showMarks();
        //...
      }
      },
      mminus={s:'move-',actionf:function() {
        //---
        if (unit.ai||path) return;
        if (maxlen>2) maxlen--;
        showMarks();
        //...
      }
      };
      
      
      Menu.init([
      {s:'&#9776;',noTri:true,fs:1.4,pw:0.05,sub:[
      
      Menu.mFullscreen
      
      
      ]},
      
      munit={s:'Unit',ms:'3 actions',msid:'actions',noinp:1},
      
      //mplus,mminus,
      
      mmove={s:'Move',ms:'',msid:'movesteps',actionf:function() {
        //pathStart();
        if (unit.ai||path) return;
        unit.attack=false;
        maxlen=unit.maxlen;
        showMarks();
        //...
      }
      },
      
      {s:'Attack',ms:'cost:2 actions',actionf:function() {
        //---
        if (unit.ai||path) return;
        unit.attack=true;//!unit.attack;
        showMarks();
        //onsole.log('attack marks nao.');
        //...
      }
      },
      
      {s:'Next unit',actionf:function() {
        if (unit.ai||path) return;
        unit.maxlen=1;
        checkNextUnit();
        //...
      }
      }
      
      ],{listen:1});
      Menu.draw();
      
      //...
    }
    
    animate();
    //---
  }
  function material(ps) {
    return new THREE.MeshPhongMaterial({color:ps.color,flatShading:true,
          transparent:ps.transparent!==undefined?ps.transparent:true,opacity:ps.opacity||0.7});
    //...
  }
  function showMarks() {
    //---
    let u=unit,m;
    
    Menu.ms(munit,'has '+(unit.maxlen-1)+' actions');
    if (maxlen>unit.maxlen) maxlen=unit.maxlen;
    Menu.ms(mmove,'cost:'+((u.fly||(maxlen<=2))?'':'up to ')+(maxlen-1)+' actions');
    
    for (let m of marks) scene.remove(m);marks.length=0;
    deep.lenInit();
    
    //if (meshSel) { 
    //  meshSel=undefined;
    //  //mmove.noinp=1; 
    //}
    
    if (unit.attack) {
      //onsole.log('show attackmarks nao');
      if (unit.maxlen>=3) {
      for (let x=u.x-1;x<=u.x+u.xw;x++)
      for (let y=u.y-1;y<=u.y+u.yw;y++)
      for (let z=u.z-1;z<=u.z+u.zw;z++) {
        let d=
          (x<u.x?(u.x-x):((x>u.x+u.xw-1)?x-u.x-u.xw+1:0))+
          (y<u.y?(u.y-y):((y>u.y+u.yw-1)?y-u.y-u.yw+1:0))+
          (z<u.z?(u.z-z):((z>u.z+u.zw-1)?z-u.z-u.zw+1:0));   
        if (d>1) continue;
        let g=deep.getR(z,y,x);
        if (!g) continue;
        if (g.block) continue;
        if (g.os&&(g.os.length>0)&&(g.os[0]===unit)) continue;
        marks.push(m=box(x*30,y*30,z*30,28,28,28,matAttk));
        m.userData.g=g;
        //onsole.log(g);
      }
      }
      //Menu.ms(mmove,'');
      return;
    }
    
    deep.maxlen=maxlen;//console.log(deep.maxlen);
    
    if (maxlen>1) {
    let r=deep.calcLen(u.x,u.y,u.z,0,u);
    
    //console.log(deep.rH);
    //onsole.log(r);
    //deep.getR(0,0,0,1);
    for (let v of Object.values(deep.rH)) {
      if ((v.len==deep.maxlen-1)||(!u.fly&&v.len)) {
        //console.log(v);
        marks.push(m=box(v.x*30,v.y*30,v.z*30,28,28,28,matMove));
        m.userData.g=v;
        //m.castShadow=false;m.receiveShadow=false;
      }
    }
    }
    //Menu.ms(mmove,'cost:'+(maxlen-1)+' actions');
    //...
  }
  function pathStart() {
    //---
    //onet.log('Move nao');
    //onsole.log(meshSel.userData);
    
    //onsole.log('unit=');
    //onsole.log(unit);
    //onsole.log('g=');
    //onsole.log(meshSel.userData.g);
    let u=unit,pa=deep.pathStart(
      gridSel//meshSel.userData.g
      ,unit);
    //onsole.log(pa);
    
    for (let m of marks) scene.remove(m);marks.length=0;
    //let mat=material({color:0x77dd77,opacity:0.4});
    for (let i=1;i<pa.length;i++) {
      let v=pa[i];
      marks.push(box(v.x*30,v.y*30,v.z*30,28,28,28,matMove));
    }
    
    if (u.o5) Pd5.animStart(u.o5,u.t.move);
    
    path=pa;pathi=0;
    tweenPath();
    //let t=1000,vl=pa[1],m=unit.meshes[0];
    //tweens.push({t:t,value:vl.x*30,o:m.position,key:'x'});
    //tweens.push({t:t,value:vl.y*30,o:m.position,key:'y'});
    //tweens.push({t:t,value:vl.z*30,o:m.position,key:'z'});
    
    
    //placeUnit(unit,meshSel.userData.g);maxlen=2;
    //showMarks();
    //...
  }
  function placeCursor() {
    //---
    let u=unit;
    if (cursor.children.length>1) cursor.children[1].position.y=14.5+(u.yw-1)*30;
    cursor.position.set(u.x*30,u.y*30,u.z*30);
    //...
  }
  function placeUnit(u,g) {
    //---
    if (g) {
      deep.placeGrid(u,false);
      u.x=g.x;u.y=g.y;u.z=g.z;
      //for (let m of u.meshes) scene.remove(m);u.meshes.length=0;
    }
    if (0&&!u.meshes) {
      let b=4,m=box(u.x*30,u.y*30+(u.yw-1)*30/2,u.z*30,28-b,28-b+(u.yw-1)*30,28-b,material({color:0x7777dd}));u.meshes=[m];
      threeEnv.base=m;
      u.bbdraw=bbdraw;
      u.bb=threeBillboardAdd({x:0,y:(0.3+u.yw/2)*gw,z:0,ar:0.2,s:1,transparent:1,gw:20,cw:128,o:u});
      threeEnv.base=scene;
    }
    deep.placeGrid(u,true);
    if (u===unit) placeCursor();
    //...
  }
  function tweenClick(g) {
    //---
    let t=300,mn=box(g.x*gw,g.y*gw,g.z*gw,bw,bw,bw,material({color:0xffffff,transparent:false}));
    tweens.push({t:t,value0:1,value:0,o:mn.scale,key:'x'});
    tweens.push({t:t,value0:1,value:0,o:mn.scale,key:'y'});
    tweens.push({t:t,value0:1,value:0,o:mn.scale,key:'z',onend:function() {
      scene.remove(mn);
    }
    });
    Sound.play('/sound/plastic.wav');
    
    //...
  }
  function tweenDirection(vp,vl) {
    //--
    let t=tweent,u=unit,dx=vl.x-vp.x,dz=vl.z-vp.z;
    if ((dx!=0)||(dz!=0)) {
      let a=u.t.da-Math.atan2(dz,dx);
      //u.o5.ay=a;//Math.random()*Math.PI;
      u.o5.ay=u.o5.ay||0;
      let da=Conet.dAng(a,u.o5.ay);
      //onsole.log(da);
      //u.o5.ay+=da;
      tweens.push({t:t,value:u.o5.ay+da,o:u.o5,key:'ay'});
    }
    //...
  }
  function tweenPath() {
    //---
    //ound.play('/sound/plastic.wav');
    let u=unit;
    pathi++;
    if (pathi==path.length) {
      placeUnit(unit,path[path.length-1]);
      unit.maxlen-=path.length-1;
      path=undefined;
      if (u.o5) Pd5.animStart(u.o5,u.t.idle);
      if (unit.ai) ai(); else checkNextUnit();
      return;
    }
    let t=tweent,vl=path[pathi];
    if (u.meshes) {
    let o=unit.meshes[0].position;
    tweens.push({t:t,value:vl.x*gw,o:o,key:'x'});
    tweens.push({t:t,value:vl.y*gw+(u.yw-1)*30/2,o:o,key:'y'});
    tweens.push({t:t,value:vl.z*gw,o:o,key:'z',onend:tweenPath});
    }
    if (u.o5) {
    let o=u.o5.meshes[0].tmesh.position;
    //u.o5.ay=Math.random()*Math.PI;
    
    let vp=path[pathi-1];
    tweenDirection(vp,vl);
    //let dx=vl.x-vp.x,dz=vl.z-vp.z;
    //if ((dx!=0)||(dz!=0)) {
    //  let a=u.t.da-Math.atan2(dz,dx);
    //  //u.o5.ay=a;//Math.random()*Math.PI;
    //  u.o5.ay=u.o5.ay||0;
    //  let da=Conet.dAng(a,u.o5.ay);
    //  //onsole.log(da);
    //  //u.o5.ay+=da;
    //  tweens.push({t:t,value:u.o5.ay+da,o:u.o5,key:'ay'});
    //}
    
    tweens.push({t:t,value:vl.x*gw      ,o:o,key:'x'});
    tweens.push({t:t,value:(vl.y-0.5)*gw,o:o,key:'y'});
    tweens.push({t:t,value:vl.z*gw      ,o:o,key:'z',onend:u.meshes?undefined:tweenPath});
    }
    
    //...
  }
  function turn() {
    //---
    turnCount++;Conet.log(turnCount+' turns');
    unit=undefined;
    for (let u of units) { 
      if (u.hp==0) continue;
      u.maxlen=u.omaxlen;u.attack=false; 
      if (unit===undefined) unit=u;
    }
    //unit=units[0];
    placeCursor();
    maxlen=unit.maxlen;
    showMarks();
    //...
  }
  
  init();
  
  //...
}
)();
</script></body>
</html><script>
//fr o,20
//fr o,20,21,16
//fr o,20,22
//fr o,20,22,10
//fr o,20,22,12
//fr o,20,22,12,29
//fr o,20,22,12,29,30
//fr o,20,22,14,20
//fr o,20,22,14,23
//fr o,20,22,14,26
//fr o,20,28,4
//fr p,36,234
