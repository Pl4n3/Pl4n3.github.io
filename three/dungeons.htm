<!DOCTYPE html><html lang="en"><head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style>
body { color: #000;background-color: #fff;margin: 0px;overflow: hidden; }
</style>
<script src="https://threejs.org/build/three.min.js"></script>
<script src="https://threejs.org/examples/js/libs/stats.min.js"></script>
<script src="https://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script src="../menu.js"></script>
</head><body>
<div id="container"></div>
<script>
function dungeons() {
  var camera,controls,scene,renderer,stats,mcam,ot=Date.now(),th=0;
  
  scene = new THREE.Scene();
  renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setClearColor( 0x888888 );
  renderer.shadowMap.enabled=true;
  renderer.shadowMap.type=THREE.BasicShadowMap;
  //				renderer.shadowMapEnabled=true;
  //				renderer.shadowMapType=THREE.PCFShadowMap;//PCFShadowMap;
  
  //renderer.setPixelRatio(window.devicePixelRatio);
  renderer.setSize( window.innerWidth, window.innerHeight );
  
  var container = document.getElementById('container'),ms=[];
  container.appendChild( renderer.domElement );
  
  camera=new THREE.PerspectiveCamera(60,window.innerWidth/window.innerHeight,1,2000);
  camera.position.z=500;
  
  var c=controls=new THREE.OrbitControls(camera,renderer.domElement);
  c.enableDamping=true;
  c.dampingFactor=0.25;
  c.enableZoom=true;
  c.enablePan=true;//false;
  c.maxDistance=1000;
  c.rotateSpeed=0.4;
  c.autoRotate=true;c.autoRotateSpeed=1;
  
  
  
  var material=new THREE.MeshPhongMaterial( { 
  color:0x666666, 
  //color: 0x156289,
  //					emissive: 0x072534,
  
  shading: THREE.FlatShading } );
  
  var m0=material;
  var m1=new THREE.MeshPhongMaterial({color:0x77dd77,shading:THREE.FlatShading
    ,transparent:true
    ,opacity:0.5
    //,depthTest:false//
    ,depthWrite:false
    //,side:THREE.DoubleSide
    });
  //var m2=new THREE.MeshPhongMaterial({color:0x00dd00,shading:THREE.FlatShading});
  //ms.push(m1);ms.push(m2);ms.push(m0);
  
  
  var bw=20;//,sw=15,sw2=(sw-1)/2,bh=bw/2;//20,15
  
  function addMesh(x,y,z,g,m) {
    var mesh=new THREE.Mesh(g,m);
    mesh.position.set(x,y,z);
    mesh.updateMatrix();
    mesh.matrixAutoUpdate = false;
    mesh.castShadow=true;
    mesh.receiveShadow=true;
    scene.add(mesh);
    return mesh;
    //...
  }
  function box(x,y,z,w,h,b,m) {
    //mesh=new THREE.Mesh(new THREE.BoxGeometry(w,h,b),m);
    //mesh.position.set(x,y,z);
    //mesh.updateMatrix();
    //mesh.matrixAutoUpdate = false;
    //mesh.castShadow=true;
    //mesh.receiveShadow=true;
    //scene.add(mesh);
    //return mesh;
    return addMesh(x,y,z,new THREE.BoxGeometry(w,h,b),m);
  }
  function rand(i) {
    return Math.floor(Math.random()*i);
  }
  function f0(f) {
    return Math.floor(f+0.5);
  }
  
  function generateDungeon() {
    //----copied from w3dit.generateDungeon
    var xmin=0,ymin=0,zmin=0,xmax=50,ymax=50,zmax=50,
        rH={},//xmax:xmax,ymax:ymax,zmax:zmax,xw:3,yw:2,zw:2};
        xmi=1000,ymi=1000,zmi=1000,xma=-1000,yma=-1000,zma=-1000,
        gs=[
          {xp:25,yp:25,zp:25,xw:2,yw:3,zw:2,dir:1}
          //{xp:15,yp:25,zp:25,xw:2,yw:3,zw:2,dir:1}
          ////,{xp:15,yp:30,zp:25,xw:1,yw:1,zw:1,dir:1}
        ];
    //for (var c=0;c<500;c++) {
    var newg=0,nxw,nyw,nzw;
    
    while (gs.length>0) {
      for (var gi=gs.length-1;gi>=0;gi--) {
        var g=gs[gi];
        var stop=false;
        for (var z=g.zp;z<g.zp+g.zw;z++) for (var y=g.yp;y<g.yp+g.yw;y++) for (var x=g.xp;x<g.xp+g.xw;x++) {
          var k=z+' '+y+' '+x;
          if (rH[k]) stop=true;
          rH[k]=[x,y,z];
          xmi=Math.min(xmi,x);ymi=Math.min(ymi,y);zmi=Math.min(zmi,z);
          xma=Math.max(xma,x);yma=Math.max(yma,y);zma=Math.max(zma,z);
        }
        if (!stop) {
        if (Math.random()<0.2) g.dir=rand(6);//Math.floor(Math.random()*6);
        if (Math.random()<0.15) {
          var newdir=rand(6);//Math.floor(Math.random()*2);
          nxw=1+rand(3);nyw=1+rand(3);nzw=1+rand(3);
          var ng={xp:g.xp,yp:g.yp,zp:g.zp,xw:nxw,yw:nyw,zw:nzw,dir:newdir};
    switch (newdir) {
      case 0:ng.xp-=ng.xw;break;
      case 1:ng.xp+=g.xw;break;
      case 2:ng.yp-=ng.yw;break;
      case 3:ng.yp+=g.yw;break;
      case 4:ng.zp-=ng.zw;break;
      case 5:ng.zp+=g.zw;break;
    }
          gs.push(ng);
        } //else newg=0;
    switch (g.dir) {
      case 0:if (g.xp-g.xw<=0) stop=true; else g.xp-=g.xw;break;
      case 1:
        if (g.xp+g.xw>=xmax) { stop=true;break; }
        g.xp+=g.xw;
        break;
      case 2:if (g.yp-g.yw<=0) stop=true; else g.yp-=g.yw;break;
      case 3:if (g.yp+g.yw>=ymax) stop=true; else g.yp+=g.yw;break;
      case 4:if (g.zp-g.zw<=0) stop=true; else g.zp-=g.zw;break;
      case 5:if (g.zp+g.zw>=zmax) stop=true; else g.zp+=g.zw;break;
    }
        }
        if (stop) gs.splice(gi,1);
      }
    }
    //dungeonH=rH;
    
    //onsole.log('generateDungeon '+xmi+'-'+xma+', '+ymi+'-'+yma+', '+zmi+'-'+zma);
    //console.log(rH);
    
    return {rH:rH,xmin:xmi,xmax:xma,ymin:ymi,ymax:yma,zmin:zmi,zmax:zma};
    //...
  }
  function dungeonLoad() {
    
    var a=function() {
      return [
      
      [15,0,0,3],
      [15,1,0,3],
      [15,2,0,3],
      [15,3,0,3],
      [15,4,0,3],
      [15,5,0,3],
      [15,6,0,3],
      [35,6,0,2],
      [15,7,0,3],
      [35,7,0,2],
      [15,8,0,3],
      [35,8,0,2],
      [15,9,0,3],
      [15,10,0,3],
      [15,11,0,3],
      [15,12,0,3],
      [15,13,0,3],
      [15,14,0,3],
      [15,15,0,3],
      [23,15,0,1],
      [15,16,0,3],
      [23,16,0,1],
      [15,17,0,3],
      [23,17,0,1],
      [15,0,1,3],
      [15,1,1,3],
      [15,2,1,3],
      [15,3,1,3],
      [15,4,1,3],
      [15,5,1,3],
      [15,6,1,3],
      [35,6,1,2],
      [15,7,1,3],
      [35,7,1,2],
      [15,8,1,3],
      [35,8,1,2],
      [15,9,1,3],
      [15,10,1,3],
      [15,11,1,3],
      [15,12,1,3],
      [15,13,1,3],
      [15,14,1,3],
      [15,15,1,3],
      [23,15,1,1],
      [15,16,1,3],
      [23,16,1,1],
      [15,17,1,3],
      [23,17,1,1],
      [35,6,2,2],
      [35,7,2,2],
      [35,8,2,2],
      [23,15,2,1],
      [15,16,2,3],
      [23,16,2,1],
      [15,17,2,3],
      [23,17,2,1],
      [10,22,2,9],
      [10,23,2,9],
      [17,0,3,2],
      [17,1,3,2],
      [17,2,3,2],
      [17,3,3,2],
      [17,4,3,2],
      [17,5,3,2],
      [0,6,3,37],
      [0,7,3,37],
      [0,8,3,37],
      [23,15,3,1],
      [15,16,3,3],
      [23,16,3,1],
      [15,17,3,3],
      [23,17,3,1],
      [10,22,3,9],
      [10,23,3,9],
      [17,0,4,2],
      [17,1,4,2],
      [17,2,4,2],
      [17,3,4,2],
      [17,4,4,2],
      [17,5,4,2],
      [17,6,4,1],
      [35,6,4,2],
      [17,7,4,1],
      [35,7,4,2],
      [35,8,4,2],
      [23,15,4,1],
      [15,16,4,3],
      [23,16,4,1],
      [15,17,4,3],
      [23,17,4,1],
      [10,22,4,9],
      [10,23,4,9],
      [17,0,5,2],
      [17,1,5,2],
      [17,2,5,2],
      [17,3,5,2],
      [17,4,5,2],
      [17,5,5,2],
      [35,6,5,2],
      [35,7,5,2],
      [35,8,5,2],
      [23,15,5,1],
      [15,16,5,3],
      [23,16,5,1],
      [15,17,5,3],
      [23,17,5,1],
      [18,22,5,1],
      [18,23,5,1],
      [35,6,6,2],
      [35,7,6,2],
      [35,8,6,2],
      [23,9,6,4],
      [35,9,6,2],
      [23,10,6,4],
      [35,10,6,2],
      [23,11,6,4],
      [35,11,6,2],
      [23,12,6,27],
      [23,13,6,27],
      [23,14,6,27],
      [23,15,6,1],
      [15,16,6,3],
      [23,16,6,1],
      [15,17,6,3],
      [23,17,6,1],
      [18,22,6,1],
      [18,23,6,1],
      [35,6,7,2],
      [35,7,7,2],
      [35,8,7,2],
      [35,9,7,2],
      [35,10,7,2],
      [35,11,7,2],
      [23,12,7,27],
      [23,13,7,27],
      [23,14,7,27],
      [23,15,7,1],
      [15,16,7,3],
      [23,16,7,1],
      [15,17,7,3],
      [23,17,7,1],
      [18,22,7,1],
      [18,23,7,1],
      [35,6,8,2],
      [35,7,8,2],
      [35,8,8,2],
      [35,9,8,2],
      [35,10,8,2],
      [35,11,8,2],
      [23,12,8,3],
      [23,13,8,3],
      [23,14,8,3],
      [23,15,8,3],
      [15,16,8,3],
      [23,16,8,3],
      [15,17,8,3],
      [23,17,8,3],
      [23,18,8,3],
      [23,19,8,3],
      [23,20,8,3],
      [23,21,8,3],
      [18,22,8,1],
      [23,22,8,3],
      [18,23,8,1],
      [23,23,8,12],
      [23,24,8,12],
      [32,25,8,2],
      [23,12,9,3],
      [23,13,9,3],
      [23,14,9,3],
      [23,15,9,3],
      [15,16,9,3],
      [23,16,9,3],
      [15,17,9,3],
      [23,17,9,3],
      [23,18,9,3],
      [23,19,9,3],
      [23,20,9,3],
      [23,21,9,3],
      [18,22,9,1],
      [23,22,9,3],
      [18,23,9,1],
      [23,23,9,12],
      [23,24,9,12],
      [32,25,9,2],
      [13,34,9,1],
      [13,35,9,1],
      [23,12,10,3],
      [23,13,10,3],
      [23,14,10,3],
      [15,16,10,3],
      [15,17,10,3],
      [18,22,10,1],
      [18,23,10,1],
      [13,34,10,1],
      [13,35,10,1],
      [23,12,11,3],
      [23,13,11,3],
      [23,14,11,3],
      [15,16,11,3],
      [15,17,11,3],
      [18,22,11,13],
      [18,23,11,13],
      [13,34,11,1],
      [13,35,11,1],
      [23,12,12,3],
      [23,13,12,3],
      [23,14,12,3],
      [15,16,12,3],
      [15,17,12,3],
      [18,22,12,13],
      [18,23,12,13],
      [13,34,12,1],
      [13,35,12,1],
      [23,12,13,3],
      [23,13,13,3],
      [23,14,13,3],
      [15,16,13,3],
      [15,17,13,3],
      [18,22,13,1],
      [25,22,13,2],
      [18,23,13,1],
      [25,23,13,2],
      [25,24,13,2],
      [13,34,13,1],
      [13,35,13,1],
      [23,12,14,2],
      [23,13,14,2],
      [23,14,14,2],
      [23,15,14,2],
      [15,16,14,3],
      [23,16,14,2],
      [15,17,14,3],
      [23,17,14,2],
      [23,18,14,2],
      [23,19,14,2],
      [23,20,14,2],
      [23,21,14,1],
      [18,22,14,1],
      [23,22,14,1],
      [25,22,14,2],
      [18,23,14,1],
      [23,23,14,1],
      [25,23,14,2],
      [18,24,14,11],
      [18,25,14,11],
      [20,26,14,9],
      [13,34,14,1],
      [13,35,14,1],
      [29,0,15,2],
      [29,1,15,2],
      [29,2,15,2],
      [29,3,15,2],
      [29,4,15,2],
      [29,5,15,2],
      [29,6,15,2],
      [29,7,15,2],
      [29,8,15,2],
      [29,9,15,2],
      [29,10,15,2],
      [29,11,15,2],
      [23,12,15,2],
      [29,12,15,2],
      [23,13,15,2],
      [29,13,15,2],
      [23,14,15,2],
      [29,14,15,2],
      [23,15,15,2],
      [29,15,15,2],
      [15,16,15,3],
      [23,16,15,2],
      [29,16,15,2],
      [15,17,15,3],
      [23,17,15,2],
      [29,17,15,2],
      [23,18,15,2],
      [29,18,15,2],
      [23,19,15,2],
      [29,19,15,2],
      [23,20,15,2],
      [29,20,15,2],
      [23,21,15,1],
      [29,21,15,2],
      [18,22,15,1],
      [23,22,15,1],
      [25,22,15,2],
      [29,22,15,2],
      [18,23,15,1],
      [23,23,15,1],
      [25,23,15,2],
      [29,23,15,2],
      [19,24,15,12],
      [20,25,15,11],
      [20,26,15,11],
      [27,27,15,4],
      [13,34,15,1],
      [13,35,15,1],
      [29,0,16,2],
      [29,1,16,2],
      [29,2,16,2],
      [29,3,16,2],
      [29,4,16,2],
      [29,5,16,2],
      [29,6,16,2],
      [29,7,16,2],
      [29,8,16,2],
      [29,9,16,2],
      [29,10,16,2],
      [29,11,16,2],
      [29,12,16,2],
      [29,13,16,2],
      [29,14,16,2],
      [29,15,16,2],
      [15,16,16,3],
      [29,16,16,2],
      [15,17,16,3],
      [29,17,16,2],
      [23,18,16,1],
      [29,18,16,2],
      [23,19,16,1],
      [29,19,16,2],
      [23,20,16,1],
      [29,20,16,2],
      [23,21,16,1],
      [29,21,16,2],
      [18,22,16,1],
      [23,22,16,1],
      [29,22,16,2],
      [18,23,16,1],
      [23,23,16,1],
      [29,23,16,2],
      [19,24,16,1],
      [29,24,16,2],
      [27,25,16,4],
      [27,26,16,4],
      [27,27,16,4],
      [13,34,16,1],
      [13,35,16,1],
      [29,7,17,2],
      [29,8,17,2],
      [29,9,17,2],
      [29,10,17,2],
      [29,11,17,2],
      [29,12,17,2],
      [29,13,17,2],
      [29,14,17,2],
      [29,15,17,2],
      [15,16,17,3],
      [29,16,17,1],
      [15,17,17,3],
      [29,17,17,1],
      [29,18,17,1],
      [29,19,17,1],
      [29,20,17,1],
      [29,21,17,1],
      [15,22,17,4],
      [23,22,17,7],
      [18,23,17,1],
      [23,23,17,7],
      [18,24,17,2],
      [23,24,17,1],
      [27,24,17,3],
      [18,25,17,1],
      [23,25,17,1],
      [27,25,17,3],
      [13,26,17,11],
      [27,26,17,3],
      [13,27,17,11],
      [27,27,17,2],
      [13,28,17,1],
      [19,28,17,3],
      [13,29,17,1],
      [19,29,17,3],
      [13,30,17,1],
      [19,30,17,3],
      [13,31,17,1],
      [19,31,17,3],
      [13,32,17,1],
      [19,32,17,3],
      [13,33,17,1],
      [19,33,17,3],
      [13,34,17,1],
      [19,34,17,3],
      [13,35,17,1],
      [19,35,17,3],
      [19,36,17,3],
      [19,37,17,3],
      [19,38,17,3],
      [19,39,17,3],
      [19,40,17,3],
      [19,41,17,3],
      [19,42,17,3],
      [19,43,17,3],
      [19,44,17,3],
      [19,45,17,3],
      [19,46,17,3],
      [19,47,17,3],
      [19,48,17,3],
      [19,49,17,3],
      [29,7,18,2],
      [29,8,18,2],
      [29,9,18,2],
      [30,10,18,1],
      [30,11,18,1],
      [29,12,18,3],
      [29,13,18,3],
      [29,14,18,3],
      [30,15,18,1],
      [15,16,18,3],
      [15,17,18,3],
      [15,22,18,4],
      [18,23,18,1],
      [18,24,18,1],
      [18,25,18,1],
      [27,25,18,2],
      [27,26,18,2],
      [19,27,18,1],
      [27,27,18,2],
      [29,7,19,2],
      [29,8,19,2],
      [29,9,19,2],
      [30,10,19,1],
      [30,11,19,1],
      [30,12,19,1],
      [30,13,19,1],
      [30,14,19,1],
      [30,15,19,1],
      [15,16,19,3],
      [15,17,19,3],
      [15,22,19,4],
      [18,23,19,1],
      [18,24,19,1],
      [18,25,19,1],
      [27,25,19,2],
      [27,26,19,2],
      [27,27,19,2],
      [29,7,20,2],
      [29,8,20,2],
      [29,9,20,2],
      [15,16,20,3],
      [15,17,20,3],
      [15,18,20,3],
      [15,19,20,3],
      [15,20,20,3],
      [15,21,20,3],
      [15,22,20,3],
      [27,25,20,2],
      [27,26,20,2],
      [27,27,20,2],
      [43,0,21,3],
      [43,1,21,3],
      [43,2,21,3],
      [29,7,21,2],
      [29,8,21,2],
      [29,9,21,2],
      [15,16,21,3],
      [15,17,21,3],
      [15,18,21,3],
      [15,19,21,3],
      [15,20,21,3],
      [15,21,21,3],
      [15,22,21,3],
      [27,25,21,2],
      [27,26,21,2],
      [27,27,21,2],
      [43,0,22,3],
      [43,1,22,3],
      [43,2,22,3],
      [29,7,22,2],
      [29,8,22,2],
      [29,9,22,2],
      [15,16,22,3],
      [15,17,22,3],
      [15,18,22,3],
      [15,19,22,3],
      [15,20,22,3],
      [15,21,22,3],
      [15,22,22,3],
      [27,25,22,2],
      [27,26,22,2],
      [27,27,22,2],
      [43,0,23,3],
      [43,1,23,3],
      [43,2,23,3],
      [47,4,23,2],
      [47,5,23,3],
      [47,6,23,3],
      [29,7,23,2],
      [47,7,23,3],
      [29,8,23,2],
      [47,8,23,3],
      [29,9,23,2],
      [15,22,23,3],
      [27,25,23,2],
      [27,26,23,2],
      [27,27,23,2],
      [43,0,24,3],
      [43,1,24,3],
      [43,2,24,3],
      [47,4,24,2],
      [47,5,24,3],
      [47,6,24,3],
      [29,7,24,2],
      [47,7,24,3],
      [29,8,24,2],
      [47,8,24,3],
      [29,9,24,2],
      [15,22,24,3],
      [27,25,24,2],
      [27,26,24,2],
      [27,27,24,2],
      [43,0,25,3],
      [43,1,25,3],
      [43,2,25,3],
      [47,4,25,2],
      [47,5,25,3],
      [47,6,25,3],
      [29,7,25,2],
      [47,7,25,3],
      [29,8,25,2],
      [47,8,25,3],
      [29,9,25,2],
      [15,22,25,3],
      [25,25,25,4],
      [25,26,25,4],
      [25,27,25,4],
      [43,0,26,3],
      [25,1,26,25],
      [25,2,26,25],
      [25,3,26,25],
      [29,4,26,2],
      [43,4,26,6],
      [29,5,26,2],
      [29,6,26,2],
      [29,7,26,2],
      [29,8,26,2],
      [29,9,26,2],
      [15,22,26,3],
      [25,25,26,4],
      [25,26,26,4],
      [25,27,26,4],
      [43,0,27,3],
      [25,1,27,6],
      [33,1,27,3],
      [39,1,27,3],
      [44,1,27,2],
      [25,2,27,6],
      [33,2,27,3],
      [39,2,27,3],
      [44,2,27,2],
      [25,3,27,6],
      [39,3,27,3],
      [44,3,27,2],
      [29,4,27,2],
      [43,4,27,6],
      [29,5,27,2],
      [29,6,27,2],
      [29,7,27,2],
      [29,8,27,2],
      [29,9,27,2],
      [15,22,27,3],
      [15,23,27,2],
      [15,24,27,2],
      [43,0,28,3],
      [25,1,28,6],
      [33,1,28,3],
      [39,1,28,3],
      [44,1,28,2],
      [25,2,28,6],
      [33,2,28,3],
      [39,2,28,3],
      [44,2,28,2],
      [25,3,28,6],
      [39,3,28,3],
      [44,3,28,2],
      [29,4,28,2],
      [43,4,28,6],
      [29,5,28,2],
      [29,6,28,2],
      [29,7,28,2],
      [29,8,28,2],
      [29,9,28,2],
      [15,22,28,2],
      [15,23,28,2],
      [15,24,28,2],
      [43,0,29,3],
      [25,1,29,2],
      [33,1,29,3],
      [39,1,29,3],
      [25,2,29,2],
      [33,2,29,3],
      [39,2,29,3],
      [25,3,29,2],
      [39,3,29,3],
      [43,11,29,1],
      [43,12,29,1],
      [43,13,29,1],
      [43,14,29,1],
      [43,15,29,1],
      [43,16,29,1],
      [15,22,29,2],
      [15,23,29,2],
      [15,24,29,2],
      [43,0,30,3],
      [25,1,30,2],
      [33,1,30,3],
      [39,1,30,3],
      [25,2,30,2],
      [33,2,30,3],
      [39,2,30,3],
      [25,3,30,2],
      [39,3,30,3],
      [43,11,30,1],
      [43,12,30,1],
      [43,13,30,1],
      [43,14,30,1],
      [43,15,30,1],
      [43,16,30,1],
      [15,22,30,2],
      [15,23,30,2],
      [15,24,30,2],
      [43,0,31,3],
      [25,1,31,2],
      [33,1,31,3],
      [25,2,31,2],
      [33,2,31,3],
      [25,3,31,2],
      [43,11,31,1],
      [43,12,31,1],
      [15,22,31,2],
      [15,23,31,2],
      [15,24,31,2],
      [43,0,32,3],
      [25,1,32,2],
      [33,1,32,3],
      [25,2,32,2],
      [33,2,32,3],
      [25,3,32,2],
      [43,11,32,1],
      [43,12,32,1],
      [15,22,32,2],
      [15,23,32,2],
      [15,24,32,2],
      [43,0,33,3],
      [25,1,33,2],
      [33,1,33,3],
      [25,2,33,2],
      [33,2,33,3],
      [43,2,33,1],
      [25,3,33,2],
      [43,3,33,3],
      [43,4,33,3],
      [43,5,33,1],
      [43,6,33,1],
      [43,7,33,1],
      [43,8,33,1],
      [43,9,33,1],
      [43,10,33,1],
      [43,11,33,1],
      [43,12,33,1],
      [15,22,33,2],
      [15,23,33,2],
      [15,24,33,2],
      [43,0,34,3],
      [25,1,34,2],
      [33,1,34,3],
      [25,2,34,2],
      [33,2,34,3],
      [25,3,34,2],
      [43,3,34,3],
      [43,4,34,3],
      [43,11,34,1],
      [43,12,34,1],
      [15,22,34,2],
      [15,23,34,2],
      [15,24,34,2],
      [25,0,35,1],
      [43,0,35,3],
      [25,1,35,2],
      [33,1,35,3],
      [25,2,35,2],
      [33,2,35,3],
      [25,3,35,2],
      [43,11,35,1],
      [43,12,35,1],
      [15,22,35,2],
      [15,23,35,2],
      [15,24,35,2],
      [25,0,36,1],
      [43,0,36,3],
      [25,1,36,2],
      [33,1,36,3],
      [25,2,36,2],
      [33,2,36,3],
      [25,3,36,2],
      [43,11,36,1],
      [43,12,36,1],
      [15,22,36,2],
      [15,23,36,2],
      [15,24,36,2],
      [43,0,37,3],
      [25,1,37,2],
      [33,1,37,3],
      [25,2,37,2],
      [33,2,37,3],
      [25,3,37,2],
      [43,11,37,1],
      [43,12,37,1],
      [15,22,37,2],
      [15,23,37,2],
      [15,24,37,2],
      [43,0,38,3],
      [25,1,38,2],
      [35,1,38,1],
      [25,2,38,2],
      [35,2,38,1],
      [25,3,38,2],
      [43,11,38,1],
      [43,12,38,1],
      [15,22,38,2],
      [15,23,38,2],
      [15,24,38,2],
      [43,0,39,3],
      [25,1,39,2],
      [35,1,39,1],
      [43,1,39,3],
      [25,2,39,2],
      [35,2,39,1],
      [43,2,39,3],
      [25,3,39,2],
      [35,3,39,1],
      [43,3,39,3],
      [35,4,39,1],
      [43,4,39,3],
      [35,5,39,1],
      [43,5,39,3],
      [35,6,39,1],
      [43,6,39,3],
      [35,7,39,1],
      [37,7,39,9],
      [35,8,39,1],
      [37,8,39,9],
      [35,9,39,1],
      [37,9,39,9],
      [35,10,39,1],
      [37,10,39,9],
      [35,11,39,9],
      [35,12,39,9],
      [15,22,39,1],
      [15,23,39,1],
      [43,0,40,3],
      [25,1,40,2],
      [35,1,40,1],
      [43,1,40,3],
      [25,2,40,2],
      [35,2,40,1],
      [43,2,40,3],
      [25,3,40,2],
      [35,3,40,1],
      [43,3,40,3],
      [35,4,40,1],
      [43,4,40,3],
      [35,5,40,1],
      [43,5,40,3],
      [35,6,40,1],
      [43,6,40,3],
      [35,7,40,1],
      [37,7,40,9],
      [35,8,40,1],
      [37,8,40,9],
      [35,9,40,1],
      [37,9,40,9],
      [35,10,40,1],
      [37,10,40,9],
      [35,11,40,9],
      [35,12,40,9],
      [25,1,41,2],
      [25,2,41,2],
      [25,3,41,2],
      [38,11,41,3],
      [35,12,41,3],
      [25,1,42,2],
      [25,2,42,2],
      [25,3,42,2],
      [35,11,42,6],
      [35,12,42,3],
      [25,1,43,2],
      [25,2,43,2],
      [25,3,43,2],
      [25,1,44,2],
      [25,2,44,2],
      [25,3,44,2],
      [25,1,45,2],
      [25,2,45,2],
      [25,3,45,2],
      [25,1,46,2],
      [25,2,46,2],
      [25,3,46,2],
      [25,1,47,2],
      [25,2,47,2],
      [25,3,47,2],
      [25,1,48,2],
      [25,2,48,2],
      [25,3,48,2],
      [25,1,49,2],
      [25,2,49,2],
      [25,3,49,2]
      
      
      
      ];
    }
    ();
    
    var rH={},
        xmi=1000,ymi=1000,zmi=1000,xma=-1000,yma=-1000,zma=-1000;
    for (var i=0;i<a.length;i++) {
      var ah=a[i];
      for (var j=0;j<(ah[3]||1);j++) {
        var x=ah[0]+j,y=ah[1],z=ah[2];
        rH[z+' '+y+' '+x]=[x,y,z];
        xmi=Math.min(xmi,x);ymi=Math.min(ymi,y);zmi=Math.min(zmi,z);
        xma=Math.max(xma,x);yma=Math.max(yma,y);zma=Math.max(zma,z);
      }
    }
    
    return {rH:rH,xmin:xmi,xmax:xma,ymin:ymi,ymax:yma,zmin:zmi,zmax:zma};
    //...
  }
  function DungeonGeometry(ps) {
    
    //console.log('DungeonGeometry d=');
    //console.log(p);
    THREE.BufferGeometry.call( this );
    var width=50,height=50,depth=50,t='roofCant0';
    this.type='DungeonGeometry';
    this.parameters = {
      width: width,
      height: height,
      depth: depth,
    };
    
    var scope = this;
    
    // buffers
    
    var indices = [];
    var vertices = [];
    var normals = [];
    var uvs = [];
    
    // helper variables
    
    var numberOfVertices = 0;
    var groupStart = 0;
    
    // build each side of the box geometry
    var w=width,h=height,d=depth,a,mx,mz,xz,
    
      a=[[[-100,100,100,0.27,0.4381],[-100,-100,100,0.27,0.4688],[100,-100,100,0.4688,0.4108],[100,100,100,0.4688,0.3801]
         ,[-100,-100,-100,0.1563,0.3676],[-100,100,-100,0.1563,0.2142],[100,-100,-100,0.355,0.3096],[100,100,-100,0.355,0.1563]
         ,[100,100,-100,0.355,0.1563],[-100,100,-100,0.1563,0.2142],[-100,100,100,0.27,0.4381],[100,100,100,0.4688,0.3801],[-100,-100,100,0.27,0.4688],[100,-100,100,0.4688,0.4108],[-100,-100,-100,0.1563,0.3676],[100,-100,-100,0.355,0.3096],[100,100,-100,0.355,0.1563],[100,100,100,0.4688,0.3801],[100,-100,100,0.4688,0.4108],[100,-100,-100,0.355,0.3096],[-100,100,-100,0.1563,0.2142],[-100,100,100,0.27,0.4381],[-100,-100,100,0.27,0.4688],[-100,-100,-100,0.1563,0.3676]],
         [
         [2,0,1],[0,2,3]
         ,[4,7,6],[7,4,5]
         ,[2,1,4],[4,6,2]
         //,[15,12,14],[12,15,13]
         //,[17,19,18],[23,21,22],[10,16,11],[16,10,20],[17,8,19],[9,21,23]
         ]];
    
    if (0) {
    var pa=a[0],fa=a[1];
    for (var i=0;i<pa.length;i++) { var p=pa[i];
      var x=(mx?-1:1)*(xz?p[2]:p[0]),
          y=p[1],
          z=(mz?-1:1)*(xz?p[0]:p[2]);
      vertices.push(x*w/200,y*h/200,z*d/200);normals.push(0,0,1);uvs.push(p[3],p[4]); }
    for (var i=0;i<fa.length;i++) { var f=fa[i];
      if ((mz&&!xz)||(xz&&!mx&&!mz)||(mx&&!xz)) indices.push(f[0],f[1],f[2]); else indices.push(f[0],f[2],f[1]); 
    }
    } 
    function key(x,y,z) {
      return z+' '+y+' '+x;
    }
    function vert(x,y,z) {
      x-=b*(ps.xmax+ps.xmin)/2;
      z-=b*(ps.zmax+ps.zmin)/2;
      y-=b*ps.ymin;
      vertices.push(x,y,z);normals.push(0,0,1);uvs.push(0.5,0.5);
      return vertices.length/3-1;
    }
    var rH=ps.rH,b=10;  
    for (var k in rH) if (rH.hasOwnProperty(k)) {
      var a=rH[k],x=a[0],y=a[1],z=a[2];
      if (!rH[key(x,y-1,z)]) {
        var i0=vert(x*b,y*b,z*b),i1=vert((x+1)*b,y*b,z*b),i2=vert(x*b,y*b,(z+1)*b),i3=vert((x+1)*b,y*b,(z+1)*b);
        indices.push(i0,i3,i1);indices.push(i0,i2,i3);
      }
      if (!rH[key(x,y+1,z)]) {
        var i0=vert(x*b,(y+1)*b,z*b),i1=vert((x+1)*b,(y+1)*b,z*b),i2=vert(x*b,(y+1)*b,(z+1)*b),i3=vert((x+1)*b,(y+1)*b,(z+1)*b);
        indices.push(i0,i1,i3);indices.push(i0,i3,i2);
      }
      if (!rH[key(x-1,y,z)]) {
        var i0=vert(x*b,y*b,z*b),i1=vert(x*b,(y+1)*b,z*b),i2=vert(x*b,(y+1)*b,(z+1)*b),i3=vert(x*b,y*b,(z+1)*b);
        indices.push(i0,i1,i2);indices.push(i0,i2,i3);
      }
      if (!rH[key(x+1,y,z)]) {
        var i0=vert((x+1)*b,y*b,z*b),i1=vert((x+1)*b,(y+1)*b,z*b),i2=vert((x+1)*b,(y+1)*b,(z+1)*b),i3=vert((x+1)*b,y*b,(z+1)*b);
        indices.push(i0,i2,i1);indices.push(i0,i3,i2);
      }
      if (!rH[key(x,y,z-1)]) {
        var i0=vert(x*b,y*b,z*b),i1=vert((x+1)*b,y*b,z*b),i2=vert((x+1)*b,(y+1)*b,z*b),i3=vert(x*b,(y+1)*b,z*b);
        indices.push(i0,i1,i2);indices.push(i0,i2,i3);
      }
      if (!rH[key(x,y,z+1)]) {
        var i0=vert(x*b,y*b,(z+1)*b),i1=vert((x+1)*b,y*b,(z+1)*b),i2=vert((x+1)*b,(y+1)*b,(z+1)*b),i3=vert(x*b,(y+1)*b,(z+1)*b);
        indices.push(i0,i2,i1);indices.push(i0,i3,i2);
      }
    }
    groupCount=indices.length;
    scope.addGroup( groupStart, groupCount, 0 );
    groupStart += groupCount;
    
    
    this.setIndex( indices );
    this.addAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );
    this.addAttribute( 'normal', new THREE.Float32BufferAttribute( normals, 3 ) );
    this.addAttribute( 'uv', new THREE.Float32BufferAttribute( uvs, 2 ) );
    
    
  }
  
  function onWindowResize() {
    
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    
    renderer.setSize( window.innerWidth, window.innerHeight );
    
  }
  function animate() {
    
    requestAnimationFrame( animate );
    
    var t=Date.now(),dt=t-ot;
    th+=dt;ot=t;
    if (th>1500) { th=0;camSwitch(); }
    
    
    
    controls.update(); // required if controls.enableDamping = true, or if controls.autoRotate = true
    stats.update();
    
    var p=camera.position,t=controls.target;
    Menu.ms(mcam,f0(p.x)+','+f0(p.y)+','+f0(p.z)+' \u2B9A '+f0(t.x)+','+f0(t.y)+','+f0(t.z));
    
    renderer.render(scene,camera);
  }
  
  
  DungeonGeometry.prototype=Object.create( THREE.BufferGeometry.prototype );
  DungeonGeometry.prototype.constructor=DungeonGeometry;
  
  
  //if (1) { box0(-1,0,-1,1,1,1,m1);box0(15,0,-1,1,1,1,m1);
  //         box0(-1,0,15,1,1,1,m1);box0(15,0,15,1,1,1,m1); }
  
  //box(0,-80,0,-50,-100,-50,m1);
  //box(60,-80,0,-50,-100,-50,m1);
  //box(0,-80,60,-50,-100,-50,m1);
  //box(0,-150,0,600,bw,600,m0).castShadow=false;
  
  //addMesh(0,-139,0,new DungeonGeometry(generateDungeon()),m1);
  addMesh(0,-139,0,new DungeonGeometry(dungeonLoad()),m1);
  
  box(0,-150,0,600,bw,600,m0).castShadow=false;
  
  var l=new THREE.AmbientLight(0x555555),f=3;scene.add(l);
  l=new THREE.PointLight(0xffffff,1,0);l.position.set(-100*f,200*f,100*f);scene.add(l);
  l=new THREE.PointLight(0xffffaa,1,0);l.position.set(100*f,100*f,100*f);
  l.castShadow=true;
  l.shadow.camera.near=100;
  l.shadow.camera.far=1000;
  l.shadow.mapSize.width=1024;//2048;
  l.shadow.mapSize.height=1024;
  l.shadow.bias=0.01;
  scene.add(l);
  l=new THREE.PointLight(0xaaffff,1,0);l.position.set(100*f,-200*f,-100*f);scene.add(l);
  
  
  stats = new Stats();
  stats.domElement.style.position = 'absolute';
  stats.domElement.style.top = '0px';
  stats.domElement.style.zIndex = 100;
  container.appendChild( stats.domElement );
  
  var cams=[
   {px:0,py:360,pz:930,tx:0,ty:0,tz:0},
   {px:156,py:-30,pz:268,tx:118,ty:-23,tz:176},
   {px:-150,py:131,pz:210,tx:-90,ty:90,tz:128},
  ],cami=-1;
  function camSwitch() {
    cami=(cami+1)%cams.length;
    var c=cams[cami];
    //var xr=rand(1000);
    camera.position.set(c.px,c.py,c.pz);
    controls.target.set(c.tx,c.ty,c.tz);//,'XYZ');
    //camera.lookAt(new THREE.Vector3(rand(100),100,100));
    
  }
  camSwitch();
  
  Menu.init([mcam={s:'Cam',pw:0.15,ms:'',msid:'mcam',fs:1.5,actionf:camSwitch}]
  ,{listen:1,diw:850});
  
  window.addEventListener( 'resize', onWindowResize, false );
  animate();
}
dungeons();
</script></body>
</html><script>
//fr o,13
//fr o,13,54
//fr o,13,58,52
//fr o,13,60
//fr o,13,61
//fr p,8,90
