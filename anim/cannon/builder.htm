<!DOCTYPE html>
<html>
    <head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
        <title>Cannon World Builder</title>
        <style>
            html, body {
                width: 100%;
                height: 100%;
            }

            body {
                background-color: #ffffff;
                margin: 0;
                overflow: hidden;
                font-family: arial;
            }

            #blocker {

                position: absolute;

                width: 100%;
                height: 100%;

                background-color: rgba(0,0,0,0.5);

            }

            #instructions {

                width: 100%;
                height: 100%;

                display: -webkit-box;
                display: -moz-box;
                display: box;

                -webkit-box-orient: horizontal;
                -moz-box-orient: horizontal;
                box-orient: horizontal;

                -webkit-box-pack: center;
                -moz-box-pack: center;
                box-pack: center;

                -webkit-box-align: center;
                -moz-box-align: center;
                box-align: center;

                color: #ffffff;
                text-align: center;

                cursor: pointer;

            }

        </style>
    </head>
    <body oncontextmenu="return false;">
        <script src="/three/r124/build/three.min.js"></script>
        <script src="/three/r109/examples/js/libs/stats.min.js"></script>
        <script src="/anim/cannon/v062/cannon.min.js"></script>
        <script src="/anim/cannon/PointerLockTsControls.js"></script>
        <script src="/conet.js"></script>
        <script src="/menu.js"></script>
        <script src="/util/mdiv.js"></script>
<script src="/vecmath.js"></script>
<script src="/canvas/pd5.js"></script>
<script src="/three/threePd5.js"></script>
        
        

        <div id="blocker">

            <div id="instructions">
                <span style="font-size:40px">Click/Touch to play</span>
                <br />
                (W,A,S,D = Move, SPACE = Jump, MOUSE = Look, CLICK = Shoot)
            </div>

        </div>

        <script>

(function() {
  //---
  var sphereShape,sphereBody,world,physicsMaterial,walls=[],balls=[],//ballMeshes=[],
      boxes=[],boxMeshes=[],tsd,
      camera, scene, renderer,raycaster=new THREE.Raycaster(),rayobj=undefined,cfgMd,dpr,
      mray0=new THREE.MeshPhongMaterial({color:0x66aa66,flatShading:true}),
      geometry,material,mesh,groundMesh,stats,lskey='buildr0',
      controls,time=Date.now(),waypoints={},
      blocker=document.getElementById( 'blocker' ),
      instructions=document.getElementById( 'instructions' ),
      havePointerLock = 'pointerLockElement' in document || 'mozPointerLockElement' in document || 'webkitPointerLockElement' in document;
  
  if ( havePointerLock ) {
  
                  var element = document.body;
  
  var pointerlockchange = function ( event ) {
    
                        if ( document.pointerLockElement === element || document.mozPointerLockElement === element || document.webkitPointerLockElement === element ) {
    
                            controls.enabled = true;
    
                            blocker.style.display = 'none';
    
                        } else {
    
                            controls.enabled = false;
    
                            blocker.style.display = '-webkit-box';
                            blocker.style.display = '-moz-box';
                            blocker.style.display = 'box';
    
                            instructions.style.display = '';
    
                        }
    
  }
  
  var pointerlockerror = function ( event ) {
    instructions.style.display = '';
  }
  
                  // Hook pointer lock state change events
                  document.addEventListener( 'pointerlockchange', pointerlockchange, false );
                  document.addEventListener( 'mozpointerlockchange', pointerlockchange, false );
                  document.addEventListener( 'webkitpointerlockchange', pointerlockchange, false );
  
                  document.addEventListener( 'pointerlockerror', pointerlockerror, false );
                  document.addEventListener( 'mozpointerlockerror', pointerlockerror, false );
                  document.addEventListener( 'webkitpointerlockerror', pointerlockerror, false );
  
  instructions.addEventListener( 'click', function ( event ) {
    instructions.style.display = 'none';
    
    // Ask the browser to lock the pointer
    element.requestPointerLock = element.requestPointerLock || element.mozRequestPointerLock || element.webkitRequestPointerLock;
    element.requestPointerLock();
    
  }
  , false );
  
  //if (0)
  instructions.addEventListener( 'touchstart', function ( event ) {
    instructions.style.display = 'none';
    
    controls.enabled = true;
    
    blocker.style.display = 'none';
    
    //objProps();
    
  }
  , false );
  
  
              } else {
  
                  instructions.innerHTML = 'Your browser doesn\'t seem to support Pointer Lock API';
  
              }
  
              initCannon();
              init();
              animate();
  
  function gebi(id) {
    return document.getElementById(id);//...
  }
  function fid(id) {
    var v=gebi(id).value;
    if (v.length==0) return 0;
    return parseFloat(v);
    //...
  }
  function bbdraw(bb) {
    //--- -
    //onsole.log('boxScales.bbdraw');
    //var ct=bb.ct;
    
    var c=bb.c,w=c.width,h=c.height*bb.ar,ct=bb.ct;//c.getContext('2d');
    ct.clearRect(0,0,w,h);
    ct.fillStyle='rgba(0,0,0,0.5)';ct.fillRect(0,0,w,h);//p.c=c;p.ct=ct;
    
    ct.fillStyle='#fff';
    ct.textAlign='center';
    ct.font='20px sans-serif';
    ct.fillText(bb.o.ps.text||'No text.',w/2,2);
    //onsole.log('bbdraw '+(bb.o.ps.text||'No text.'));
    
    bb.threeTex.needsUpdate=true;
    //...
  }
  
  function boxDef(o) {
    var p=o.position,d=o.geometry.parameters,q=o.quaternion;
    var r={
      pos:{x:p.x,y:p.y,z:p.z},
      dim:{x:d.width/2,y:d.height/2,z:d.depth/2},
      quat:{x:q.x,y:q.y,z:q.z,w:q.w}
    };
    if (o.userData.props!==undefined) r.props=o.userData.props;
    return r;
    //...
  }
  
  function boxAddFromDef(h) {
    //---
    
    var boxBody=new CANNON.Body({ mass:0 });//mass:5
    boxBody.addShape(new CANNON.Box(new CANNON.Vec3(h.dim.x,h.dim.y,h.dim.z)));
    var boxMesh=new THREE.Mesh(new THREE.BoxGeometry(h.dim.x*2,h.dim.y*2,h.dim.z*2),material);
    world.addBody(boxBody);
    //scene.add(boxMesh);
    //console.log(h.dim);
    if ((h.dim.x==0.4)&&(h.dim.y==0.4)&&(h.dim.z==0.4)) {
      //onsole.log('light');
      var l=new THREE.PointLight(0xff9900,1,20);
      l.position.set(h.pos.x,h.pos.y,h.pos.z);
    
    if (0) {
    var light=l;  
    light.castShadow = true;
    light.shadow.camera.near = 20;
    light.shadow.camera.far = 50;//camera.far;
    light.shadow.camera.fov = 40;
    light.shadowMapBias = 0.1;
    light.shadowMapDarkness = 0.7;
    light.shadow.mapSize.width = 2*512;
    light.shadow.mapSize.height = 2*512;  
    }
      
      //l.distance=20;
      scene.add(l);
      boxMesh.userData.light=l;
    } else { 
      boxMesh.castShadow=true;
      boxMesh.receiveShadow=true;
      //boxMesh.geometry.computeBoundingBox();
      //boxMesh.geometry.computeBoundingSphere();
      scene.add(boxMesh);
    }
    boxBody.position.set(h.pos.x,h.pos.y,h.pos.z);
    boxMesh.position.set(h.pos.x,h.pos.y,h.pos.z);
    boxBody.quaternion.set(h.quat.x,h.quat.y,h.quat.z,h.quat.w);
    boxMesh.quaternion.copy(boxBody.quaternion);
    boxes.push(boxBody);
    boxMeshes.push(boxMesh);
    boxMesh.userData.body=boxBody;
    var ps=h.props;
    if (ps) {
      boxMesh.userData.props=ps;
    
    if (ps.pd5&&ps.pd5.fn) 
    Conet.download({fn:ps.pd5.fn,f:function(v) {
      //---
      var o=Pd5.load(v);
      //onsole.log(o);
      o.scale=1;
      if (ps.pd5.anim) Pd5.animStart(o,ps.anim);
      //Pd5.calc(o,0,0.0,0,1,{x:0,y:0,z:0},0,0,true);
      threeAddObj(o,h.pos.x,h.pos.y,h.pos.z,ps.pd5.scale||1);
      boxMesh.userData.pd5=o;
      
      //...
    }
    });
    
    if (ps.bb) {
      var psbb=ps.bb,oyw=1,psh={},pos=boxMesh.position;
      var bb=threeBillboardAdd({
        x:pos.x+(psbb.x||0),y:pos.y+(psbb.y||0),z:pos.z+(psbb.z||0),
        ar:psbb.ar||0.2,s:0.1*(1+(oyw-1)*2),transparent:psh.bbtransp,gw:psbb.gw||30,cw:128});
      bb.o={bbdraw:bbdraw,ps:psbb};
      boxMesh.userData.bb=bb;
      //onsole.log('add bb');
    }
    
    if (ps.waypoint) {
      wp0=boxMesh.position;//console.log('waypoint');
      waypoints[ps.waypoint.name]=boxMesh;
    }
    
    }
    return boxMesh;
    //...
  }
  
  function boxDel(ix) {
    
    var o=boxMeshes[ix];
    boxMeshes.splice(ix,1);
    boxes.splice(ix,1);
    scene.remove(o);
    world.removeBody(o.userData.body);
    if (o.userData.light) {
      scene.remove(o.userData.light);
      //onsole.log('Removed light.');
    }
    if (o.userData.pd5) threeRemoveObj(o.userData.pd5);
    if (o.userData.bb) threeBbRemove(o.userData.bb);
    
    
    //...
  }
  
  function serialize() {
    var s='';
    for (var o of boxMeshes) {
      if (!o.userData.body) continue;
      //var p=o.position,d=o.geometry.parameters,q=o.quaternion;
      s+=(s.length==0?'':',\n')+'  '+JSON.stringify(boxDef(o));
      //+'  {';
      //s+='"pos":{"x":'+p.x+',"y":'+p.y+',"z":'+p.z+'},';
      //s+='"dim":{"x":'+d.width/2+',"y":'+d.height/2+',"z":'+d.depth/2+'},';
      //s+='"quat":{"x":'+q.x+',"y":'+q.y+',"z":'+q.z+',"w":'+q.w+'}';
      //s+='}'
    }
    s='{"a":[\n'+s+'\n]}';
    return s;
    //...
  }
  
  
  function load(sh) {
    //---
    
    for (var ix=boxMeshes.length-1;ix>=0;ix--) {
      if (!boxMeshes[ix].userData.body) continue;
      boxDel(ix);
    }
    waypoints={};
    
    
    var dh=JSON.parse(sh);
    for (var h of dh.a) {
      //console.log(h);
      boxAddFromDef(h);
    }
    //...
  }
  
  function initCannon() {
    // Setup our world
    world = new CANNON.World();
    world.quatNormalizeSkip = 0;
    world.quatNormalizeFast = false;
    
    var solver = new CANNON.GSSolver();
    
    world.defaultContactMaterial.contactEquationStiffness = 1e9;
    world.defaultContactMaterial.contactEquationRelaxation = 4;
    
    solver.iterations = 7;
    solver.tolerance = 0.1;
    var split = true;
    if(split)
        world.solver = new CANNON.SplitSolver(solver);
    else
        world.solver = solver;
    
    world.gravity.set(0,-20,0);
    world.broadphase = new CANNON.NaiveBroadphase();
    
    // Create a slippery material (friction coefficient = 0.0)
    physicsMaterial = new CANNON.Material("slipperyMaterial");
    var physicsContactMaterial = new CANNON.ContactMaterial(physicsMaterial,
                                                            physicsMaterial,
                                                            0.0, // friction coefficient
                                                            0.3  // restitution
                                                            );
    // We must add the contact materials to the world
    world.addContactMaterial(physicsContactMaterial);
    
    // Create a sphere
    var mass = 5, radius = 1.3;
    sphereShape = new CANNON.Sphere(radius);
    sphereBody = new CANNON.Body({ mass: mass });
    sphereBody.addShape(sphereShape);
    sphereBody.position.set(0,5,0);
    sphereBody.linearDamping = 0.9;
    world.addBody(sphereBody);
    
    // Create a plane
    var groundShape = new CANNON.Plane();
    var groundBody = new CANNON.Body({ mass: 0 });
    groundBody.addShape(groundShape);
    groundBody.quaternion.setFromAxisAngle(new CANNON.Vec3(1,0,0),-Math.PI/2);
    world.addBody(groundBody);
  }
  function init() {
    
                    camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 1000 );
    
                    scene = new THREE.Scene();
                    scene.fog = new THREE.Fog( 0x333333, 0, 500 );
    
                    var ambient = new THREE.AmbientLight( 0x222222 );
                    scene.add( ambient );
    
    if (1) {
                    light = new THREE.SpotLight( 0xffffff );
                    light.position.set( 10, 30, 20 );
                    light.target.position.set( 0, 0, 0 );
                    if(true){
                        light.castShadow = true;
    
                        light.shadow.camera.near = 20;
                        light.shadow.camera.far = 50;//camera.far;
                        light.shadow.camera.fov = 40;
    
                        light.shadowMapBias = 0.1;
                        light.shadowMapDarkness = 0.7;
                        light.shadow.mapSize.width = 2*512;
                        light.shadow.mapSize.height = 2*512;
    
                        //light.shadowCameraVisible = true;
                    }
                    scene.add( light );
    }
    
                    controls=new PointerLockTsControls( camera , sphereBody );
                    scene.add( controls.getObject() );
    
                    // floor
                    geometry = new THREE.PlaneGeometry( 300, 300, 50, 50 );
                    geometry.applyMatrix4( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );
    
                    //material = new THREE.MeshLambertMaterial( { color: 0xdddddd } );
                    material=new THREE.MeshPhongMaterial({color:0xdddddd,flatShading:true}),
    
                    mesh=new THREE.Mesh(geometry,material);groundMesh=mesh;
                    mesh.castShadow=true;
                    mesh.receiveShadow=true;
                    scene.add(mesh);
    
                    renderer = new THREE.WebGLRenderer();
                    renderer.shadowMap.enabled = true;
                    renderer.shadowMapSoft = true;
                    //renderer.setSize(window.innerWidth,window.innerHeight );
                    resize();
                    renderer.setClearColor( scene.fog.color, 1 );
    
                    document.body.appendChild( renderer.domElement );
    
                    window.addEventListener('resize',resize,false);
    
    threeEnv.base=scene;//scene;
    threeEnv.scene=scene;
    threeEnv.path='/shooter/';
    threeEnv.coBoSp=1;//computeBoundingSphere
    //threeEnv.camera=camera;
    threeEnv.bbquat=controls.quat;
    //console.log(controls.quat);
    
    
                    // Add boxes
                    var sh=localStorage[lskey];
                    if (sh) load(sh);
                    
                    else if (1) 
    
    load(
    
    '{"a":['+
    '  {"pos":{"x":6,"y":8.5,"z":0},"dim":{"x":2,"y":0.3,"z":2},"quat":{"x":0,"y":0,"z":0,"w":1}},'+
    '  {"pos":{"x":9,"y":4,"z":9},"dim":{"x":1,"y":0.3,"z":10},"quat":{"x":0.22,"y":0,"z":0,"w":0.9754998718605759}},'+
    '  {"pos":{"x":0,"y":2,"z":2.75},"dim":{"x":3,"y":0.1,"z":0.75},"quat":{"x":-0.2,"y":0.045,"z":-0.2,"w":0.9581101189320568}},'+
    '  {"pos":{"x":-2.75,"y":4,"z":0},"dim":{"x":0.75,"y":0.1,"z":3},"quat":{"x":0.2,"y":0.045,"z":-0.2,"w":0.9581101189320568}},'+
    '  {"pos":{"x":0,"y":2,"z":1.9},"dim":{"x":2,"y":1,"z":0.1},"quat":{"x":0,"y":0,"z":0,"w":1}},'+
    '  {"pos":{"x":-1.9,"y":4,"z":0},"dim":{"x":0.1,"y":1,"z":2},"quat":{"x":0,"y":0,"z":0,"w":1}},'+
    '  {"pos":{"x":0,"y":2,"z":2.75},"dim":{"x":3,"y":0.1,"z":0.75},"quat":{"x":-0.2,"y":0.045,"z":-0.2,"w":0.9581101189320568}},'+
    '  {"pos":{"x":0,"y":6,"z":-2.75},"dim":{"x":3,"y":0.1,"z":0.75},"quat":{"x":0.2,"y":0.045,"z":0.2,"w":0.9581101189320568}},'+
    '  {"pos":{"x":0,"y":6,"z":-1.9},"dim":{"x":2,"y":1,"z":0.1},"quat":{"x":0,"y":0,"z":0,"w":1}},'+
    '  {"pos":{"x":2.75,"y":8,"z":0},"dim":{"x":0.75,"y":0.1,"z":3},"quat":{"x":-0.2,"y":0.045,"z":0.2,"w":0.9581101189320568}},'+
    '  {"pos":{"x":1.9,"y":8,"z":0},"dim":{"x":0.1,"y":1,"z":2},"quat":{"x":0,"y":0,"z":0,"w":1}}'+
    ']}'
    
    );
                    
                    
                    else {
                    var halfExtents = new CANNON.Vec3(1,1,1);
                    var boxShape = new CANNON.Box(halfExtents);
                    var boxGeometry = new THREE.BoxGeometry(halfExtents.x*2,halfExtents.y*2,halfExtents.z*2);
                    for(var i=0; i<7; i++){
                        var x = i*3;//(Math.random()-0.5)*20;
                        var y = 1;// + (Math.random()-0.5)*1;
                        var z = 0;(Math.random()-0.5)*20;
                        var boxBody = new CANNON.Body({ mass: 0 });//mass:5
                        var dx=1,dy=1,dz=i+1;
                        boxBody.addShape(new CANNON.Box(new CANNON.Vec3(dx,dy,dz)));
                        var boxMesh = new THREE.Mesh( new THREE.BoxGeometry(dx*2,dy*2,dz*2), material );
                        world.addBody(boxBody);
                        scene.add(boxMesh);
                        boxBody.position.set(x,y,z);
                        boxMesh.position.set(x,y,z);
                        boxBody.quaternion.set(1,0,0,0.1);
                        boxMesh.quaternion.copy(boxBody.quaternion);
                        boxMesh.castShadow = true;
                        boxMesh.receiveShadow = true;
                        boxes.push(boxBody);
                        boxMeshes.push(boxMesh);
                        boxMesh.userData.body=boxBody;
                    }
                    }
    
                    // Add linked boxes
                    var size = 0.5;
                    var he = new CANNON.Vec3(size,size,size*0.1);
                    var boxShape = new CANNON.Box(he);
                    var mass = 0;
                    var space = 0.1 * size;
                    var N = 5, last;
                    var boxGeometry = new THREE.BoxGeometry(he.x*2,he.y*2,he.z*2);
                    for(var i=0; i<N; i++){
                        var boxbody = new CANNON.Body({ mass: mass });
                        boxbody.addShape(boxShape);
                        var boxMesh = new THREE.Mesh(boxGeometry, material);
                        boxbody.position.set(5,(N-i)*(size*2+2*space) + size*2+space,0);
                        boxbody.linearDamping = 0.01;
                        boxbody.angularDamping = 0.01;
                        // boxMesh.castShadow = true;
                        boxMesh.receiveShadow = true;
                        world.addBody(boxbody);
                        scene.add(boxMesh);
                        boxes.push(boxbody);
                        boxMeshes.push(boxMesh);
    
                        if(i!=0){
                            // Connect this body to the last one
                            var c1 = new CANNON.PointToPointConstraint(boxbody,new CANNON.Vec3(-size,size+space,0),last,new CANNON.Vec3(-size,-size-space,0));
                            var c2 = new CANNON.PointToPointConstraint(boxbody,new CANNON.Vec3(size,size+space,0),last,new CANNON.Vec3(size,-size-space,0));
                            world.addConstraint(c1);
                            world.addConstraint(c2);
                        } else {
                            mass=0.3;
                        }
                        last = boxbody;
                    }
    
    var version='0.231 ';//FOLDORUPDATEVERSION
    
    
    if (1) {
    
    var cfm=Conet.fileMenu({fn:'/anim/cannon/builder/files.txt',defFn:'/anim/cannon/builder/marbleRun0.json',url:'fn',noStartLoad:undefined,
    loadf:function(fn) {
      //load(v);
      //console.log(fn);
      Conet.download({fn:fn,f:function(v) {
        //...
        load(v);
        Conet.log('Loaded '+fn+'.');
      }
      });
      //onet.download({fn:v+'?1',f:parseLoad});
    }
    ,savef:function(fn) {
      Conet.upload({fn:fn,data:serialize()});
      Conet.log('Saved '+fn+'.');
    }
    });
    
    
    Menu.init([{s:'Menu',ms:'CBuilder v. '+version,sub:[cfm,Menu.mFullscreen,
    
    {s:'BoxAdd..',r:1,actionf:function() {
      var o=rayobj;
      if (!o) //o=boxMeshes[0];//
        { alert('No object in focus.');return; }
      
      var on=boxAddFromDef(boxDef(o));
      localStorage[lskey]=serialize();
      setRayObj(on);
      objProps();
      //...
    }
    },
    {s:'BoxProps..',keys:[67],r:1,actionf:objProps},
    {s:'BoxDel',r:1,actionf:function() {
      
      var o=rayobj;
      if (!o) //o=boxMeshes[0];//
        { alert('No object in focus.');return; }
      
      var ix=boxMeshes.indexOf(o);
      boxDel(ix);
      //boxMeshes.splice(ix,1);
      //boxes.splice(ix,1);
      //scene.remove(o);
      //world.removeBody(o.userData.body);
      localStorage[lskey]=serialize();
      //...
    }
    },
    
    {s:'Json..',ms:'import/export',doctrl:'Json data',jsonCheck:1,mcfs:0.07,ta:true,wrap:0,tacols:30,tarows:20,setfunc:function(v,initLoad) {
      //...
      console.log('loading new scene');
      //for (var ix=boxMeshes.length-1;ix>=0;ix--) {
      //  if (!boxMeshes[ix].userData.body) continue;
      //  boxDel(ix);
      //}
      load(v);
      //...
    }
    ,valuef:function() {
      return serialize();
    }
    }
    
    ]},
    
    {s:'Jump',px:0.02,py:0.23,pw:0.15,ph:0.08,ydown:true,xright:true,fs:1.4,actionf:controls.jump},
    {s:'Shoot',px:0.02,py:0.30,pw:0.15,ph:0.08,ydown:true,xright:true,fs:1.4,actionf:shoot}
    
    ],{listen:1,touchEndsPropagation:1//,keyLog:1
    });
    
    }
    
    tsd=Menu.touchSticksInit();
    controls.setTsd(tsd);
    
    if (1) {
    stats=new Stats();var c=stats.domElement,s=c.style;
    s.position='absolute';s.left='2px';s.top='2px';s.zIndex=100;s.opacity=0.5;
    document.body.appendChild(c);
    }
    
    if (0)
    Conet.download({fn:'/shooter/objs/templar/o5.txt',f:function(v) {
      //---
      var o=Pd5.load(v);
      //onsole.log(o);
      o.scale=1;
      Pd5.animStart(o,'stand2');
      //Pd5.calc(o,0,0.0,0,1,{x:0,y:0,z:0},0,0,true);
      threeAddObj(o,0,0,0,2);
      
      //...
    }
    });
    //onsole.log(tsd);
  }
  function resize() {
    var wi=window.innerWidth,he=window.innerHeight;
    camera.aspect=wi/he;
    camera.updateProjectionMatrix();
    dpr=window.devicePixelRatio;
    //onsole.log('dpr='+dpr);
    renderer.setSize(wi*dpr,he*dpr);
    var st=renderer.domElement.style;
    st.width=wi+'px';st.height=he+'px';
  }
  
  function objProps() {
    //---
    if (cfgMd) return;
    var o=rayobj;
    if (!o) //o=boxMeshes[0];//
      { alert('No object in focus.');return; }
    
    var p=o.position,d=o.geometry.parameters,q=o.quaternion;
    
    var md=new Mdiv.Cont(2,50,300,200);cfgMd=md;
    
    var sh='<table>'
    +'<tr><td>Position</td>  <td><input type=text size=3 id="tfposx" value="'+p.x
      +'" /><input type=text size=3 id="tfposy" value="'+p.y
      +'" /><input type=text size=3 id="tfposz" value="'+p.z+'" /></td></tr>'
    +'<tr><td>Dimension</td> <td><input type=text size=3 id="tfdimx" value="'+d.width/2
      +'" /><input type=text size=3 id="tfdimy" value="'+d.height/2
      +'" /><input type=text size=3 id="tfdimz" value="'+d.depth/2+'" /></td></tr>'
    +'<tr><td>Quaternion</td><td><input type=text size=3 id="tfqx" value="'+q.x
      +'" /><input type=text size=3 id="tfqy" value="'+q.y
      +'" /><input type=text size=3 id="tfqz" value="'+q.z
      +'" /><input type=text size=3 id="tfqw" value="'+q.w
      +'" /></td></tr>'
    +'<tr><td valign="top">Props</td><td><textarea id="taprops" cols=25 rows=5>'+(o.userData.props===undefined?'':JSON.stringify(o.userData.props))+'</textarea></td></tr>'
    +'<tr><td></td><td><button id="buset">Set</button><button id="bucl">Close</button>'
    +' Index: '+boxMeshes.indexOf(o)+'</td></tr>'
    +'</table>';
    
    
    md.c.innerHTML=sh;
    
    gebi('tfqx').oninput=quatw;
    gebi('tfqy').oninput=quatw;
    gebi('tfqz').oninput=quatw;
    
    Conet.initJsonTa({c:gebi('taprops')});
    
    
    function quatw() {
      //---
      
      var qx=fid('tfqx'),qy=fid('tfqy'),qz=fid('tfqz');
      
      var w=1-qx*qx-qy*qy-qz*qz;
      if (w<0) w=0; else w=Math.sqrt(w);
      gebi('tfqw').value=w;
      
      //...
    }
    
    
    gebi('buset').onclick=function() {
      
      var b=o.userData.body;
      
      var px=fid('tfposx'),py=fid('tfposy'),pz=fid('tfposz');
      o.position.set(px,py,pz);
      b.position.set(px,py,pz);
      
      var qx=fid('tfqx'),qy=fid('tfqy'),qz=fid('tfqz'),qw=fid('tfqw');
      o.quaternion.set(qx,qy,qz,qw);
      b.quaternion.set(qx,qy,qz,qw);
      
      var dx=fid('tfdimx'),dy=fid('tfdimy'),dz=fid('tfdimz');
      o.geometry=new THREE.BoxGeometry(dx*2,dy*2,dz*2);
      //onsole.log(b.shapes.length);
      b.shapes[0]=new CANNON.Box(new CANNON.Vec3(dx,dy,dz));
      //b.computeAABB();
      b.updateBoundingRadius();
      b.updateMassProperties();
      
      var props=gebi('taprops').value;
      if (props.length==0) delete(o.userData.props);
      else o.userData.props=JSON.parse(props);
      
      
      localStorage[lskey]=serialize();
      //...
    }
    
    gebi('bucl').onclick=function() {
      document.body.removeChild(md.c);
      cfgMd=undefined;
      //...
    }
    //...
  }
  
  function animate() {
    requestAnimationFrame(animate);
    if(controls.enabled){
        //if (wp0) 
        for(var i=0; i<balls.length; i++){
          var b=balls[i];
          if (b.wp===undefined) continue;
          var wp=waypoints[b.wp];
          if (wp===undefined) continue;
          var wp0=wp.position,
              bp=b.body.position,dx=wp0.x-bp.x,dy=wp0.y-bp.y,dz=wp0.z-bp.z,
              l=Math.sqrt(dx*dx+dy*dy+dz*dz),f=1/l;
          dx*=f;dy*=f;dz*=f;
          var v=b.body.velocity;
          v.x+=dx;v.y+=dy;v.z+=dz;
          var vl=Math.sqrt(v.x*v.x+v.y*v.y+v.z*v.z),mv=5;
          if (vl>mv) { v.x*=mv/vl;v.y*=mv/vl;v.z*=mv/vl; }
          //onsole.log(vl);
          if (l<0.6) b.wp=wp.userData.props.waypoint.next[0];
          //onsole.log(l);
          //ballMeshes[i].position.copy(balls[i].position);
          //ballMeshes[i].quaternion.copy(balls[i].quaternion);
        }
    
    
    
    
        world.step(1/60);
    
        // Update ball positions
        for(var i=0; i<balls.length; i++){
            var b=balls[i];
            b.mesh.position.copy(b.body.position);
            b.mesh.quaternion.copy(b.body.quaternion);
            //ballMeshes[i].position.copy(balls[i].position);
            //ballMeshes[i].quaternion.copy(balls[i].quaternion);
        }
    
        // Update box positions
        for(var i=0; i<boxes.length; i++){
            boxMeshes[i].position.copy(boxes[i].position);
            boxMeshes[i].quaternion.copy(boxes[i].quaternion);
        }
    }
    
    //onsole.log(tsd[0].dx);
    
    if (!cfgMd) {
    raycaster.setFromCamera(new THREE.Vector2(0,0),camera);
    var intersects=raycaster.intersectObjects(scene.children);
    //var obj=intersects.length>0?intersects[0].object:undefined;
    //if (obj===groundMesh) obj=undefined;
    //if (obj&&!obj.userData.body) obj=undefined;
    var obj=undefined;
    for (var o of intersects) { o=o.object;if (o.userData&&o.userData.body) { obj=o;break; }}
    setRayObj(obj);
    }
    //onsole.log('intersects.length='+intersects.length);//if (intersects.length>0) {
    
    if (stats) stats.update();
    
    var cuti=Date.now(),dt=cuti-time;
    controls.update(dt);
    threeRender(dt);
    renderer.render(scene,camera);
    time=cuti;
    
  }
  
  function setRayObj(obj) {
    
    if (obj!=rayobj) {
      if (rayobj) { rayobj.material=rayobj.userData.oldMaterial; }
      rayobj=obj;
      if (obj) {
        obj.userData.oldMaterial=obj.material;
        obj.material=mray0;
      }
    }
    
    
    //...
  }
  
              var ballShape = new CANNON.Sphere(0.2);
              var ballGeometry = new THREE.SphereGeometry(ballShape.radius, 32, 32);
              var shootDirection = new THREE.Vector3();
              var shootVelo = 15;
              //var projector = new THREE.Projector();
  function getShootDir(targetVec) {
    var vector = targetVec;
    targetVec.set(0,0,1);
    vector.unproject(camera);//projector.unprojectVector(vector, camera);
    var ray = new THREE.Ray(sphereBody.position, vector.sub(sphereBody.position).normalize() );
    targetVec.copy(ray.direction);
  }
  function shoot() {
    if ((controls.enabled==true)&&!cfgMd) {
        var x = sphereBody.position.x;
        var y = sphereBody.position.y;
        var z = sphereBody.position.z;
        var ballBody = new CANNON.Body({ mass: 1 });
        ballBody.addShape(ballShape);
        var ballMesh = new THREE.Mesh( ballGeometry, material );
        world.addBody(ballBody);
        scene.add(ballMesh);
        ballMesh.castShadow = true;
        ballMesh.receiveShadow = true;
        balls.push({body:ballBody,mesh:ballMesh,wp:'wp0'});
        //onsole.log(ballBody);
        //ballMeshes.push(ballMesh);
        getShootDir(shootDirection);
        ballBody.velocity.set(  shootDirection.x * shootVelo,
                                shootDirection.y * shootVelo,
                                shootDirection.z * shootVelo);
    
        // Move the ball outside the player sphere
        x += shootDirection.x * (sphereShape.radius*1.02 + ballShape.radius);
        y += shootDirection.y * (sphereShape.radius*1.02 + ballShape.radius);
        z += shootDirection.z * (sphereShape.radius*1.02 + ballShape.radius);
        ballBody.position.set(x,y,z);
        ballMesh.position.set(x,y,z);
        //if (!cfgMd) objProps();
    }
    //...
  }
  
  window.addEventListener("click",shoot);//,false);
  //...
}
)();

        </script>
    </body>
</html><script>
//fr o,86
//fr o,86,62
//fr o,86,62,156
//fr o,86,62,156,2
//fr o,86,62,157
//fr o,86,62,163
//fr o,86,62,166
//fr o,86,62,169
//fr o,86,62,170
//fr o,86,65,37
//fr o,86,65,40
//fr o,86,65,42
//fr p,105,305
